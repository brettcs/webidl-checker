#!/usr/bin/python
# -*- coding: utf-8 -*-
"""
WebIDL extractor and checker based on widlproc http://widl.webvm.net/
In the commandline, takes one parameter: the URI from which to extract the WebIDLs
and optionally --extract-only to only get the extracted WebIDL
$Id$
"""


import cgi
import sys
import os
import urlparse
import urllib
import httplib
from lxml import etree

class WrongConfigurationException(Exception):
    """Exception raised when the script is not properly configured."""
    pass


class UnparseableDocumentException(Exception):
    """Exception raised when submitted document can't be turned into XHTML."""
    pass


Page = """Content-Type: text/html;charset=utf-8

<!DOCTYPE html>
<html lang="en-US">
<head><title>WebIDL checker%s</title>
<link rel="stylesheet" href="http://www.w3.org/StyleSheets/base" >
<style type="text/css">
.error { color:red}
.highlight { background-color:#fcc;}
.report {
 border-top:thin solid black;
}
</style>
</head>
<body>

<p><a href="http://www.w3.org/"><img src="http://www.w3.org/Icons/w3c_home" alt="W3C"></a> <a href="http://www.w3.org/2003/Editors">W3C Editors homepage</a> <a href="http://dev.w3.org/2006/webapi/WebIDL/">WebIDL spec</a></p>

<h1>WebIDL checker%s</h1>
"""
Page2 = """
<form method="GET">
<p><label for="doc">Source document</label>: <input id="doc" type="url" name="doc" value="%s"> (Web IDL in HTML, or plain text Web IDL fragments)</p>
<p><strong>OR</strong></p>
<p><label for='input'>Direct input</label>: <textarea id='input' name="input" rows="10" cols="70">%s</textarea></p>
<p><label>Ouput format: <select name="output"><option value="html">HTML</option><option value="text" %s>Text (GNU Error format)</option></select></label></p>
<p><input type="submit" value="Check Web IDL"></p>
</form>

<address>
script $Revision$ of $Date$<br>
by <a href="http://www.w3.org/People/Dom/">Dominique HazaÃ«l-Massieux</a><br>
the heavy work is done by <a href="http://widl.webvm.net/">widlproc</a>.
</address>
</body>
</html>
"""

	

def serveRequest():
    fields = cgi.FieldStorage()

    if (not fields.has_key('doc') and not fields.has_key('input')):
        print Page % ("", "")
	print Page2 % ("","","")
    else:
        doc = ""
        inp = ""
        if fields.has_key('doc') and fields['doc'].value:
            doc = fields['doc'].value
        elif fields.has_key('input'):
            inp = fields['input'].value
        if doc:
            if "'" in doc:
		print "Status: 403"
		print "Content-Type: text/plain"
		print
		print "sorry, I can't handle addresses with ' in them"
                sys.exit()
            elif doc[:5] == 'file:' or len(urlparse.urlparse(doc)[0])<2:
                print "Status: 403"
                print "Content-Type: text/plain"
                print
                print "sorry, I decline to handle file: addresses"
                sys.exit()
        # working around needed re-ident for now
        if True:
                output = "html"
                textoutputselected=""
                if fields.has_key('output') and fields['output'].value=='text':
                    # we'll output using http://www.gnu.org/prep/standards/standards.html#Errors
                    output = "text"
                    textoutputselected=" selected='selected'"
                extraRequestHeaders = []
                if fields.headers.has_key('If-Modified-Since'):
                    extraRequestHeaders.append("If-Modified-Since: %s" % (fields.headers["If-Modified-Since"]))
		if os.environ.has_key('REMOTE_ADDR') and os.environ['REMOTE_ADDR']:
                    extraRequestHeaders.append('X_Forward_IP_Addr: %s' %(os.environ['REMOTE_ADDR']))
                idls = []
                xmlOutput = []
                errors = []
                title = doc
                if doc:
                    try:
                        srcheaders,idls,xmlOutput,errors = extractIdls(doc,extraRequestHeaders)
                            
                    except UnparseableDocumentException,e:
                        print Page % ("", "")
                        print "<p class='error'>Failed to turn document into XHTML for extracting WebIDLs: <code>%s</code>.</p>" % (cgi.escape(str(e)))
                        print Page2 % (doc,"",textoutputselected)
                        sys.exit()
                    except WrongConfigurationException,e:
                        print Page % ("", "")
                        print "<p class='error'>Could not run <code><a href='http://widl.webvm.net/'>widlproc</a></code>: <code>%s</code>.</p>" % (cgi.escape(str(e)))
                        print Page2 % (doc,"",textoutputselected)
                        sys.exit()
                    if srcheaders.has_key('Last-Modified'):
                        print "Last-Modified: %s" % ( srcheaders["Last-Modified"] )
                    if srcheaders.has_key("Expires"):
                        print "Expires: %s" % (srcheaders['Expires'] )
                    if srcheaders.has_key("title"):
                        title = srcheaders["title"]
                elif inp:
                    idls.append(inp)
                    xmlout,error = syntax_check(inp,0,1)
                    if xmlout:
                        xmlOutput.append(xmlout)
                    if error:
                        errors.append(error)                    

                # sending content type header based on ouput param
                if output=='text':
                    print "Content-Type: text/plain;charset=utf-8"
                    print

                # payload starts here
                if output=='text':
                    if len(errors):
                        for error in errors:
                            idl,errormsg,idlline,position=error
                            try:
                                errorline,msg = errormsg.split(':',1)
                            except:
                                errorline = 0
                                msg = errormsg
                            if idlline:
                                line = int(errorline) + idlline
                                print "%d:%s" % (line,msg)
                            else:
                                print "Line %d of IDL #%d:%s" % (int(errorline),position,msg)
                    elif len(idls)==0:
                        print "# No WebIDL found in document at %s" % (cgi.escape(doc))
                    sys.exit()
                else:
                    htmltitle = "<a href='%s'>%s</a>" % (cgi.escape(doc), cgi.escape(title))
                    print Page  % ("cgi.escape(title)", htmltitle)
                    print "<p>Results of checking %s.</p>" % (htmltitle)
                    if len(errors):
                        print "<p class='error'>The following errors were found in the extracted WebIDLs:</p><ul>"
                        counter = 0
                        for e in errors:
                            counter = counter + 1
                            try:
                                errorline,msg = e[1].split(':',1)
                            except:
                                errorline = None
                                msg = e[1]
                            print "<li><a href='#e%d'>%s</a></li>\n" % (counter,msg)
                        print "</ul>"
                        counter = 0
                        for e in errors:
                            counter = counter + 1
                            try:
                                errorline = int(e[1].split(':')[0])
                            except:
                                errorline = None
                            # highlighting said line in IDL
                            idllines = e[0].split("\n")
                            highlightedidl = e[0]
                            if errorline!=None and errorline < len(idllines)+1 and errorline > 0:
                                highlightedidl = cgi.escape("\n".join(idllines[0:errorline-1])) + "\n" + "<span class='highlight'>%s</span>" % (cgi.escape(idllines[errorline-1]))
                                if errorline < len(idllines):
                                    highlightedidl = highlightedidl + "\n" + cgi.escape("\n".join(idllines[errorline:]))
                            # and printing out the report
                            print "<div class='report' id='e%d'>" % (counter)
                            if e[2]:
                                idldesc = "IDL at line %d" %(e[2])
                            else:
                                idldesc = "IDL #%d" %(e[3])
                            print "<pre class='error'>Line %s</pre><p>error in %s</p><pre class='idl'>%s</pre>" % (cgi.escape(e[1]),idldesc,highlightedidl)
                            print "</div>"
                        if len(xmlOutput):
                            # @@@ print name of valid interfaces?
                            print "<p>%d syntactically correct IDLs also detected.</p>" % (len(xmlOutput))
                    elif len(xmlOutput):
                        from lxml import etree
                        print "<p>%d syntactically correct IDLs detected:</p>" % (len(xmlOutput))
                        xslt_doc = etree.parse("/afs/w3.org/pub/WWW/2009/07/widlprocxmltohtmlfragment.xsl")
                        transform = etree.XSLT(xslt_doc)
                        for x in xmlOutput:
                            from StringIO import StringIO
                            f = StringIO(x)
                            xmldoc = etree.parse(f)
                            print "<div class='report'>"
                            print transform(xmldoc)
                            print "</div>"
                    else:
                        print "<p class='error'>No WebIDL found in the document at <a href='%s'>%s</a>.</p>" % (doc,doc)
                    print Page2 % (doc,inp,textoutputselected)

def extractIdls(doc,extraRequestHeaders=[]):
    # the function below is used to replace
    # the http_error handling to raise an exception in the url_opener
    # OK, this is ugly, but I don't want to create two derivative classes just for that
    def raise_on_http_error(self, url, fp, errcode, errmsg, headers):
        raise UnparseableDocumentException("HTTP Error: %d %s" %(errcode,errmsg))
    import new
    try:
        # http_auth is at http://dev.w3.org/cvsweb/2000/tidy-svc/http_auth.py
        # only useful for accessing Basic-Auth protected resources
        # in CGI service
        import http_auth
        url_opener = http_auth.ProxyAuthURLopener()
        url_opener.http_error_default=new.instancemethod(raise_on_http_error,url_opener,http_auth.ProxyAuthURLopener)
    except ImportError:
        url_opener = urllib.FancyURLopener()
        url_opener.http_error_default=new.instancemethod(raise_on_http_error,url_opener,urllib.FancyURLopener)

    for header in extraRequestHeaders:
        url_opener.addheader(header)
    try:
        srcdoc = url_opener.open(doc)
    except IOError, (errno, strerror):
        raise UnparseableDocumentException("I/O error: %s %s" % (errno,strerror))
    except httplib.InvalidURL:
        raise UnparseableDocumentException("Invalid URL submitted")
    if srcdoc:
        srcheaders = srcdoc.info()
        charset = ""
        contentType="text/html", {}
        if srcheaders.has_key('Content-Type'):
            contentType = cgi.parse_header(srcheaders["Content-Type"])
            if contentType[1].has_key('charset'):
                from string import lower
                charset = lower(contentType[1]['charset'])
        errors = []
        xmlOutput = []
        idlOutput = []
        if contentType[0] == "text/html":   
            # Extract WebIDLs from source document in invidual files
            # is the document already XML?
            try:
                parser = etree.XMLParser(resolve_entities=False)
                tree = etree.parse(doc,parser)
            except (etree.XMLSyntaxError,TypeError): #TypeError is raised by old versions of lxml :(
                try:
                    # we try the HTMLParser
                    tree = etree.parse(doc,etree.HTMLParser())
                except Exception, e:
                    # we run tidy on the document
                    # to make it XHTML
                    import tidy
                    # option for tidy
                    htmldoc = srcdoc.read()
                    options = dict(output_xhtml=1, # we want XHTML out
                               tidy_mark=0, # we don't want to change the markup
                               numeric_entities=1 # but non numeric entities ess up lxml
                               )
                    if charset == "iso-8859-1":
                        options["char_encoding"]='latin1'
                    else:
                        options["char_encoding"]='utf8'
                
                    t = str(tidy.parseString(htmldoc, **options))
                    from StringIO import StringIO
                    xmldoc = StringIO(t)
                    try:
                        tree = etree.parse(xmldoc)
                    except UnparseableDocumentException, e:
                        print t
                        raise UnparseableDocumentException(str(e))
            # and then get extracts IDLs through XPath            
            title = tree.xpath("/html/head/title/text()")
            title += tree.xpath("/html:html/html:head/html:title/text()",namespaces={'html': 'http://www.w3.org/1999/xhtml'})
            if len(title):
                srcheaders["title"] = title[0]
            # srcheaders["title"]
            idls = tree.xpath("/html:html/html:body//html:pre[@class='idl' or contains(@class,'webidl') or html:code[@class='idl-code']]",namespaces={'html': 'http://www.w3.org/1999/xhtml'})
            # handling the no-namespace case (source is in HTML)
            idls += tree.xpath("/html/body//pre[@class='idl' or contains(@class,'webidl') or code[@class='idl-code']]")
            counter = 0
            for idlHtml in idls:
                counter = counter + 1
                idl = "".join(idlHtml.xpath("descendant-or-self::text()"))
                idlOutput.append(idl)
                idlline = None
                try:
                    idlline = idlHtml.sourceline
                except AttributeError:
                    idlline = None
                # run widlproc on each of  them
                xmlout,error = syntax_check(idl,idlline,counter)
                if xmlout:
                    xmlOutput.append(xmlout)
                if error:
                    errors.append(error)
        elif contentType[0]=="text/plain":
            # we assume the text doc is a Web IDL fragment
            idl = srcdoc.read()
            idlOutput.append(idl)
            xmlout,error = syntax_check(idl,None,1)
            if xmlout:
                xmlOutput.append(xmlout)
            if error:
                errors.append(error)        
        if not len(errors):
            xmlWrapper = "<Module>" + "".join(xmlOutput) + "</Module>"
            semanticErrors = semantic_check(xmlWrapper, "\n".join(idlOutput), None, 0)
            if len(semanticErrors):
                errors = errors + semanticErrors
        return srcheaders,idlOutput,xmlOutput,errors
    else:
        raise UnparseableDocumentException("could not load resource: ")

# process an IDL fragment with widlproc
# returns the XML representation of the fragment, and a list of errors
def syntax_check(idl,idlline,counter):
    command = ['/usr/local/bin/widlproc','-no-dtd-ref','/dev/stdin']
    error = None
    xmlOutput = None
    from subprocess import Popen, PIPE
    try:
        p =  Popen(command, stdin=PIPE, stdout=PIPE, stderr=PIPE)
    except OSError:
        raise WrongConfigurationException("widlproc not available at %s" % (command[0]))
    p.stdin.write(idl)
    p.stdin.close()
    retcode = p.wait()
    errmsg = None
    if retcode!=0:
        # widlproc prepends the error message with the filename - we don't need that
        errmsg = p.stderr.read()[len("/dev/stdin: "):]
    if errmsg:
        error = (idl,errmsg,idlline,counter)
    else:
        xmlOutput = p.stdout.read()
        # getting rid of XML declaration
        xmlOutput = xmlOutput.split("?>",1)[1]
    return (xmlOutput,error)

def semantic_check(idlXml, idl, idlline, counter):
    errors = []
    schematron = etree.parse("widlproc-schematron/webidl-schematron.xsl")
    transform = etree.XSLT(schematron)
    idlXmlTree = etree.fromstring(idlXml)
    errorReport = transform(idlXmlTree)
    errorsInXml = errorReport.xpath("//svrl:failed-assert/svrl:text",namespaces={'svrl': 'http://purl.oclc.org/dsdl/svrl'})
    for err in errorsInXml:
        errmsg = "".join(err.xpath("descendant-or-self::text()"))
        error = (idl, errmsg, idlline, counter)
        if error:
            errors.append(error)
    return errors

def process(url,output='default'):
    import codecs, sys
    sys.stderr = codecs.getwriter('utf8')(sys.stderr)

    try:
        (info,idls,xmlOutput,errors)=extractIdls(url)
    except UnparseableDocumentException,e:
        sys.stderr.write( "Couldn't parse document at %s:%s" % (url,str(e)))
        sys.exit(1)
    except WrongConfigurationException,e:
        sys.stderr.write( "Couldn't run widlproc: %s\n" % (str(e)))
        sys.stderr.write( "Install it from http://widl.webvm.net/\n")
        sys.exit(1)
        
    if output=='default':
        if len(errors):
            for error in errors:
                try:
                    errorline = int(error[1].split(':')[0])
                except:
                    errorline = None
                # highlighting said line in IDL
                print error[0]
                idllines = error[0].split("\n")
                highlightedidl = error[0]
                if errorline!=None and errorline < len(idllines)+1 and errorline > 0:
                    highlightedidl = "\n".join(idllines[0:errorline-1]) + "\n" + "*** %s" % (idllines[errorline-1])
                    if errorline < len(idllines):
                        highlightedidl = highlightedidl + "\n" + "\n".join(idllines[errorline:])
                if error[2]:
                    idldesc="IDL at line %d" % (error[2])
                else:
                    idldesc="IDL #%d" % (error[3])

                # and printing out the report
                
                sys.stderr.write("%s\nerror found in %s\n%s" % (error[1],idldesc,highlightedidl))
                sys.stderr.write("-" * 30 + "\n")
        if not(len(errors)) and len(xmlOutput):
            print "<Module>" + "".join(xmlOutput) + "</Module>"
        if len(idls)==0:
            sys.stderr.write( "No WebIDL found in %s" % (url))
            sys.exit(1)
    elif output=='extract-only':
        for idl in idls:
            print idl



if __name__ == '__main__':
    if os.environ.has_key('SCRIPT_NAME'):
        serveRequest()
    else:
        import sys
        import getopt
        try:
            opts, args = getopt.getopt(sys.argv[1:], "he", ["help","extract-only"])
        except getopt.error, msg:
            print msg
            print "for help use --help"
            sys.exit(2)
        # process options
        output='default'
        for o, a in opts:
            if o in ("-h", "--help"):
                print __doc__
                sys.exit(0)
            if o in ("-e", "--extract-only"):
                output='extract-only'
        # process arguments
        process(args[0],output)
