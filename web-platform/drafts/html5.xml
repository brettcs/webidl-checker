<Definitions>

<Definitions>
  <Interface name="HTMLCollection" id="::HTMLCollection">
    <webidl>interface HTMLCollection {
  readonly attribute unsigned long length;
  caller getter object item(in unsigned long index); 
  caller getter object namedItem(in DOMString name); 
};</webidl>
    <Attribute readonly="readonly" name="length" id="::HTMLCollection::length">
      <webidl>  readonly attribute unsigned long length;</webidl>
      <Type type="unsigned long"/>
    </Attribute>
    <Operation caller="caller" getter="getter" name="item" id="::HTMLCollection::item">
      <webidl>  caller getter object item(in unsigned long index);</webidl>
      <Type type="object"/>
      <ArgumentList>
        <Argument in="in" name="index">
          <Type type="unsigned long"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation caller="caller" getter="getter" name="namedItem" id="::HTMLCollection::namedItem">
      <webidl>  caller getter object namedItem(in DOMString name);</webidl>
      <Type type="object"/>
      <ArgumentList>
        <Argument in="in" name="name">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLAllCollection" id="::HTMLAllCollection">
    <webidl>interface HTMLAllCollection : <ref>HTMLCollection</ref> {
  caller getter object namedItem(in DOMString name); 
  <ref>HTMLAllCollection</ref> tags(in DOMString tagName);
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLCollection"/>
    </InterfaceInheritance>
    <Operation caller="caller" getter="getter" name="namedItem" id="::HTMLAllCollection::namedItem">
      <webidl>  caller getter object namedItem(in DOMString name);</webidl>
      <Type type="object"/>
      <ArgumentList>
        <Argument in="in" name="name">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="tags" id="::HTMLAllCollection::tags">
      <webidl>  <ref>HTMLAllCollection</ref> tags(in DOMString tagName);</webidl>
      <Type name="HTMLAllCollection"/>
      <ArgumentList>
        <Argument in="in" name="tagName">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLFormControlsCollection" id="::HTMLFormControlsCollection">
    <webidl>interface HTMLFormControlsCollection : <ref>HTMLCollection</ref> {
  caller getter object namedItem(in DOMString name); 
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLCollection"/>
    </InterfaceInheritance>
    <Operation caller="caller" getter="getter" name="namedItem" id="::HTMLFormControlsCollection::namedItem">
      <webidl>  caller getter object namedItem(in DOMString name);</webidl>
      <Type type="object"/>
      <ArgumentList>
        <Argument in="in" name="name">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
  </Interface>
  <Interface name="RadioNodeList" id="::RadioNodeList">
    <webidl>interface RadioNodeList : <ref>NodeList</ref> {
          attribute DOMString value;
};</webidl>
    <InterfaceInheritance>
      <Name name="NodeList"/>
    </InterfaceInheritance>
    <Attribute name="value" id="::RadioNodeList::value">
      <webidl>          attribute DOMString value;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLOptionsCollection" id="::HTMLOptionsCollection">
    <webidl>interface HTMLOptionsCollection : <ref>HTMLCollection</ref> {
           attribute unsigned long length; 
  caller getter object namedItem(in DOMString name); 
  void add(in <ref>HTMLElement</ref> element, in optional <ref>HTMLElement</ref> before);
  void add(in <ref>HTMLElement</ref> element, in long before);
  void remove(in long index);
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLCollection"/>
    </InterfaceInheritance>
    <Attribute name="length" id="::HTMLOptionsCollection::length">
      <webidl>           attribute unsigned long length;</webidl>
      <Type type="unsigned long"/>
    </Attribute>
    <Operation caller="caller" getter="getter" name="namedItem" id="::HTMLOptionsCollection::namedItem">
      <webidl>  caller getter object namedItem(in DOMString name);</webidl>
      <Type type="object"/>
      <ArgumentList>
        <Argument in="in" name="name">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="add" id="::HTMLOptionsCollection::add">
      <webidl>  void add(in <ref>HTMLElement</ref> element, in optional <ref>HTMLElement</ref> before);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" name="element">
          <Type name="HTMLElement"/>
        </Argument>
        <Argument in="in" optional="optional" name="before">
          <Type name="HTMLElement"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="add" id="::HTMLOptionsCollection::add">
      <webidl>  void add(in <ref>HTMLElement</ref> element, in long before);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" name="element">
          <Type name="HTMLElement"/>
        </Argument>
        <Argument in="in" name="before">
          <Type type="long"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="remove" id="::HTMLOptionsCollection::remove">
      <webidl>  void remove(in long index);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" name="index">
          <Type type="long"/>
        </Argument>
      </ArgumentList>
    </Operation>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="DOMTokenList" id="::DOMTokenList">
    <webidl>interface DOMTokenList {
  readonly attribute unsigned long length;
  getter DOMString item(in unsigned long index);
  boolean contains(in DOMString token);
  void add(in DOMString token);
  void remove(in DOMString token);
  boolean toggle(in DOMString token);
  stringifier DOMString ();
};</webidl>
    <Attribute readonly="readonly" name="length" id="::DOMTokenList::length">
      <webidl>  readonly attribute unsigned long length;</webidl>
      <Type type="unsigned long"/>
    </Attribute>
    <Operation getter="getter" name="item" id="::DOMTokenList::item">
      <webidl>  getter DOMString item(in unsigned long index);</webidl>
      <Type type="DOMString"/>
      <ArgumentList>
        <Argument in="in" name="index">
          <Type type="unsigned long"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="contains" id="::DOMTokenList::contains">
      <webidl>  boolean contains(in DOMString token);</webidl>
      <Type type="boolean"/>
      <ArgumentList>
        <Argument in="in" name="token">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="add" id="::DOMTokenList::add">
      <webidl>  void add(in DOMString token);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" name="token">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="remove" id="::DOMTokenList::remove">
      <webidl>  void remove(in DOMString token);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" name="token">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="toggle" id="::DOMTokenList::toggle">
      <webidl>  boolean toggle(in DOMString token);</webidl>
      <Type type="boolean"/>
      <ArgumentList>
        <Argument in="in" name="token">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation stringifier="stringifier">
      <webidl>  stringifier DOMString ();</webidl>
      <Type type="DOMString"/>
      <ArgumentList/>
    </Operation>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="DOMSettableTokenList" id="::DOMSettableTokenList">
    <webidl>interface DOMSettableTokenList : <ref>DOMTokenList</ref> {
            attribute DOMString value;
};</webidl>
    <InterfaceInheritance>
      <Name name="DOMTokenList"/>
    </InterfaceInheritance>
    <Attribute name="value" id="::DOMSettableTokenList::value">
      <webidl>            attribute DOMString value;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="DOMStringMap" id="::DOMStringMap">
    <webidl>interface DOMStringMap {
  getter DOMString (in DOMString name);
  setter void (in DOMString name, in DOMString value);
  creator void (in DOMString name, in DOMString value);
  deleter void (in DOMString name);
};</webidl>
    <Operation getter="getter">
      <webidl>  getter DOMString (in DOMString name);</webidl>
      <Type type="DOMString"/>
      <ArgumentList>
        <Argument in="in" name="name">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation setter="setter">
      <webidl>  setter void (in DOMString name, in DOMString value);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" name="name">
          <Type type="DOMString"/>
        </Argument>
        <Argument in="in" name="value">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation creator="creator">
      <webidl>  creator void (in DOMString name, in DOMString value);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" name="name">
          <Type type="DOMString"/>
        </Argument>
        <Argument in="in" name="value">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation deleter="deleter">
      <webidl>  deleter void (in DOMString name);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" name="name">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLDocument" id="::HTMLDocument">
    <webidl>[OverrideBuiltins]
interface HTMLDocument {
  [PutForwards=href] readonly attribute <ref>Location</ref> location;
  readonly attribute DOMString URL;
           attribute DOMString domain;
  readonly attribute DOMString referrer;
           attribute DOMString cookie;
  readonly attribute DOMString lastModified;
  readonly attribute DOMString compatMode;
           attribute DOMString charset;
  readonly attribute DOMString characterSet;
  readonly attribute DOMString defaultCharset;
  readonly attribute DOMString readyState;

  getter any (in DOMString name);
           attribute DOMString title;
           attribute DOMString dir;
           attribute <ref>HTMLElement</ref> body;
  readonly attribute <ref>HTMLHeadElement</ref> head;
  readonly attribute <ref>HTMLCollection</ref> images;
  readonly attribute <ref>HTMLCollection</ref> embeds;
  readonly attribute <ref>HTMLCollection</ref> plugins;
  readonly attribute <ref>HTMLCollection</ref> links;
  readonly attribute <ref>HTMLCollection</ref> forms;
  readonly attribute <ref>HTMLCollection</ref> scripts;
  <ref>NodeList</ref> getElementsByName(in DOMString elementName);
  <ref>NodeList</ref> getElementsByClassName(in DOMString classNames);

           attribute DOMString innerHTML;
  <ref>HTMLDocument</ref> open(in optional DOMString type, in optional DOMString replace);
  <ref>WindowProxy</ref> open(in DOMString url, in DOMString name, in DOMString features, in optional boolean replace);
  void close();
  void write(in DOMString... text);
  void writeln(in DOMString... text);

  <ref>Selection</ref> getSelection();
  readonly attribute <ref>Element</ref> activeElement;
  boolean hasFocus();
           attribute DOMString designMode;
  boolean execCommand(in DOMString commandId);
  boolean execCommand(in DOMString commandId, in boolean showUI);
  boolean execCommand(in DOMString commandId, in boolean showUI, in DOMString value);
  boolean queryCommandEnabled(in DOMString commandId);
  boolean queryCommandIndeterm(in DOMString commandId);
  boolean queryCommandState(in DOMString commandId);
  boolean queryCommandSupported(in DOMString commandId);
  DOMString queryCommandValue(in DOMString commandId);
  readonly attribute <ref>HTMLCollection</ref> commands;

           attribute <ref>Function</ref> onabort;
           attribute <ref>Function</ref> onblur;
           attribute <ref>Function</ref> oncanplay;
           attribute <ref>Function</ref> oncanplaythrough;
           attribute <ref>Function</ref> onchange;
           attribute <ref>Function</ref> onclick;
           attribute <ref>Function</ref> oncontextmenu;
           attribute <ref>Function</ref> ondblclick;
           attribute <ref>Function</ref> ondrag;
           attribute <ref>Function</ref> ondragend;
           attribute <ref>Function</ref> ondragenter;
           attribute <ref>Function</ref> ondragleave;
           attribute <ref>Function</ref> ondragover;
           attribute <ref>Function</ref> ondragstart;
           attribute <ref>Function</ref> ondrop;
           attribute <ref>Function</ref> ondurationchange;
           attribute <ref>Function</ref> onemptied;
           attribute <ref>Function</ref> onended;
           attribute <ref>Function</ref> onerror;
           attribute <ref>Function</ref> onfocus;
           attribute <ref>Function</ref> onformchange;
           attribute <ref>Function</ref> onforminput;
           attribute <ref>Function</ref> oninput;
           attribute <ref>Function</ref> oninvalid;
           attribute <ref>Function</ref> onkeydown;
           attribute <ref>Function</ref> onkeypress;
           attribute <ref>Function</ref> onkeyup;
           attribute <ref>Function</ref> onload;
           attribute <ref>Function</ref> onloadeddata;
           attribute <ref>Function</ref> onloadedmetadata;
           attribute <ref>Function</ref> onloadstart;
           attribute <ref>Function</ref> onmousedown;
           attribute <ref>Function</ref> onmousemove;
           attribute <ref>Function</ref> onmouseout;
           attribute <ref>Function</ref> onmouseover;
           attribute <ref>Function</ref> onmouseup;
           attribute <ref>Function</ref> onmousewheel;
           attribute <ref>Function</ref> onpause;
           attribute <ref>Function</ref> onplay;
           attribute <ref>Function</ref> onplaying;
           attribute <ref>Function</ref> onprogress;
           attribute <ref>Function</ref> onratechange;
           attribute <ref>Function</ref> onreadystatechange;
           attribute <ref>Function</ref> onscroll;
           attribute <ref>Function</ref> onseeked;
           attribute <ref>Function</ref> onseeking;
           attribute <ref>Function</ref> onselect;
           attribute <ref>Function</ref> onshow;
           attribute <ref>Function</ref> onstalled;
           attribute <ref>Function</ref> onsubmit;
           attribute <ref>Function</ref> onsuspend;
           attribute <ref>Function</ref> ontimeupdate;
           attribute <ref>Function</ref> onvolumechange;
           attribute <ref>Function</ref> onwaiting;
};</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="OverrideBuiltins"/>
    </ExtendedAttributeList>
    <Attribute readonly="readonly" name="location" id="::HTMLDocument::location">
      <webidl> readonly attribute <ref>Location</ref> location;</webidl>
      <Type name="Location"/>
    </Attribute>
    <Attribute readonly="readonly" name="URL" id="::HTMLDocument::URL">
      <webidl>  readonly attribute DOMString URL;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="domain" id="::HTMLDocument::domain">
      <webidl>           attribute DOMString domain;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute readonly="readonly" name="referrer" id="::HTMLDocument::referrer">
      <webidl>  readonly attribute DOMString referrer;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="cookie" id="::HTMLDocument::cookie">
      <webidl>           attribute DOMString cookie;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute readonly="readonly" name="lastModified" id="::HTMLDocument::lastModified">
      <webidl>  readonly attribute DOMString lastModified;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute readonly="readonly" name="compatMode" id="::HTMLDocument::compatMode">
      <webidl>  readonly attribute DOMString compatMode;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="charset" id="::HTMLDocument::charset">
      <webidl>           attribute DOMString charset;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute readonly="readonly" name="characterSet" id="::HTMLDocument::characterSet">
      <webidl>  readonly attribute DOMString characterSet;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute readonly="readonly" name="defaultCharset" id="::HTMLDocument::defaultCharset">
      <webidl>  readonly attribute DOMString defaultCharset;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute readonly="readonly" name="readyState" id="::HTMLDocument::readyState">
      <webidl>  readonly attribute DOMString readyState;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Operation getter="getter">
      <webidl>  getter any (in DOMString name);</webidl>
      <Type type="any"/>
      <ArgumentList>
        <Argument in="in" name="name">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Attribute name="title" id="::HTMLDocument::title">
      <webidl>           attribute DOMString title;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="dir" id="::HTMLDocument::dir">
      <webidl>           attribute DOMString dir;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="body" id="::HTMLDocument::body">
      <webidl>           attribute <ref>HTMLElement</ref> body;</webidl>
      <Type name="HTMLElement"/>
    </Attribute>
    <Attribute readonly="readonly" name="head" id="::HTMLDocument::head">
      <webidl>  readonly attribute <ref>HTMLHeadElement</ref> head;</webidl>
      <Type name="HTMLHeadElement"/>
    </Attribute>
    <Attribute readonly="readonly" name="images" id="::HTMLDocument::images">
      <webidl>  readonly attribute <ref>HTMLCollection</ref> images;</webidl>
      <Type name="HTMLCollection"/>
    </Attribute>
    <Attribute readonly="readonly" name="embeds" id="::HTMLDocument::embeds">
      <webidl>  readonly attribute <ref>HTMLCollection</ref> embeds;</webidl>
      <Type name="HTMLCollection"/>
    </Attribute>
    <Attribute readonly="readonly" name="plugins" id="::HTMLDocument::plugins">
      <webidl>  readonly attribute <ref>HTMLCollection</ref> plugins;</webidl>
      <Type name="HTMLCollection"/>
    </Attribute>
    <Attribute readonly="readonly" name="links" id="::HTMLDocument::links">
      <webidl>  readonly attribute <ref>HTMLCollection</ref> links;</webidl>
      <Type name="HTMLCollection"/>
    </Attribute>
    <Attribute readonly="readonly" name="forms" id="::HTMLDocument::forms">
      <webidl>  readonly attribute <ref>HTMLCollection</ref> forms;</webidl>
      <Type name="HTMLCollection"/>
    </Attribute>
    <Attribute readonly="readonly" name="scripts" id="::HTMLDocument::scripts">
      <webidl>  readonly attribute <ref>HTMLCollection</ref> scripts;</webidl>
      <Type name="HTMLCollection"/>
    </Attribute>
    <Operation name="getElementsByName" id="::HTMLDocument::getElementsByName">
      <webidl>  <ref>NodeList</ref> getElementsByName(in DOMString elementName);</webidl>
      <Type name="NodeList"/>
      <ArgumentList>
        <Argument in="in" name="elementName">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="getElementsByClassName" id="::HTMLDocument::getElementsByClassName">
      <webidl>  <ref>NodeList</ref> getElementsByClassName(in DOMString classNames);</webidl>
      <Type name="NodeList"/>
      <ArgumentList>
        <Argument in="in" name="classNames">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Attribute name="innerHTML" id="::HTMLDocument::innerHTML">
      <webidl>           attribute DOMString innerHTML;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Operation name="open" id="::HTMLDocument::open">
      <webidl>  <ref>HTMLDocument</ref> open(in optional DOMString type, in optional DOMString replace);</webidl>
      <Type name="HTMLDocument"/>
      <ArgumentList>
        <Argument in="in" optional="optional" name="type">
          <Type type="DOMString"/>
        </Argument>
        <Argument in="in" optional="optional" name="replace">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="open" id="::HTMLDocument::open">
      <webidl>  <ref>WindowProxy</ref> open(in DOMString url, in DOMString name, in DOMString features, in optional boolean replace);</webidl>
      <Type name="WindowProxy"/>
      <ArgumentList>
        <Argument in="in" name="url">
          <Type type="DOMString"/>
        </Argument>
        <Argument in="in" name="name">
          <Type type="DOMString"/>
        </Argument>
        <Argument in="in" name="features">
          <Type type="DOMString"/>
        </Argument>
        <Argument in="in" optional="optional" name="replace">
          <Type type="boolean"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="close" id="::HTMLDocument::close">
      <webidl>  void close();</webidl>
      <Type type="void"/>
      <ArgumentList/>
    </Operation>
    <Operation name="write" id="::HTMLDocument::write">
      <webidl>  void write(in DOMString... text);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" ellipsis="ellipsis" name="text">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="writeln" id="::HTMLDocument::writeln">
      <webidl>  void writeln(in DOMString... text);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" ellipsis="ellipsis" name="text">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="getSelection" id="::HTMLDocument::getSelection">
      <webidl>  <ref>Selection</ref> getSelection();</webidl>
      <Type name="Selection"/>
      <ArgumentList/>
    </Operation>
    <Attribute readonly="readonly" name="activeElement" id="::HTMLDocument::activeElement">
      <webidl>  readonly attribute <ref>Element</ref> activeElement;</webidl>
      <Type name="Element"/>
    </Attribute>
    <Operation name="hasFocus" id="::HTMLDocument::hasFocus">
      <webidl>  boolean hasFocus();</webidl>
      <Type type="boolean"/>
      <ArgumentList/>
    </Operation>
    <Attribute name="designMode" id="::HTMLDocument::designMode">
      <webidl>           attribute DOMString designMode;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Operation name="execCommand" id="::HTMLDocument::execCommand">
      <webidl>  boolean execCommand(in DOMString commandId);</webidl>
      <Type type="boolean"/>
      <ArgumentList>
        <Argument in="in" name="commandId">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="execCommand" id="::HTMLDocument::execCommand">
      <webidl>  boolean execCommand(in DOMString commandId, in boolean showUI);</webidl>
      <Type type="boolean"/>
      <ArgumentList>
        <Argument in="in" name="commandId">
          <Type type="DOMString"/>
        </Argument>
        <Argument in="in" name="showUI">
          <Type type="boolean"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="execCommand" id="::HTMLDocument::execCommand">
      <webidl>  boolean execCommand(in DOMString commandId, in boolean showUI, in DOMString value);</webidl>
      <Type type="boolean"/>
      <ArgumentList>
        <Argument in="in" name="commandId">
          <Type type="DOMString"/>
        </Argument>
        <Argument in="in" name="showUI">
          <Type type="boolean"/>
        </Argument>
        <Argument in="in" name="value">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="queryCommandEnabled" id="::HTMLDocument::queryCommandEnabled">
      <webidl>  boolean queryCommandEnabled(in DOMString commandId);</webidl>
      <Type type="boolean"/>
      <ArgumentList>
        <Argument in="in" name="commandId">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="queryCommandIndeterm" id="::HTMLDocument::queryCommandIndeterm">
      <webidl>  boolean queryCommandIndeterm(in DOMString commandId);</webidl>
      <Type type="boolean"/>
      <ArgumentList>
        <Argument in="in" name="commandId">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="queryCommandState" id="::HTMLDocument::queryCommandState">
      <webidl>  boolean queryCommandState(in DOMString commandId);</webidl>
      <Type type="boolean"/>
      <ArgumentList>
        <Argument in="in" name="commandId">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="queryCommandSupported" id="::HTMLDocument::queryCommandSupported">
      <webidl>  boolean queryCommandSupported(in DOMString commandId);</webidl>
      <Type type="boolean"/>
      <ArgumentList>
        <Argument in="in" name="commandId">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="queryCommandValue" id="::HTMLDocument::queryCommandValue">
      <webidl>  DOMString queryCommandValue(in DOMString commandId);</webidl>
      <Type type="DOMString"/>
      <ArgumentList>
        <Argument in="in" name="commandId">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Attribute readonly="readonly" name="commands" id="::HTMLDocument::commands">
      <webidl>  readonly attribute <ref>HTMLCollection</ref> commands;</webidl>
      <Type name="HTMLCollection"/>
    </Attribute>
    <Attribute name="onabort" id="::HTMLDocument::onabort">
      <webidl>           attribute <ref>Function</ref> onabort;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onblur" id="::HTMLDocument::onblur">
      <webidl>           attribute <ref>Function</ref> onblur;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="oncanplay" id="::HTMLDocument::oncanplay">
      <webidl>           attribute <ref>Function</ref> oncanplay;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="oncanplaythrough" id="::HTMLDocument::oncanplaythrough">
      <webidl>           attribute <ref>Function</ref> oncanplaythrough;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onchange" id="::HTMLDocument::onchange">
      <webidl>           attribute <ref>Function</ref> onchange;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onclick" id="::HTMLDocument::onclick">
      <webidl>           attribute <ref>Function</ref> onclick;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="oncontextmenu" id="::HTMLDocument::oncontextmenu">
      <webidl>           attribute <ref>Function</ref> oncontextmenu;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="ondblclick" id="::HTMLDocument::ondblclick">
      <webidl>           attribute <ref>Function</ref> ondblclick;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="ondrag" id="::HTMLDocument::ondrag">
      <webidl>           attribute <ref>Function</ref> ondrag;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="ondragend" id="::HTMLDocument::ondragend">
      <webidl>           attribute <ref>Function</ref> ondragend;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="ondragenter" id="::HTMLDocument::ondragenter">
      <webidl>           attribute <ref>Function</ref> ondragenter;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="ondragleave" id="::HTMLDocument::ondragleave">
      <webidl>           attribute <ref>Function</ref> ondragleave;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="ondragover" id="::HTMLDocument::ondragover">
      <webidl>           attribute <ref>Function</ref> ondragover;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="ondragstart" id="::HTMLDocument::ondragstart">
      <webidl>           attribute <ref>Function</ref> ondragstart;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="ondrop" id="::HTMLDocument::ondrop">
      <webidl>           attribute <ref>Function</ref> ondrop;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="ondurationchange" id="::HTMLDocument::ondurationchange">
      <webidl>           attribute <ref>Function</ref> ondurationchange;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onemptied" id="::HTMLDocument::onemptied">
      <webidl>           attribute <ref>Function</ref> onemptied;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onended" id="::HTMLDocument::onended">
      <webidl>           attribute <ref>Function</ref> onended;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onerror" id="::HTMLDocument::onerror">
      <webidl>           attribute <ref>Function</ref> onerror;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onfocus" id="::HTMLDocument::onfocus">
      <webidl>           attribute <ref>Function</ref> onfocus;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onformchange" id="::HTMLDocument::onformchange">
      <webidl>           attribute <ref>Function</ref> onformchange;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onforminput" id="::HTMLDocument::onforminput">
      <webidl>           attribute <ref>Function</ref> onforminput;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="oninput" id="::HTMLDocument::oninput">
      <webidl>           attribute <ref>Function</ref> oninput;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="oninvalid" id="::HTMLDocument::oninvalid">
      <webidl>           attribute <ref>Function</ref> oninvalid;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onkeydown" id="::HTMLDocument::onkeydown">
      <webidl>           attribute <ref>Function</ref> onkeydown;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onkeypress" id="::HTMLDocument::onkeypress">
      <webidl>           attribute <ref>Function</ref> onkeypress;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onkeyup" id="::HTMLDocument::onkeyup">
      <webidl>           attribute <ref>Function</ref> onkeyup;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onload" id="::HTMLDocument::onload">
      <webidl>           attribute <ref>Function</ref> onload;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onloadeddata" id="::HTMLDocument::onloadeddata">
      <webidl>           attribute <ref>Function</ref> onloadeddata;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onloadedmetadata" id="::HTMLDocument::onloadedmetadata">
      <webidl>           attribute <ref>Function</ref> onloadedmetadata;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onloadstart" id="::HTMLDocument::onloadstart">
      <webidl>           attribute <ref>Function</ref> onloadstart;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onmousedown" id="::HTMLDocument::onmousedown">
      <webidl>           attribute <ref>Function</ref> onmousedown;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onmousemove" id="::HTMLDocument::onmousemove">
      <webidl>           attribute <ref>Function</ref> onmousemove;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onmouseout" id="::HTMLDocument::onmouseout">
      <webidl>           attribute <ref>Function</ref> onmouseout;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onmouseover" id="::HTMLDocument::onmouseover">
      <webidl>           attribute <ref>Function</ref> onmouseover;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onmouseup" id="::HTMLDocument::onmouseup">
      <webidl>           attribute <ref>Function</ref> onmouseup;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onmousewheel" id="::HTMLDocument::onmousewheel">
      <webidl>           attribute <ref>Function</ref> onmousewheel;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onpause" id="::HTMLDocument::onpause">
      <webidl>           attribute <ref>Function</ref> onpause;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onplay" id="::HTMLDocument::onplay">
      <webidl>           attribute <ref>Function</ref> onplay;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onplaying" id="::HTMLDocument::onplaying">
      <webidl>           attribute <ref>Function</ref> onplaying;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onprogress" id="::HTMLDocument::onprogress">
      <webidl>           attribute <ref>Function</ref> onprogress;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onratechange" id="::HTMLDocument::onratechange">
      <webidl>           attribute <ref>Function</ref> onratechange;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onreadystatechange" id="::HTMLDocument::onreadystatechange">
      <webidl>           attribute <ref>Function</ref> onreadystatechange;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onscroll" id="::HTMLDocument::onscroll">
      <webidl>           attribute <ref>Function</ref> onscroll;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onseeked" id="::HTMLDocument::onseeked">
      <webidl>           attribute <ref>Function</ref> onseeked;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onseeking" id="::HTMLDocument::onseeking">
      <webidl>           attribute <ref>Function</ref> onseeking;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onselect" id="::HTMLDocument::onselect">
      <webidl>           attribute <ref>Function</ref> onselect;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onshow" id="::HTMLDocument::onshow">
      <webidl>           attribute <ref>Function</ref> onshow;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onstalled" id="::HTMLDocument::onstalled">
      <webidl>           attribute <ref>Function</ref> onstalled;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onsubmit" id="::HTMLDocument::onsubmit">
      <webidl>           attribute <ref>Function</ref> onsubmit;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onsuspend" id="::HTMLDocument::onsuspend">
      <webidl>           attribute <ref>Function</ref> onsuspend;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="ontimeupdate" id="::HTMLDocument::ontimeupdate">
      <webidl>           attribute <ref>Function</ref> ontimeupdate;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onvolumechange" id="::HTMLDocument::onvolumechange">
      <webidl>           attribute <ref>Function</ref> onvolumechange;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onwaiting" id="::HTMLDocument::onwaiting">
      <webidl>           attribute <ref>Function</ref> onwaiting;</webidl>
      <Type name="Function"/>
    </Attribute>
  </Interface>
  <Implements name1="Document" name2="HTMLDocument">
    <webidl><ref>Document</ref> implements <ref>HTMLDocument</ref>;</webidl>
  </Implements>
</Definitions>


<Definitions>
  <Interface name="DOMHTMLImplementation" id="::DOMHTMLImplementation">
    <webidl>[Supplemental, NoInterfaceObject]
interface DOMHTMLImplementation {
  <ref>Document</ref> createHTMLDocument(in DOMString title);
};</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="Supplemental"/>
      <ExtendedAttribute name="NoInterfaceObject"/>
    </ExtendedAttributeList>
    <Operation name="createHTMLDocument" id="::DOMHTMLImplementation::createHTMLDocument">
      <webidl>  <ref>Document</ref> createHTMLDocument(in DOMString title);</webidl>
      <Type name="Document"/>
      <ArgumentList>
        <Argument in="in" name="title">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
  </Interface>
  <Implements name1="DOMImplementation" name2="DOMHTMLImplementation">
    <webidl><ref>DOMImplementation</ref> implements <ref>DOMHTMLImplementation</ref>;</webidl>
  </Implements>
</Definitions>


<Definitions>
  <Interface name="HTMLElement" id="::HTMLElement">
    <webidl>interface HTMLElement : <ref>Element</ref> {
  <ref>NodeList</ref> getElementsByClassName(in DOMString classNames);

           attribute DOMString innerHTML;
           attribute DOMString outerHTML;
  void insertAdjacentHTML(in DOMString position, in DOMString text);

           attribute DOMString id;
           attribute DOMString title;
           attribute DOMString lang;
           attribute DOMString dir;
           attribute DOMString className;
  readonly attribute <ref>DOMTokenList</ref> classList;
  readonly attribute <ref>DOMStringMap</ref> dataset;

           attribute boolean hidden;
  void click();
  void scrollIntoView();
  void scrollIntoView(in boolean top);
           attribute long tabIndex;
  void focus();
  void blur();
           attribute DOMString accessKey;
  readonly attribute DOMString accessKeyLabel;
           attribute boolean draggable;
           attribute DOMString contentEditable;
  readonly attribute boolean isContentEditable;
           attribute <ref>HTMLMenuElement</ref> contextMenu;
           attribute DOMString spellcheck;

  readonly attribute DOMString commandType;
  readonly attribute DOMString label;
  readonly attribute DOMString icon;
  readonly attribute boolean disabled;
  readonly attribute boolean checked;

  readonly attribute <ref>CSSStyleDeclaration</ref> style;

           attribute <ref>Function</ref> onabort;
           attribute <ref>Function</ref> onblur;
           attribute <ref>Function</ref> oncanplay;
           attribute <ref>Function</ref> oncanplaythrough;
           attribute <ref>Function</ref> onchange;
           attribute <ref>Function</ref> onclick;
           attribute <ref>Function</ref> oncontextmenu;
           attribute <ref>Function</ref> ondblclick;
           attribute <ref>Function</ref> ondrag;
           attribute <ref>Function</ref> ondragend;
           attribute <ref>Function</ref> ondragenter;
           attribute <ref>Function</ref> ondragleave;
           attribute <ref>Function</ref> ondragover;
           attribute <ref>Function</ref> ondragstart;
           attribute <ref>Function</ref> ondrop;
           attribute <ref>Function</ref> ondurationchange;
           attribute <ref>Function</ref> onemptied;
           attribute <ref>Function</ref> onended;
           attribute <ref>Function</ref> onerror;
           attribute <ref>Function</ref> onfocus;
           attribute <ref>Function</ref> onformchange;
           attribute <ref>Function</ref> onforminput;
           attribute <ref>Function</ref> oninput;
           attribute <ref>Function</ref> oninvalid;
           attribute <ref>Function</ref> onkeydown;
           attribute <ref>Function</ref> onkeypress;
           attribute <ref>Function</ref> onkeyup;
           attribute <ref>Function</ref> onload;
           attribute <ref>Function</ref> onloadeddata;
           attribute <ref>Function</ref> onloadedmetadata;
           attribute <ref>Function</ref> onloadstart;
           attribute <ref>Function</ref> onmousedown;
           attribute <ref>Function</ref> onmousemove;
           attribute <ref>Function</ref> onmouseout;
           attribute <ref>Function</ref> onmouseover;
           attribute <ref>Function</ref> onmouseup;
           attribute <ref>Function</ref> onmousewheel;
           attribute <ref>Function</ref> onpause;
           attribute <ref>Function</ref> onplay;
           attribute <ref>Function</ref> onplaying;
           attribute <ref>Function</ref> onprogress;
           attribute <ref>Function</ref> onratechange;
           attribute <ref>Function</ref> onreadystatechange;
           attribute <ref>Function</ref> onscroll;
           attribute <ref>Function</ref> onseeked;
           attribute <ref>Function</ref> onseeking;
           attribute <ref>Function</ref> onselect;
           attribute <ref>Function</ref> onshow;
           attribute <ref>Function</ref> onstalled;
           attribute <ref>Function</ref> onsubmit;
           attribute <ref>Function</ref> onsuspend;
           attribute <ref>Function</ref> ontimeupdate;
           attribute <ref>Function</ref> onvolumechange;
           attribute <ref>Function</ref> onwaiting;
};</webidl>
    <InterfaceInheritance>
      <Name name="Element"/>
    </InterfaceInheritance>
    <Operation name="getElementsByClassName" id="::HTMLElement::getElementsByClassName">
      <webidl>  <ref>NodeList</ref> getElementsByClassName(in DOMString classNames);</webidl>
      <Type name="NodeList"/>
      <ArgumentList>
        <Argument in="in" name="classNames">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Attribute name="innerHTML" id="::HTMLElement::innerHTML">
      <webidl>           attribute DOMString innerHTML;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="outerHTML" id="::HTMLElement::outerHTML">
      <webidl>           attribute DOMString outerHTML;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Operation name="insertAdjacentHTML" id="::HTMLElement::insertAdjacentHTML">
      <webidl>  void insertAdjacentHTML(in DOMString position, in DOMString text);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" name="position">
          <Type type="DOMString"/>
        </Argument>
        <Argument in="in" name="text">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Attribute name="id" id="::HTMLElement::id">
      <webidl>           attribute DOMString id;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="title" id="::HTMLElement::title">
      <webidl>           attribute DOMString title;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="lang" id="::HTMLElement::lang">
      <webidl>           attribute DOMString lang;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="dir" id="::HTMLElement::dir">
      <webidl>           attribute DOMString dir;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="className" id="::HTMLElement::className">
      <webidl>           attribute DOMString className;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute readonly="readonly" name="classList" id="::HTMLElement::classList">
      <webidl>  readonly attribute <ref>DOMTokenList</ref> classList;</webidl>
      <Type name="DOMTokenList"/>
    </Attribute>
    <Attribute readonly="readonly" name="dataset" id="::HTMLElement::dataset">
      <webidl>  readonly attribute <ref>DOMStringMap</ref> dataset;</webidl>
      <Type name="DOMStringMap"/>
    </Attribute>
    <Attribute name="hidden" id="::HTMLElement::hidden">
      <webidl>           attribute boolean hidden;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Operation name="click" id="::HTMLElement::click">
      <webidl>  void click();</webidl>
      <Type type="void"/>
      <ArgumentList/>
    </Operation>
    <Operation name="scrollIntoView" id="::HTMLElement::scrollIntoView">
      <webidl>  void scrollIntoView();</webidl>
      <Type type="void"/>
      <ArgumentList/>
    </Operation>
    <Operation name="scrollIntoView" id="::HTMLElement::scrollIntoView">
      <webidl>  void scrollIntoView(in boolean top);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" name="top">
          <Type type="boolean"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Attribute name="tabIndex" id="::HTMLElement::tabIndex">
      <webidl>           attribute long tabIndex;</webidl>
      <Type type="long"/>
    </Attribute>
    <Operation name="focus" id="::HTMLElement::focus">
      <webidl>  void focus();</webidl>
      <Type type="void"/>
      <ArgumentList/>
    </Operation>
    <Operation name="blur" id="::HTMLElement::blur">
      <webidl>  void blur();</webidl>
      <Type type="void"/>
      <ArgumentList/>
    </Operation>
    <Attribute name="accessKey" id="::HTMLElement::accessKey">
      <webidl>           attribute DOMString accessKey;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute readonly="readonly" name="accessKeyLabel" id="::HTMLElement::accessKeyLabel">
      <webidl>  readonly attribute DOMString accessKeyLabel;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="draggable" id="::HTMLElement::draggable">
      <webidl>           attribute boolean draggable;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute name="contentEditable" id="::HTMLElement::contentEditable">
      <webidl>           attribute DOMString contentEditable;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute readonly="readonly" name="isContentEditable" id="::HTMLElement::isContentEditable">
      <webidl>  readonly attribute boolean isContentEditable;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute name="contextMenu" id="::HTMLElement::contextMenu">
      <webidl>           attribute <ref>HTMLMenuElement</ref> contextMenu;</webidl>
      <Type name="HTMLMenuElement"/>
    </Attribute>
    <Attribute name="spellcheck" id="::HTMLElement::spellcheck">
      <webidl>           attribute DOMString spellcheck;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute readonly="readonly" name="commandType" id="::HTMLElement::commandType">
      <webidl>  readonly attribute DOMString commandType;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute readonly="readonly" name="label" id="::HTMLElement::label">
      <webidl>  readonly attribute DOMString label;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute readonly="readonly" name="icon" id="::HTMLElement::icon">
      <webidl>  readonly attribute DOMString icon;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute readonly="readonly" name="disabled" id="::HTMLElement::disabled">
      <webidl>  readonly attribute boolean disabled;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute readonly="readonly" name="checked" id="::HTMLElement::checked">
      <webidl>  readonly attribute boolean checked;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute readonly="readonly" name="style" id="::HTMLElement::style">
      <webidl>  readonly attribute <ref>CSSStyleDeclaration</ref> style;</webidl>
      <Type name="CSSStyleDeclaration"/>
    </Attribute>
    <Attribute name="onabort" id="::HTMLElement::onabort">
      <webidl>           attribute <ref>Function</ref> onabort;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onblur" id="::HTMLElement::onblur">
      <webidl>           attribute <ref>Function</ref> onblur;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="oncanplay" id="::HTMLElement::oncanplay">
      <webidl>           attribute <ref>Function</ref> oncanplay;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="oncanplaythrough" id="::HTMLElement::oncanplaythrough">
      <webidl>           attribute <ref>Function</ref> oncanplaythrough;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onchange" id="::HTMLElement::onchange">
      <webidl>           attribute <ref>Function</ref> onchange;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onclick" id="::HTMLElement::onclick">
      <webidl>           attribute <ref>Function</ref> onclick;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="oncontextmenu" id="::HTMLElement::oncontextmenu">
      <webidl>           attribute <ref>Function</ref> oncontextmenu;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="ondblclick" id="::HTMLElement::ondblclick">
      <webidl>           attribute <ref>Function</ref> ondblclick;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="ondrag" id="::HTMLElement::ondrag">
      <webidl>           attribute <ref>Function</ref> ondrag;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="ondragend" id="::HTMLElement::ondragend">
      <webidl>           attribute <ref>Function</ref> ondragend;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="ondragenter" id="::HTMLElement::ondragenter">
      <webidl>           attribute <ref>Function</ref> ondragenter;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="ondragleave" id="::HTMLElement::ondragleave">
      <webidl>           attribute <ref>Function</ref> ondragleave;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="ondragover" id="::HTMLElement::ondragover">
      <webidl>           attribute <ref>Function</ref> ondragover;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="ondragstart" id="::HTMLElement::ondragstart">
      <webidl>           attribute <ref>Function</ref> ondragstart;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="ondrop" id="::HTMLElement::ondrop">
      <webidl>           attribute <ref>Function</ref> ondrop;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="ondurationchange" id="::HTMLElement::ondurationchange">
      <webidl>           attribute <ref>Function</ref> ondurationchange;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onemptied" id="::HTMLElement::onemptied">
      <webidl>           attribute <ref>Function</ref> onemptied;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onended" id="::HTMLElement::onended">
      <webidl>           attribute <ref>Function</ref> onended;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onerror" id="::HTMLElement::onerror">
      <webidl>           attribute <ref>Function</ref> onerror;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onfocus" id="::HTMLElement::onfocus">
      <webidl>           attribute <ref>Function</ref> onfocus;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onformchange" id="::HTMLElement::onformchange">
      <webidl>           attribute <ref>Function</ref> onformchange;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onforminput" id="::HTMLElement::onforminput">
      <webidl>           attribute <ref>Function</ref> onforminput;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="oninput" id="::HTMLElement::oninput">
      <webidl>           attribute <ref>Function</ref> oninput;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="oninvalid" id="::HTMLElement::oninvalid">
      <webidl>           attribute <ref>Function</ref> oninvalid;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onkeydown" id="::HTMLElement::onkeydown">
      <webidl>           attribute <ref>Function</ref> onkeydown;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onkeypress" id="::HTMLElement::onkeypress">
      <webidl>           attribute <ref>Function</ref> onkeypress;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onkeyup" id="::HTMLElement::onkeyup">
      <webidl>           attribute <ref>Function</ref> onkeyup;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onload" id="::HTMLElement::onload">
      <webidl>           attribute <ref>Function</ref> onload;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onloadeddata" id="::HTMLElement::onloadeddata">
      <webidl>           attribute <ref>Function</ref> onloadeddata;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onloadedmetadata" id="::HTMLElement::onloadedmetadata">
      <webidl>           attribute <ref>Function</ref> onloadedmetadata;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onloadstart" id="::HTMLElement::onloadstart">
      <webidl>           attribute <ref>Function</ref> onloadstart;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onmousedown" id="::HTMLElement::onmousedown">
      <webidl>           attribute <ref>Function</ref> onmousedown;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onmousemove" id="::HTMLElement::onmousemove">
      <webidl>           attribute <ref>Function</ref> onmousemove;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onmouseout" id="::HTMLElement::onmouseout">
      <webidl>           attribute <ref>Function</ref> onmouseout;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onmouseover" id="::HTMLElement::onmouseover">
      <webidl>           attribute <ref>Function</ref> onmouseover;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onmouseup" id="::HTMLElement::onmouseup">
      <webidl>           attribute <ref>Function</ref> onmouseup;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onmousewheel" id="::HTMLElement::onmousewheel">
      <webidl>           attribute <ref>Function</ref> onmousewheel;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onpause" id="::HTMLElement::onpause">
      <webidl>           attribute <ref>Function</ref> onpause;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onplay" id="::HTMLElement::onplay">
      <webidl>           attribute <ref>Function</ref> onplay;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onplaying" id="::HTMLElement::onplaying">
      <webidl>           attribute <ref>Function</ref> onplaying;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onprogress" id="::HTMLElement::onprogress">
      <webidl>           attribute <ref>Function</ref> onprogress;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onratechange" id="::HTMLElement::onratechange">
      <webidl>           attribute <ref>Function</ref> onratechange;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onreadystatechange" id="::HTMLElement::onreadystatechange">
      <webidl>           attribute <ref>Function</ref> onreadystatechange;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onscroll" id="::HTMLElement::onscroll">
      <webidl>           attribute <ref>Function</ref> onscroll;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onseeked" id="::HTMLElement::onseeked">
      <webidl>           attribute <ref>Function</ref> onseeked;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onseeking" id="::HTMLElement::onseeking">
      <webidl>           attribute <ref>Function</ref> onseeking;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onselect" id="::HTMLElement::onselect">
      <webidl>           attribute <ref>Function</ref> onselect;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onshow" id="::HTMLElement::onshow">
      <webidl>           attribute <ref>Function</ref> onshow;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onstalled" id="::HTMLElement::onstalled">
      <webidl>           attribute <ref>Function</ref> onstalled;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onsubmit" id="::HTMLElement::onsubmit">
      <webidl>           attribute <ref>Function</ref> onsubmit;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onsuspend" id="::HTMLElement::onsuspend">
      <webidl>           attribute <ref>Function</ref> onsuspend;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="ontimeupdate" id="::HTMLElement::ontimeupdate">
      <webidl>           attribute <ref>Function</ref> ontimeupdate;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onvolumechange" id="::HTMLElement::onvolumechange">
      <webidl>           attribute <ref>Function</ref> onvolumechange;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onwaiting" id="::HTMLElement::onwaiting">
      <webidl>           attribute <ref>Function</ref> onwaiting;</webidl>
      <Type name="Function"/>
    </Attribute>
  </Interface>
  <Interface name="HTMLUnknownElement" id="::HTMLUnknownElement">
    <webidl>interface HTMLUnknownElement : <ref>HTMLElement</ref> { };</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLHtmlElement" id="::HTMLHtmlElement">
    <webidl>interface HTMLHtmlElement : <ref>HTMLElement</ref> {};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLHeadElement" id="::HTMLHeadElement">
    <webidl>interface HTMLHeadElement : <ref>HTMLElement</ref> {};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLTitleElement" id="::HTMLTitleElement">
    <webidl>interface HTMLTitleElement : <ref>HTMLElement</ref> {
           attribute DOMString text;
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute name="text" id="::HTMLTitleElement::text">
      <webidl>           attribute DOMString text;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLBaseElement" id="::HTMLBaseElement">
    <webidl>interface HTMLBaseElement : <ref>HTMLElement</ref> {
           attribute DOMString href;
           attribute DOMString target;
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute name="href" id="::HTMLBaseElement::href">
      <webidl>           attribute DOMString href;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="target" id="::HTMLBaseElement::target">
      <webidl>           attribute DOMString target;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLLinkElement" id="::HTMLLinkElement">
    <webidl>interface HTMLLinkElement : <ref>HTMLElement</ref> {
           attribute boolean disabled;
           attribute DOMString href;
           attribute DOMString rel;
  readonly attribute <ref>DOMTokenList</ref> relList;
           attribute DOMString media;
           attribute DOMString hreflang;
           attribute DOMString type;
  [PutForwards=value] readonly attribute <ref>DOMSettableTokenList</ref> sizes;
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute name="disabled" id="::HTMLLinkElement::disabled">
      <webidl>           attribute boolean disabled;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute name="href" id="::HTMLLinkElement::href">
      <webidl>           attribute DOMString href;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="rel" id="::HTMLLinkElement::rel">
      <webidl>           attribute DOMString rel;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute readonly="readonly" name="relList" id="::HTMLLinkElement::relList">
      <webidl>  readonly attribute <ref>DOMTokenList</ref> relList;</webidl>
      <Type name="DOMTokenList"/>
    </Attribute>
    <Attribute name="media" id="::HTMLLinkElement::media">
      <webidl>           attribute DOMString media;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="hreflang" id="::HTMLLinkElement::hreflang">
      <webidl>           attribute DOMString hreflang;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="type" id="::HTMLLinkElement::type">
      <webidl>           attribute DOMString type;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute readonly="readonly" name="sizes" id="::HTMLLinkElement::sizes">
      <webidl> readonly attribute <ref>DOMSettableTokenList</ref> sizes;</webidl>
      <Type name="DOMSettableTokenList"/>
    </Attribute>
  </Interface>
  <Implements name1="HTMLLinkElement" name2="LinkStyle">
    <webidl><ref>HTMLLinkElement</ref> implements <ref>LinkStyle</ref>;</webidl>
  </Implements>
</Definitions>


<Definitions>
  <Interface name="HTMLMetaElement" id="::HTMLMetaElement">
    <webidl>interface HTMLMetaElement : <ref>HTMLElement</ref> {
           attribute DOMString name;
           attribute DOMString httpEquiv;
           attribute DOMString content;
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute name="name" id="::HTMLMetaElement::name">
      <webidl>           attribute DOMString name;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="httpEquiv" id="::HTMLMetaElement::httpEquiv">
      <webidl>           attribute DOMString httpEquiv;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="content" id="::HTMLMetaElement::content">
      <webidl>           attribute DOMString content;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLStyleElement" id="::HTMLStyleElement">
    <webidl>interface HTMLStyleElement : <ref>HTMLElement</ref> {
           attribute boolean disabled;
           attribute DOMString media;
           attribute DOMString type;
           attribute boolean scoped;
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute name="disabled" id="::HTMLStyleElement::disabled">
      <webidl>           attribute boolean disabled;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute name="media" id="::HTMLStyleElement::media">
      <webidl>           attribute DOMString media;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="type" id="::HTMLStyleElement::type">
      <webidl>           attribute DOMString type;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="scoped" id="::HTMLStyleElement::scoped">
      <webidl>           attribute boolean scoped;</webidl>
      <Type type="boolean"/>
    </Attribute>
  </Interface>
  <Implements name1="HTMLStyleElement" name2="LinkStyle">
    <webidl><ref>HTMLStyleElement</ref> implements <ref>LinkStyle</ref>;</webidl>
  </Implements>
</Definitions>


<Definitions>
  <Interface name="HTMLScriptElement" id="::HTMLScriptElement">
    <webidl>interface HTMLScriptElement : <ref>HTMLElement</ref> {
           attribute DOMString src;
           attribute boolean async;
           attribute boolean defer;
           attribute DOMString type;
           attribute DOMString charset;
           attribute DOMString text;
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute name="src" id="::HTMLScriptElement::src">
      <webidl>           attribute DOMString src;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="async" id="::HTMLScriptElement::async">
      <webidl>           attribute boolean async;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute name="defer" id="::HTMLScriptElement::defer">
      <webidl>           attribute boolean defer;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute name="type" id="::HTMLScriptElement::type">
      <webidl>           attribute DOMString type;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="charset" id="::HTMLScriptElement::charset">
      <webidl>           attribute DOMString charset;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="text" id="::HTMLScriptElement::text">
      <webidl>           attribute DOMString text;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLBodyElement" id="::HTMLBodyElement">
    <webidl>interface HTMLBodyElement : <ref>HTMLElement</ref> {
           attribute <ref>Function</ref> onafterprint;
           attribute <ref>Function</ref> onbeforeprint;
           attribute <ref>Function</ref> onbeforeunload;
           attribute <ref>Function</ref> onblur;
           attribute <ref>Function</ref> onerror;
           attribute <ref>Function</ref> onfocus;
           attribute <ref>Function</ref> onhashchange;
           attribute <ref>Function</ref> onload;
           attribute <ref>Function</ref> onmessage;
           attribute <ref>Function</ref> onoffline;
           attribute <ref>Function</ref> ononline;
           attribute <ref>Function</ref> onpopstate;
           attribute <ref>Function</ref> onpagehide;
           attribute <ref>Function</ref> onpageshow;
           attribute <ref>Function</ref> onredo;
           attribute <ref>Function</ref> onresize;
           attribute <ref>Function</ref> onstorage;
           attribute <ref>Function</ref> onundo;
           attribute <ref>Function</ref> onunload;
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute name="onafterprint" id="::HTMLBodyElement::onafterprint">
      <webidl>           attribute <ref>Function</ref> onafterprint;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onbeforeprint" id="::HTMLBodyElement::onbeforeprint">
      <webidl>           attribute <ref>Function</ref> onbeforeprint;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onbeforeunload" id="::HTMLBodyElement::onbeforeunload">
      <webidl>           attribute <ref>Function</ref> onbeforeunload;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onblur" id="::HTMLBodyElement::onblur">
      <webidl>           attribute <ref>Function</ref> onblur;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onerror" id="::HTMLBodyElement::onerror">
      <webidl>           attribute <ref>Function</ref> onerror;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onfocus" id="::HTMLBodyElement::onfocus">
      <webidl>           attribute <ref>Function</ref> onfocus;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onhashchange" id="::HTMLBodyElement::onhashchange">
      <webidl>           attribute <ref>Function</ref> onhashchange;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onload" id="::HTMLBodyElement::onload">
      <webidl>           attribute <ref>Function</ref> onload;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onmessage" id="::HTMLBodyElement::onmessage">
      <webidl>           attribute <ref>Function</ref> onmessage;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onoffline" id="::HTMLBodyElement::onoffline">
      <webidl>           attribute <ref>Function</ref> onoffline;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="ononline" id="::HTMLBodyElement::ononline">
      <webidl>           attribute <ref>Function</ref> ononline;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onpopstate" id="::HTMLBodyElement::onpopstate">
      <webidl>           attribute <ref>Function</ref> onpopstate;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onpagehide" id="::HTMLBodyElement::onpagehide">
      <webidl>           attribute <ref>Function</ref> onpagehide;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onpageshow" id="::HTMLBodyElement::onpageshow">
      <webidl>           attribute <ref>Function</ref> onpageshow;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onredo" id="::HTMLBodyElement::onredo">
      <webidl>           attribute <ref>Function</ref> onredo;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onresize" id="::HTMLBodyElement::onresize">
      <webidl>           attribute <ref>Function</ref> onresize;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onstorage" id="::HTMLBodyElement::onstorage">
      <webidl>           attribute <ref>Function</ref> onstorage;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onundo" id="::HTMLBodyElement::onundo">
      <webidl>           attribute <ref>Function</ref> onundo;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onunload" id="::HTMLBodyElement::onunload">
      <webidl>           attribute <ref>Function</ref> onunload;</webidl>
      <Type name="Function"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLHeadingElement" id="::HTMLHeadingElement">
    <webidl>interface HTMLHeadingElement : <ref>HTMLElement</ref> {};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLParagraphElement" id="::HTMLParagraphElement">
    <webidl>interface HTMLParagraphElement : <ref>HTMLElement</ref> {};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLHRElement" id="::HTMLHRElement">
    <webidl>interface HTMLHRElement : <ref>HTMLElement</ref> {};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLBRElement" id="::HTMLBRElement">
    <webidl>interface HTMLBRElement : <ref>HTMLElement</ref> {};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLPreElement" id="::HTMLPreElement">
    <webidl>interface HTMLPreElement : <ref>HTMLElement</ref> {};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLQuoteElement" id="::HTMLQuoteElement">
    <webidl>interface HTMLQuoteElement : <ref>HTMLElement</ref> {
           attribute DOMString cite;
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute name="cite" id="::HTMLQuoteElement::cite">
      <webidl>           attribute DOMString cite;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLOListElement" id="::HTMLOListElement">
    <webidl>interface HTMLOListElement : <ref>HTMLElement</ref> {
           attribute boolean reversed;
           attribute long start;
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute name="reversed" id="::HTMLOListElement::reversed">
      <webidl>           attribute boolean reversed;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute name="start" id="::HTMLOListElement::start">
      <webidl>           attribute long start;</webidl>
      <Type type="long"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLUListElement" id="::HTMLUListElement">
    <webidl>interface HTMLUListElement : <ref>HTMLElement</ref> {};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLLIElement" id="::HTMLLIElement">
    <webidl>interface HTMLLIElement : <ref>HTMLElement</ref> {
           attribute long value;
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute name="value" id="::HTMLLIElement::value">
      <webidl>           attribute long value;</webidl>
      <Type type="long"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLDListElement" id="::HTMLDListElement">
    <webidl>interface HTMLDListElement : <ref>HTMLElement</ref> {};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLDivElement" id="::HTMLDivElement">
    <webidl>interface HTMLDivElement : <ref>HTMLElement</ref> {};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLAnchorElement" id="::HTMLAnchorElement">
    <webidl>interface HTMLAnchorElement : <ref>HTMLElement</ref> {
  stringifier attribute DOMString href;
           attribute DOMString target;
           attribute DOMString ping;
           attribute DOMString rel;
  readonly attribute <ref>DOMTokenList</ref> relList;
           attribute DOMString media;
           attribute DOMString hreflang;
           attribute DOMString type;

           attribute DOMString protocol;
           attribute DOMString host;
           attribute DOMString hostname;
           attribute DOMString port;
           attribute DOMString pathname;
           attribute DOMString search;
           attribute DOMString hash;
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute stringifier="stringifier" name="href" id="::HTMLAnchorElement::href">
      <webidl>  stringifier attribute DOMString href;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="target" id="::HTMLAnchorElement::target">
      <webidl>           attribute DOMString target;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="ping" id="::HTMLAnchorElement::ping">
      <webidl>           attribute DOMString ping;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="rel" id="::HTMLAnchorElement::rel">
      <webidl>           attribute DOMString rel;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute readonly="readonly" name="relList" id="::HTMLAnchorElement::relList">
      <webidl>  readonly attribute <ref>DOMTokenList</ref> relList;</webidl>
      <Type name="DOMTokenList"/>
    </Attribute>
    <Attribute name="media" id="::HTMLAnchorElement::media">
      <webidl>           attribute DOMString media;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="hreflang" id="::HTMLAnchorElement::hreflang">
      <webidl>           attribute DOMString hreflang;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="type" id="::HTMLAnchorElement::type">
      <webidl>           attribute DOMString type;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="protocol" id="::HTMLAnchorElement::protocol">
      <webidl>           attribute DOMString protocol;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="host" id="::HTMLAnchorElement::host">
      <webidl>           attribute DOMString host;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="hostname" id="::HTMLAnchorElement::hostname">
      <webidl>           attribute DOMString hostname;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="port" id="::HTMLAnchorElement::port">
      <webidl>           attribute DOMString port;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="pathname" id="::HTMLAnchorElement::pathname">
      <webidl>           attribute DOMString pathname;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="search" id="::HTMLAnchorElement::search">
      <webidl>           attribute DOMString search;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="hash" id="::HTMLAnchorElement::hash">
      <webidl>           attribute DOMString hash;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLTimeElement" id="::HTMLTimeElement">
    <webidl>interface HTMLTimeElement : <ref>HTMLElement</ref> {
           attribute DOMString dateTime;
           attribute boolean pubDate;
  readonly attribute <ref>Date</ref> valueAsDate;
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute name="dateTime" id="::HTMLTimeElement::dateTime">
      <webidl>           attribute DOMString dateTime;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="pubDate" id="::HTMLTimeElement::pubDate">
      <webidl>           attribute boolean pubDate;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute readonly="readonly" name="valueAsDate" id="::HTMLTimeElement::valueAsDate">
      <webidl>  readonly attribute <ref>Date</ref> valueAsDate;</webidl>
      <Type name="Date"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLSpanElement" id="::HTMLSpanElement">
    <webidl>interface HTMLSpanElement : <ref>HTMLElement</ref> {};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLModElement" id="::HTMLModElement">
    <webidl>interface HTMLModElement : <ref>HTMLElement</ref> {
           attribute DOMString cite;
           attribute DOMString dateTime;
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute name="cite" id="::HTMLModElement::cite">
      <webidl>           attribute DOMString cite;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="dateTime" id="::HTMLModElement::dateTime">
      <webidl>           attribute DOMString dateTime;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLImageElement" id="::HTMLImageElement">
    <webidl>[NamedConstructor=Image(),
 NamedConstructor=Image(in unsigned long width),
 NamedConstructor=Image(in unsigned long width, in unsigned long height)]
interface HTMLImageElement : <ref>HTMLElement</ref> {
           attribute DOMString alt;
           attribute DOMString src;
           attribute DOMString useMap;
           attribute boolean isMap;
           attribute unsigned long width;
           attribute unsigned long height;
  readonly attribute unsigned long naturalWidth;
  readonly attribute unsigned long naturalHeight;
  readonly attribute boolean complete;
};</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="NamedConstructor" value="Image">
        <ArgumentList/>
      </ExtendedAttribute>
      <ExtendedAttribute name="NamedConstructor" value="Image">
        <ArgumentList>
          <Argument in="in" name="width">
            <Type type="unsigned long"/>
          </Argument>
        </ArgumentList>
      </ExtendedAttribute>
      <ExtendedAttribute name="NamedConstructor" value="Image">
        <ArgumentList>
          <Argument in="in" name="width">
            <Type type="unsigned long"/>
          </Argument>
          <Argument in="in" name="height">
            <Type type="unsigned long"/>
          </Argument>
        </ArgumentList>
      </ExtendedAttribute>
    </ExtendedAttributeList>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute name="alt" id="::HTMLImageElement::alt">
      <webidl>           attribute DOMString alt;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="src" id="::HTMLImageElement::src">
      <webidl>           attribute DOMString src;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="useMap" id="::HTMLImageElement::useMap">
      <webidl>           attribute DOMString useMap;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="isMap" id="::HTMLImageElement::isMap">
      <webidl>           attribute boolean isMap;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute name="width" id="::HTMLImageElement::width">
      <webidl>           attribute unsigned long width;</webidl>
      <Type type="unsigned long"/>
    </Attribute>
    <Attribute name="height" id="::HTMLImageElement::height">
      <webidl>           attribute unsigned long height;</webidl>
      <Type type="unsigned long"/>
    </Attribute>
    <Attribute readonly="readonly" name="naturalWidth" id="::HTMLImageElement::naturalWidth">
      <webidl>  readonly attribute unsigned long naturalWidth;</webidl>
      <Type type="unsigned long"/>
    </Attribute>
    <Attribute readonly="readonly" name="naturalHeight" id="::HTMLImageElement::naturalHeight">
      <webidl>  readonly attribute unsigned long naturalHeight;</webidl>
      <Type type="unsigned long"/>
    </Attribute>
    <Attribute readonly="readonly" name="complete" id="::HTMLImageElement::complete">
      <webidl>  readonly attribute boolean complete;</webidl>
      <Type type="boolean"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLIFrameElement" id="::HTMLIFrameElement">
    <webidl>interface HTMLIFrameElement : <ref>HTMLElement</ref> {
           attribute DOMString src;
           attribute DOMString name;
  [PutForwards=value] readonly attribute <ref>DOMSettableTokenList</ref> sandbox;
           attribute boolean seamless;
           attribute DOMString width;
           attribute DOMString height;
  readonly attribute <ref>Document</ref> contentDocument;
  readonly attribute <ref>WindowProxy</ref> contentWindow;
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute name="src" id="::HTMLIFrameElement::src">
      <webidl>           attribute DOMString src;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="name" id="::HTMLIFrameElement::name">
      <webidl>           attribute DOMString name;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute readonly="readonly" name="sandbox" id="::HTMLIFrameElement::sandbox">
      <webidl> readonly attribute <ref>DOMSettableTokenList</ref> sandbox;</webidl>
      <Type name="DOMSettableTokenList"/>
    </Attribute>
    <Attribute name="seamless" id="::HTMLIFrameElement::seamless">
      <webidl>           attribute boolean seamless;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute name="width" id="::HTMLIFrameElement::width">
      <webidl>           attribute DOMString width;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="height" id="::HTMLIFrameElement::height">
      <webidl>           attribute DOMString height;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute readonly="readonly" name="contentDocument" id="::HTMLIFrameElement::contentDocument">
      <webidl>  readonly attribute <ref>Document</ref> contentDocument;</webidl>
      <Type name="Document"/>
    </Attribute>
    <Attribute readonly="readonly" name="contentWindow" id="::HTMLIFrameElement::contentWindow">
      <webidl>  readonly attribute <ref>WindowProxy</ref> contentWindow;</webidl>
      <Type name="WindowProxy"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLEmbedElement" id="::HTMLEmbedElement">
    <webidl>interface HTMLEmbedElement : <ref>HTMLElement</ref> {
           attribute DOMString src;
           attribute DOMString type;
           attribute DOMString width;
           attribute DOMString height;
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute name="src" id="::HTMLEmbedElement::src">
      <webidl>           attribute DOMString src;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="type" id="::HTMLEmbedElement::type">
      <webidl>           attribute DOMString type;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="width" id="::HTMLEmbedElement::width">
      <webidl>           attribute DOMString width;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="height" id="::HTMLEmbedElement::height">
      <webidl>           attribute DOMString height;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLObjectElement" id="::HTMLObjectElement">
    <webidl>interface HTMLObjectElement : <ref>HTMLElement</ref> {
           attribute DOMString data;
           attribute DOMString type;
           attribute DOMString name;
           attribute DOMString useMap;
  readonly attribute <ref>HTMLFormElement</ref> form;
           attribute DOMString width;
           attribute DOMString height;
  readonly attribute <ref>Document</ref> contentDocument;
  readonly attribute <ref>WindowProxy</ref> contentWindow;

  readonly attribute boolean willValidate;
  readonly attribute <ref>ValidityState</ref> validity;
  readonly attribute DOMString validationMessage;
  boolean checkValidity();
  void setCustomValidity(in DOMString error);
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute name="data" id="::HTMLObjectElement::data">
      <webidl>           attribute DOMString data;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="type" id="::HTMLObjectElement::type">
      <webidl>           attribute DOMString type;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="name" id="::HTMLObjectElement::name">
      <webidl>           attribute DOMString name;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="useMap" id="::HTMLObjectElement::useMap">
      <webidl>           attribute DOMString useMap;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute readonly="readonly" name="form" id="::HTMLObjectElement::form">
      <webidl>  readonly attribute <ref>HTMLFormElement</ref> form;</webidl>
      <Type name="HTMLFormElement"/>
    </Attribute>
    <Attribute name="width" id="::HTMLObjectElement::width">
      <webidl>           attribute DOMString width;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="height" id="::HTMLObjectElement::height">
      <webidl>           attribute DOMString height;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute readonly="readonly" name="contentDocument" id="::HTMLObjectElement::contentDocument">
      <webidl>  readonly attribute <ref>Document</ref> contentDocument;</webidl>
      <Type name="Document"/>
    </Attribute>
    <Attribute readonly="readonly" name="contentWindow" id="::HTMLObjectElement::contentWindow">
      <webidl>  readonly attribute <ref>WindowProxy</ref> contentWindow;</webidl>
      <Type name="WindowProxy"/>
    </Attribute>
    <Attribute readonly="readonly" name="willValidate" id="::HTMLObjectElement::willValidate">
      <webidl>  readonly attribute boolean willValidate;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute readonly="readonly" name="validity" id="::HTMLObjectElement::validity">
      <webidl>  readonly attribute <ref>ValidityState</ref> validity;</webidl>
      <Type name="ValidityState"/>
    </Attribute>
    <Attribute readonly="readonly" name="validationMessage" id="::HTMLObjectElement::validationMessage">
      <webidl>  readonly attribute DOMString validationMessage;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Operation name="checkValidity" id="::HTMLObjectElement::checkValidity">
      <webidl>  boolean checkValidity();</webidl>
      <Type type="boolean"/>
      <ArgumentList/>
    </Operation>
    <Operation name="setCustomValidity" id="::HTMLObjectElement::setCustomValidity">
      <webidl>  void setCustomValidity(in DOMString error);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" name="error">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLParamElement" id="::HTMLParamElement">
    <webidl>interface HTMLParamElement : <ref>HTMLElement</ref> {
           attribute DOMString name;
           attribute DOMString value;
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute name="name" id="::HTMLParamElement::name">
      <webidl>           attribute DOMString name;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="value" id="::HTMLParamElement::value">
      <webidl>           attribute DOMString value;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLVideoElement" id="::HTMLVideoElement">
    <webidl>interface HTMLVideoElement : <ref>HTMLMediaElement</ref> {
           attribute DOMString width;
           attribute DOMString height;
  readonly attribute unsigned long videoWidth;
  readonly attribute unsigned long videoHeight;
           attribute DOMString poster;
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLMediaElement"/>
    </InterfaceInheritance>
    <Attribute name="width" id="::HTMLVideoElement::width">
      <webidl>           attribute DOMString width;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="height" id="::HTMLVideoElement::height">
      <webidl>           attribute DOMString height;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute readonly="readonly" name="videoWidth" id="::HTMLVideoElement::videoWidth">
      <webidl>  readonly attribute unsigned long videoWidth;</webidl>
      <Type type="unsigned long"/>
    </Attribute>
    <Attribute readonly="readonly" name="videoHeight" id="::HTMLVideoElement::videoHeight">
      <webidl>  readonly attribute unsigned long videoHeight;</webidl>
      <Type type="unsigned long"/>
    </Attribute>
    <Attribute name="poster" id="::HTMLVideoElement::poster">
      <webidl>           attribute DOMString poster;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLAudioElement" id="::HTMLAudioElement">
    <webidl>[NamedConstructor=Audio(),
 NamedConstructor=Audio(in DOMString src)]
interface HTMLAudioElement : <ref>HTMLMediaElement</ref> {};</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="NamedConstructor" value="Audio">
        <ArgumentList/>
      </ExtendedAttribute>
      <ExtendedAttribute name="NamedConstructor" value="Audio">
        <ArgumentList>
          <Argument in="in" name="src">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </ExtendedAttribute>
    </ExtendedAttributeList>
    <InterfaceInheritance>
      <Name name="HTMLMediaElement"/>
    </InterfaceInheritance>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLSourceElement" id="::HTMLSourceElement">
    <webidl>interface HTMLSourceElement : <ref>HTMLElement</ref> {
           attribute DOMString src;
           attribute DOMString type;
           attribute DOMString media;
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute name="src" id="::HTMLSourceElement::src">
      <webidl>           attribute DOMString src;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="type" id="::HTMLSourceElement::type">
      <webidl>           attribute DOMString type;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="media" id="::HTMLSourceElement::media">
      <webidl>           attribute DOMString media;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLMediaElement" id="::HTMLMediaElement">
    <webidl>interface HTMLMediaElement : <ref>HTMLElement</ref> {

  readonly attribute <ref>MediaError</ref> error;

           attribute DOMString src;
  readonly attribute DOMString currentSrc;
  const unsigned short NETWORK_EMPTY = 0;
  const unsigned short NETWORK_IDLE = 1;
  const unsigned short NETWORK_LOADING = 2;
  const unsigned short NETWORK_NO_SOURCE = 3;
  readonly attribute unsigned short networkState;
           attribute boolean autobuffer;
  readonly attribute <ref>TimeRanges</ref> buffered;
  void load();
  DOMString canPlayType(in DOMString type);

  const unsigned short HAVE_NOTHING = 0;
  const unsigned short HAVE_METADATA = 1;
  const unsigned short HAVE_CURRENT_DATA = 2;
  const unsigned short HAVE_FUTURE_DATA = 3;
  const unsigned short HAVE_ENOUGH_DATA = 4;
  readonly attribute unsigned short readyState;
  readonly attribute boolean seeking;

           attribute float currentTime;
  readonly attribute float startTime;
  readonly attribute float duration;
  readonly attribute boolean paused;
           attribute float defaultPlaybackRate;
           attribute float playbackRate;
  readonly attribute <ref>TimeRanges</ref> played;
  readonly attribute <ref>TimeRanges</ref> seekable;
  readonly attribute boolean ended;
           attribute boolean autoplay;
           attribute boolean loop;
  void play();
  void pause();

           attribute boolean controls;
           attribute float volume;
           attribute boolean muted;
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute readonly="readonly" name="error" id="::HTMLMediaElement::error">
      <webidl>  readonly attribute <ref>MediaError</ref> error;</webidl>
      <Type name="MediaError"/>
    </Attribute>
    <Attribute name="src" id="::HTMLMediaElement::src">
      <webidl>           attribute DOMString src;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute readonly="readonly" name="currentSrc" id="::HTMLMediaElement::currentSrc">
      <webidl>  readonly attribute DOMString currentSrc;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Const name="NETWORK_EMPTY" value="0" id="::HTMLMediaElement::NETWORK_EMPTY">
      <webidl>  const unsigned short NETWORK_EMPTY = 0;</webidl>
      <Type type="unsigned short"/>
    </Const>
    <Const name="NETWORK_IDLE" value="1" id="::HTMLMediaElement::NETWORK_IDLE">
      <webidl>  const unsigned short NETWORK_IDLE = 1;</webidl>
      <Type type="unsigned short"/>
    </Const>
    <Const name="NETWORK_LOADING" value="2" id="::HTMLMediaElement::NETWORK_LOADING">
      <webidl>  const unsigned short NETWORK_LOADING = 2;</webidl>
      <Type type="unsigned short"/>
    </Const>
    <Const name="NETWORK_NO_SOURCE" value="3" id="::HTMLMediaElement::NETWORK_NO_SOURCE">
      <webidl>  const unsigned short NETWORK_NO_SOURCE = 3;</webidl>
      <Type type="unsigned short"/>
    </Const>
    <Attribute readonly="readonly" name="networkState" id="::HTMLMediaElement::networkState">
      <webidl>  readonly attribute unsigned short networkState;</webidl>
      <Type type="unsigned short"/>
    </Attribute>
    <Attribute name="autobuffer" id="::HTMLMediaElement::autobuffer">
      <webidl>           attribute boolean autobuffer;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute readonly="readonly" name="buffered" id="::HTMLMediaElement::buffered">
      <webidl>  readonly attribute <ref>TimeRanges</ref> buffered;</webidl>
      <Type name="TimeRanges"/>
    </Attribute>
    <Operation name="load" id="::HTMLMediaElement::load">
      <webidl>  void load();</webidl>
      <Type type="void"/>
      <ArgumentList/>
    </Operation>
    <Operation name="canPlayType" id="::HTMLMediaElement::canPlayType">
      <webidl>  DOMString canPlayType(in DOMString type);</webidl>
      <Type type="DOMString"/>
      <ArgumentList>
        <Argument in="in" name="type">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Const name="HAVE_NOTHING" value="0" id="::HTMLMediaElement::HAVE_NOTHING">
      <webidl>  const unsigned short HAVE_NOTHING = 0;</webidl>
      <Type type="unsigned short"/>
    </Const>
    <Const name="HAVE_METADATA" value="1" id="::HTMLMediaElement::HAVE_METADATA">
      <webidl>  const unsigned short HAVE_METADATA = 1;</webidl>
      <Type type="unsigned short"/>
    </Const>
    <Const name="HAVE_CURRENT_DATA" value="2" id="::HTMLMediaElement::HAVE_CURRENT_DATA">
      <webidl>  const unsigned short HAVE_CURRENT_DATA = 2;</webidl>
      <Type type="unsigned short"/>
    </Const>
    <Const name="HAVE_FUTURE_DATA" value="3" id="::HTMLMediaElement::HAVE_FUTURE_DATA">
      <webidl>  const unsigned short HAVE_FUTURE_DATA = 3;</webidl>
      <Type type="unsigned short"/>
    </Const>
    <Const name="HAVE_ENOUGH_DATA" value="4" id="::HTMLMediaElement::HAVE_ENOUGH_DATA">
      <webidl>  const unsigned short HAVE_ENOUGH_DATA = 4;</webidl>
      <Type type="unsigned short"/>
    </Const>
    <Attribute readonly="readonly" name="readyState" id="::HTMLMediaElement::readyState">
      <webidl>  readonly attribute unsigned short readyState;</webidl>
      <Type type="unsigned short"/>
    </Attribute>
    <Attribute readonly="readonly" name="seeking" id="::HTMLMediaElement::seeking">
      <webidl>  readonly attribute boolean seeking;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute name="currentTime" id="::HTMLMediaElement::currentTime">
      <webidl>           attribute float currentTime;</webidl>
      <Type type="float"/>
    </Attribute>
    <Attribute readonly="readonly" name="startTime" id="::HTMLMediaElement::startTime">
      <webidl>  readonly attribute float startTime;</webidl>
      <Type type="float"/>
    </Attribute>
    <Attribute readonly="readonly" name="duration" id="::HTMLMediaElement::duration">
      <webidl>  readonly attribute float duration;</webidl>
      <Type type="float"/>
    </Attribute>
    <Attribute readonly="readonly" name="paused" id="::HTMLMediaElement::paused">
      <webidl>  readonly attribute boolean paused;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute name="defaultPlaybackRate" id="::HTMLMediaElement::defaultPlaybackRate">
      <webidl>           attribute float defaultPlaybackRate;</webidl>
      <Type type="float"/>
    </Attribute>
    <Attribute name="playbackRate" id="::HTMLMediaElement::playbackRate">
      <webidl>           attribute float playbackRate;</webidl>
      <Type type="float"/>
    </Attribute>
    <Attribute readonly="readonly" name="played" id="::HTMLMediaElement::played">
      <webidl>  readonly attribute <ref>TimeRanges</ref> played;</webidl>
      <Type name="TimeRanges"/>
    </Attribute>
    <Attribute readonly="readonly" name="seekable" id="::HTMLMediaElement::seekable">
      <webidl>  readonly attribute <ref>TimeRanges</ref> seekable;</webidl>
      <Type name="TimeRanges"/>
    </Attribute>
    <Attribute readonly="readonly" name="ended" id="::HTMLMediaElement::ended">
      <webidl>  readonly attribute boolean ended;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute name="autoplay" id="::HTMLMediaElement::autoplay">
      <webidl>           attribute boolean autoplay;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute name="loop" id="::HTMLMediaElement::loop">
      <webidl>           attribute boolean loop;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Operation name="play" id="::HTMLMediaElement::play">
      <webidl>  void play();</webidl>
      <Type type="void"/>
      <ArgumentList/>
    </Operation>
    <Operation name="pause" id="::HTMLMediaElement::pause">
      <webidl>  void pause();</webidl>
      <Type type="void"/>
      <ArgumentList/>
    </Operation>
    <Attribute name="controls" id="::HTMLMediaElement::controls">
      <webidl>           attribute boolean controls;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute name="volume" id="::HTMLMediaElement::volume">
      <webidl>           attribute float volume;</webidl>
      <Type type="float"/>
    </Attribute>
    <Attribute name="muted" id="::HTMLMediaElement::muted">
      <webidl>           attribute boolean muted;</webidl>
      <Type type="boolean"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="MediaError" id="::MediaError">
    <webidl>interface MediaError {
  const unsigned short MEDIA_ERR_ABORTED = 1;
  const unsigned short MEDIA_ERR_NETWORK = 2;
  const unsigned short MEDIA_ERR_DECODE = 3;
  const unsigned short MEDIA_ERR_SRC_NOT_SUPPORTED = 4;
  readonly attribute unsigned short code;
};</webidl>
    <Const name="MEDIA_ERR_ABORTED" value="1" id="::MediaError::MEDIA_ERR_ABORTED">
      <webidl>  const unsigned short MEDIA_ERR_ABORTED = 1;</webidl>
      <Type type="unsigned short"/>
    </Const>
    <Const name="MEDIA_ERR_NETWORK" value="2" id="::MediaError::MEDIA_ERR_NETWORK">
      <webidl>  const unsigned short MEDIA_ERR_NETWORK = 2;</webidl>
      <Type type="unsigned short"/>
    </Const>
    <Const name="MEDIA_ERR_DECODE" value="3" id="::MediaError::MEDIA_ERR_DECODE">
      <webidl>  const unsigned short MEDIA_ERR_DECODE = 3;</webidl>
      <Type type="unsigned short"/>
    </Const>
    <Const name="MEDIA_ERR_SRC_NOT_SUPPORTED" value="4" id="::MediaError::MEDIA_ERR_SRC_NOT_SUPPORTED">
      <webidl>  const unsigned short MEDIA_ERR_SRC_NOT_SUPPORTED = 4;</webidl>
      <Type type="unsigned short"/>
    </Const>
    <Attribute readonly="readonly" name="code" id="::MediaError::code">
      <webidl>  readonly attribute unsigned short code;</webidl>
      <Type type="unsigned short"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="TimeRanges" id="::TimeRanges">
    <webidl>interface TimeRanges {
  readonly attribute unsigned long length;
  float start(in unsigned long index);
  float end(in unsigned long index);
};</webidl>
    <Attribute readonly="readonly" name="length" id="::TimeRanges::length">
      <webidl>  readonly attribute unsigned long length;</webidl>
      <Type type="unsigned long"/>
    </Attribute>
    <Operation name="start" id="::TimeRanges::start">
      <webidl>  float start(in unsigned long index);</webidl>
      <Type type="float"/>
      <ArgumentList>
        <Argument in="in" name="index">
          <Type type="unsigned long"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="end" id="::TimeRanges::end">
      <webidl>  float end(in unsigned long index);</webidl>
      <Type type="float"/>
      <ArgumentList>
        <Argument in="in" name="index">
          <Type type="unsigned long"/>
        </Argument>
      </ArgumentList>
    </Operation>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLCanvasElement" id="::HTMLCanvasElement">
    <webidl>interface HTMLCanvasElement : <ref>HTMLElement</ref> {
           attribute unsigned long width;
           attribute unsigned long height;

  DOMString toDataURL(in optional DOMString type, in any... args);

  object getContext(in DOMString contextId);
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute name="width" id="::HTMLCanvasElement::width">
      <webidl>           attribute unsigned long width;</webidl>
      <Type type="unsigned long"/>
    </Attribute>
    <Attribute name="height" id="::HTMLCanvasElement::height">
      <webidl>           attribute unsigned long height;</webidl>
      <Type type="unsigned long"/>
    </Attribute>
    <Operation name="toDataURL" id="::HTMLCanvasElement::toDataURL">
      <webidl>  DOMString toDataURL(in optional DOMString type, in any... args);</webidl>
      <Type type="DOMString"/>
      <ArgumentList>
        <Argument in="in" optional="optional" name="type">
          <Type type="DOMString"/>
        </Argument>
        <Argument in="in" ellipsis="ellipsis" name="args">
          <Type type="any"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="getContext" id="::HTMLCanvasElement::getContext">
      <webidl>  object getContext(in DOMString contextId);</webidl>
      <Type type="object"/>
      <ArgumentList>
        <Argument in="in" name="contextId">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLMapElement" id="::HTMLMapElement">
    <webidl>interface HTMLMapElement : <ref>HTMLElement</ref> {
           attribute DOMString name;
  readonly attribute <ref>HTMLCollection</ref> areas;
  readonly attribute <ref>HTMLCollection</ref> images;
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute name="name" id="::HTMLMapElement::name">
      <webidl>           attribute DOMString name;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute readonly="readonly" name="areas" id="::HTMLMapElement::areas">
      <webidl>  readonly attribute <ref>HTMLCollection</ref> areas;</webidl>
      <Type name="HTMLCollection"/>
    </Attribute>
    <Attribute readonly="readonly" name="images" id="::HTMLMapElement::images">
      <webidl>  readonly attribute <ref>HTMLCollection</ref> images;</webidl>
      <Type name="HTMLCollection"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLAreaElement" id="::HTMLAreaElement">
    <webidl>interface HTMLAreaElement : <ref>HTMLElement</ref> {
           attribute DOMString alt;
           attribute DOMString coords;
           attribute DOMString shape;
  stringifier attribute DOMString href;
           attribute DOMString target;
           attribute DOMString ping;
           attribute DOMString rel;
  readonly attribute <ref>DOMTokenList</ref> relList;
           attribute DOMString media;
           attribute DOMString hreflang;
           attribute DOMString type;

           attribute DOMString protocol;
           attribute DOMString host;
           attribute DOMString hostname;
           attribute DOMString port;
           attribute DOMString pathname;
           attribute DOMString search;
           attribute DOMString hash;
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute name="alt" id="::HTMLAreaElement::alt">
      <webidl>           attribute DOMString alt;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="coords" id="::HTMLAreaElement::coords">
      <webidl>           attribute DOMString coords;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="shape" id="::HTMLAreaElement::shape">
      <webidl>           attribute DOMString shape;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute stringifier="stringifier" name="href" id="::HTMLAreaElement::href">
      <webidl>  stringifier attribute DOMString href;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="target" id="::HTMLAreaElement::target">
      <webidl>           attribute DOMString target;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="ping" id="::HTMLAreaElement::ping">
      <webidl>           attribute DOMString ping;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="rel" id="::HTMLAreaElement::rel">
      <webidl>           attribute DOMString rel;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute readonly="readonly" name="relList" id="::HTMLAreaElement::relList">
      <webidl>  readonly attribute <ref>DOMTokenList</ref> relList;</webidl>
      <Type name="DOMTokenList"/>
    </Attribute>
    <Attribute name="media" id="::HTMLAreaElement::media">
      <webidl>           attribute DOMString media;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="hreflang" id="::HTMLAreaElement::hreflang">
      <webidl>           attribute DOMString hreflang;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="type" id="::HTMLAreaElement::type">
      <webidl>           attribute DOMString type;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="protocol" id="::HTMLAreaElement::protocol">
      <webidl>           attribute DOMString protocol;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="host" id="::HTMLAreaElement::host">
      <webidl>           attribute DOMString host;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="hostname" id="::HTMLAreaElement::hostname">
      <webidl>           attribute DOMString hostname;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="port" id="::HTMLAreaElement::port">
      <webidl>           attribute DOMString port;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="pathname" id="::HTMLAreaElement::pathname">
      <webidl>           attribute DOMString pathname;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="search" id="::HTMLAreaElement::search">
      <webidl>           attribute DOMString search;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="hash" id="::HTMLAreaElement::hash">
      <webidl>           attribute DOMString hash;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLTableElement" id="::HTMLTableElement">
    <webidl>interface HTMLTableElement : <ref>HTMLElement</ref> {
           attribute <ref>HTMLTableCaptionElement</ref> caption;
  <ref>HTMLElement</ref> createCaption();
  void deleteCaption();
           attribute <ref>HTMLTableSectionElement</ref> tHead;
  <ref>HTMLElement</ref> createTHead();
  void deleteTHead();
           attribute <ref>HTMLTableSectionElement</ref> tFoot;
  <ref>HTMLElement</ref> createTFoot();
  void deleteTFoot();
  readonly attribute <ref>HTMLCollection</ref> tBodies;
  <ref>HTMLElement</ref> createTBody();
  readonly attribute <ref>HTMLCollection</ref> rows;
  <ref>HTMLElement</ref> insertRow(in optional long index);
  void deleteRow(in long index);
           attribute DOMString summary;
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute name="caption" id="::HTMLTableElement::caption">
      <webidl>           attribute <ref>HTMLTableCaptionElement</ref> caption;</webidl>
      <Type name="HTMLTableCaptionElement"/>
    </Attribute>
    <Operation name="createCaption" id="::HTMLTableElement::createCaption">
      <webidl>  <ref>HTMLElement</ref> createCaption();</webidl>
      <Type name="HTMLElement"/>
      <ArgumentList/>
    </Operation>
    <Operation name="deleteCaption" id="::HTMLTableElement::deleteCaption">
      <webidl>  void deleteCaption();</webidl>
      <Type type="void"/>
      <ArgumentList/>
    </Operation>
    <Attribute name="tHead" id="::HTMLTableElement::tHead">
      <webidl>           attribute <ref>HTMLTableSectionElement</ref> tHead;</webidl>
      <Type name="HTMLTableSectionElement"/>
    </Attribute>
    <Operation name="createTHead" id="::HTMLTableElement::createTHead">
      <webidl>  <ref>HTMLElement</ref> createTHead();</webidl>
      <Type name="HTMLElement"/>
      <ArgumentList/>
    </Operation>
    <Operation name="deleteTHead" id="::HTMLTableElement::deleteTHead">
      <webidl>  void deleteTHead();</webidl>
      <Type type="void"/>
      <ArgumentList/>
    </Operation>
    <Attribute name="tFoot" id="::HTMLTableElement::tFoot">
      <webidl>           attribute <ref>HTMLTableSectionElement</ref> tFoot;</webidl>
      <Type name="HTMLTableSectionElement"/>
    </Attribute>
    <Operation name="createTFoot" id="::HTMLTableElement::createTFoot">
      <webidl>  <ref>HTMLElement</ref> createTFoot();</webidl>
      <Type name="HTMLElement"/>
      <ArgumentList/>
    </Operation>
    <Operation name="deleteTFoot" id="::HTMLTableElement::deleteTFoot">
      <webidl>  void deleteTFoot();</webidl>
      <Type type="void"/>
      <ArgumentList/>
    </Operation>
    <Attribute readonly="readonly" name="tBodies" id="::HTMLTableElement::tBodies">
      <webidl>  readonly attribute <ref>HTMLCollection</ref> tBodies;</webidl>
      <Type name="HTMLCollection"/>
    </Attribute>
    <Operation name="createTBody" id="::HTMLTableElement::createTBody">
      <webidl>  <ref>HTMLElement</ref> createTBody();</webidl>
      <Type name="HTMLElement"/>
      <ArgumentList/>
    </Operation>
    <Attribute readonly="readonly" name="rows" id="::HTMLTableElement::rows">
      <webidl>  readonly attribute <ref>HTMLCollection</ref> rows;</webidl>
      <Type name="HTMLCollection"/>
    </Attribute>
    <Operation name="insertRow" id="::HTMLTableElement::insertRow">
      <webidl>  <ref>HTMLElement</ref> insertRow(in optional long index);</webidl>
      <Type name="HTMLElement"/>
      <ArgumentList>
        <Argument in="in" optional="optional" name="index">
          <Type type="long"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="deleteRow" id="::HTMLTableElement::deleteRow">
      <webidl>  void deleteRow(in long index);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" name="index">
          <Type type="long"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Attribute name="summary" id="::HTMLTableElement::summary">
      <webidl>           attribute DOMString summary;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLTableCaptionElement" id="::HTMLTableCaptionElement">
    <webidl>interface HTMLTableCaptionElement : <ref>HTMLElement</ref> {};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLTableColElement" id="::HTMLTableColElement">
    <webidl>interface HTMLTableColElement : <ref>HTMLElement</ref> {
           attribute unsigned long span;
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute name="span" id="::HTMLTableColElement::span">
      <webidl>           attribute unsigned long span;</webidl>
      <Type type="unsigned long"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLTableSectionElement" id="::HTMLTableSectionElement">
    <webidl>interface HTMLTableSectionElement : <ref>HTMLElement</ref> {
  readonly attribute <ref>HTMLCollection</ref> rows;
  <ref>HTMLElement</ref> insertRow(in optional long index);
  void deleteRow(in long index);
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute readonly="readonly" name="rows" id="::HTMLTableSectionElement::rows">
      <webidl>  readonly attribute <ref>HTMLCollection</ref> rows;</webidl>
      <Type name="HTMLCollection"/>
    </Attribute>
    <Operation name="insertRow" id="::HTMLTableSectionElement::insertRow">
      <webidl>  <ref>HTMLElement</ref> insertRow(in optional long index);</webidl>
      <Type name="HTMLElement"/>
      <ArgumentList>
        <Argument in="in" optional="optional" name="index">
          <Type type="long"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="deleteRow" id="::HTMLTableSectionElement::deleteRow">
      <webidl>  void deleteRow(in long index);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" name="index">
          <Type type="long"/>
        </Argument>
      </ArgumentList>
    </Operation>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLTableRowElement" id="::HTMLTableRowElement">
    <webidl>interface HTMLTableRowElement : <ref>HTMLElement</ref> {
  readonly attribute long rowIndex;
  readonly attribute long sectionRowIndex;
  readonly attribute <ref>HTMLCollection</ref> cells;
  <ref>HTMLElement</ref> insertCell(in optional long index);
  void deleteCell(in long index);
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute readonly="readonly" name="rowIndex" id="::HTMLTableRowElement::rowIndex">
      <webidl>  readonly attribute long rowIndex;</webidl>
      <Type type="long"/>
    </Attribute>
    <Attribute readonly="readonly" name="sectionRowIndex" id="::HTMLTableRowElement::sectionRowIndex">
      <webidl>  readonly attribute long sectionRowIndex;</webidl>
      <Type type="long"/>
    </Attribute>
    <Attribute readonly="readonly" name="cells" id="::HTMLTableRowElement::cells">
      <webidl>  readonly attribute <ref>HTMLCollection</ref> cells;</webidl>
      <Type name="HTMLCollection"/>
    </Attribute>
    <Operation name="insertCell" id="::HTMLTableRowElement::insertCell">
      <webidl>  <ref>HTMLElement</ref> insertCell(in optional long index);</webidl>
      <Type name="HTMLElement"/>
      <ArgumentList>
        <Argument in="in" optional="optional" name="index">
          <Type type="long"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="deleteCell" id="::HTMLTableRowElement::deleteCell">
      <webidl>  void deleteCell(in long index);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" name="index">
          <Type type="long"/>
        </Argument>
      </ArgumentList>
    </Operation>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLTableDataCellElement" id="::HTMLTableDataCellElement">
    <webidl>interface HTMLTableDataCellElement : <ref>HTMLTableCellElement</ref> {};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLTableCellElement"/>
    </InterfaceInheritance>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLTableHeaderCellElement" id="::HTMLTableHeaderCellElement">
    <webidl>interface HTMLTableHeaderCellElement : <ref>HTMLTableCellElement</ref> {
           attribute DOMString scope;
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLTableCellElement"/>
    </InterfaceInheritance>
    <Attribute name="scope" id="::HTMLTableHeaderCellElement::scope">
      <webidl>           attribute DOMString scope;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLTableCellElement" id="::HTMLTableCellElement">
    <webidl>interface HTMLTableCellElement : <ref>HTMLElement</ref> {
           attribute unsigned long colSpan;
           attribute unsigned long rowSpan;
  [PutForwards=value] readonly attribute <ref>DOMSettableTokenList</ref> headers;
  readonly attribute long cellIndex;
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute name="colSpan" id="::HTMLTableCellElement::colSpan">
      <webidl>           attribute unsigned long colSpan;</webidl>
      <Type type="unsigned long"/>
    </Attribute>
    <Attribute name="rowSpan" id="::HTMLTableCellElement::rowSpan">
      <webidl>           attribute unsigned long rowSpan;</webidl>
      <Type type="unsigned long"/>
    </Attribute>
    <Attribute readonly="readonly" name="headers" id="::HTMLTableCellElement::headers">
      <webidl> readonly attribute <ref>DOMSettableTokenList</ref> headers;</webidl>
      <Type name="DOMSettableTokenList"/>
    </Attribute>
    <Attribute readonly="readonly" name="cellIndex" id="::HTMLTableCellElement::cellIndex">
      <webidl>  readonly attribute long cellIndex;</webidl>
      <Type type="long"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLFormElement" id="::HTMLFormElement">
    <webidl>[OverrideBuiltins]
interface HTMLFormElement : <ref>HTMLElement</ref> {
           attribute DOMString acceptCharset;
           attribute DOMString action;
           attribute boolean autocomplete;
           attribute DOMString enctype;
           attribute DOMString method;
           attribute DOMString name;
           attribute boolean noValidate;
           attribute DOMString target;

  readonly attribute <ref>HTMLFormControlsCollection</ref> elements;
  readonly attribute long length;
  caller getter any item(in unsigned long index);
  caller getter any namedItem(in DOMString name);

  void submit();
  void reset();
  boolean checkValidity();

  void dispatchFormInput();
  void dispatchFormChange();
};</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="OverrideBuiltins"/>
    </ExtendedAttributeList>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute name="acceptCharset" id="::HTMLFormElement::acceptCharset">
      <webidl>           attribute DOMString acceptCharset;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="action" id="::HTMLFormElement::action">
      <webidl>           attribute DOMString action;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="autocomplete" id="::HTMLFormElement::autocomplete">
      <webidl>           attribute boolean autocomplete;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute name="enctype" id="::HTMLFormElement::enctype">
      <webidl>           attribute DOMString enctype;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="method" id="::HTMLFormElement::method">
      <webidl>           attribute DOMString method;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="name" id="::HTMLFormElement::name">
      <webidl>           attribute DOMString name;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="noValidate" id="::HTMLFormElement::noValidate">
      <webidl>           attribute boolean noValidate;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute name="target" id="::HTMLFormElement::target">
      <webidl>           attribute DOMString target;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute readonly="readonly" name="elements" id="::HTMLFormElement::elements">
      <webidl>  readonly attribute <ref>HTMLFormControlsCollection</ref> elements;</webidl>
      <Type name="HTMLFormControlsCollection"/>
    </Attribute>
    <Attribute readonly="readonly" name="length" id="::HTMLFormElement::length">
      <webidl>  readonly attribute long length;</webidl>
      <Type type="long"/>
    </Attribute>
    <Operation caller="caller" getter="getter" name="item" id="::HTMLFormElement::item">
      <webidl>  caller getter any item(in unsigned long index);</webidl>
      <Type type="any"/>
      <ArgumentList>
        <Argument in="in" name="index">
          <Type type="unsigned long"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation caller="caller" getter="getter" name="namedItem" id="::HTMLFormElement::namedItem">
      <webidl>  caller getter any namedItem(in DOMString name);</webidl>
      <Type type="any"/>
      <ArgumentList>
        <Argument in="in" name="name">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="submit" id="::HTMLFormElement::submit">
      <webidl>  void submit();</webidl>
      <Type type="void"/>
      <ArgumentList/>
    </Operation>
    <Operation name="reset" id="::HTMLFormElement::reset">
      <webidl>  void reset();</webidl>
      <Type type="void"/>
      <ArgumentList/>
    </Operation>
    <Operation name="checkValidity" id="::HTMLFormElement::checkValidity">
      <webidl>  boolean checkValidity();</webidl>
      <Type type="boolean"/>
      <ArgumentList/>
    </Operation>
    <Operation name="dispatchFormInput" id="::HTMLFormElement::dispatchFormInput">
      <webidl>  void dispatchFormInput();</webidl>
      <Type type="void"/>
      <ArgumentList/>
    </Operation>
    <Operation name="dispatchFormChange" id="::HTMLFormElement::dispatchFormChange">
      <webidl>  void dispatchFormChange();</webidl>
      <Type type="void"/>
      <ArgumentList/>
    </Operation>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLFieldSetElement" id="::HTMLFieldSetElement">
    <webidl>interface HTMLFieldSetElement : <ref>HTMLElement</ref> {
           attribute boolean disabled;
  readonly attribute <ref>HTMLFormElement</ref> form;
           attribute DOMString name;

  readonly attribute DOMString type;

  readonly attribute <ref>HTMLFormControlsCollection</ref> elements;

  readonly attribute boolean willValidate;
  readonly attribute <ref>ValidityState</ref> validity;
  readonly attribute DOMString validationMessage;
  boolean checkValidity();
  void setCustomValidity(in DOMString error);
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute name="disabled" id="::HTMLFieldSetElement::disabled">
      <webidl>           attribute boolean disabled;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute readonly="readonly" name="form" id="::HTMLFieldSetElement::form">
      <webidl>  readonly attribute <ref>HTMLFormElement</ref> form;</webidl>
      <Type name="HTMLFormElement"/>
    </Attribute>
    <Attribute name="name" id="::HTMLFieldSetElement::name">
      <webidl>           attribute DOMString name;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute readonly="readonly" name="type" id="::HTMLFieldSetElement::type">
      <webidl>  readonly attribute DOMString type;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute readonly="readonly" name="elements" id="::HTMLFieldSetElement::elements">
      <webidl>  readonly attribute <ref>HTMLFormControlsCollection</ref> elements;</webidl>
      <Type name="HTMLFormControlsCollection"/>
    </Attribute>
    <Attribute readonly="readonly" name="willValidate" id="::HTMLFieldSetElement::willValidate">
      <webidl>  readonly attribute boolean willValidate;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute readonly="readonly" name="validity" id="::HTMLFieldSetElement::validity">
      <webidl>  readonly attribute <ref>ValidityState</ref> validity;</webidl>
      <Type name="ValidityState"/>
    </Attribute>
    <Attribute readonly="readonly" name="validationMessage" id="::HTMLFieldSetElement::validationMessage">
      <webidl>  readonly attribute DOMString validationMessage;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Operation name="checkValidity" id="::HTMLFieldSetElement::checkValidity">
      <webidl>  boolean checkValidity();</webidl>
      <Type type="boolean"/>
      <ArgumentList/>
    </Operation>
    <Operation name="setCustomValidity" id="::HTMLFieldSetElement::setCustomValidity">
      <webidl>  void setCustomValidity(in DOMString error);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" name="error">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLLegendElement" id="::HTMLLegendElement">
    <webidl>interface HTMLLegendElement : <ref>HTMLElement</ref> {
  readonly attribute <ref>HTMLFormElement</ref> form;
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute readonly="readonly" name="form" id="::HTMLLegendElement::form">
      <webidl>  readonly attribute <ref>HTMLFormElement</ref> form;</webidl>
      <Type name="HTMLFormElement"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLLabelElement" id="::HTMLLabelElement">
    <webidl>interface HTMLLabelElement : <ref>HTMLElement</ref> {
  readonly attribute <ref>HTMLFormElement</ref> form;
           attribute DOMString htmlFor;
  readonly attribute <ref>HTMLElement</ref> control;
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute readonly="readonly" name="form" id="::HTMLLabelElement::form">
      <webidl>  readonly attribute <ref>HTMLFormElement</ref> form;</webidl>
      <Type name="HTMLFormElement"/>
    </Attribute>
    <Attribute name="htmlFor" id="::HTMLLabelElement::htmlFor">
      <webidl>           attribute DOMString htmlFor;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute readonly="readonly" name="control" id="::HTMLLabelElement::control">
      <webidl>  readonly attribute <ref>HTMLElement</ref> control;</webidl>
      <Type name="HTMLElement"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLInputElement" id="::HTMLInputElement">
    <webidl>interface HTMLInputElement : <ref>HTMLElement</ref> {
           attribute DOMString accept;
           attribute DOMString alt;
           attribute boolean autocomplete;
           attribute boolean autofocus;
           attribute boolean defaultChecked;
           attribute boolean checked;
           attribute boolean disabled;
  readonly attribute <ref>HTMLFormElement</ref> form;
  readonly attribute <ref>FileList</ref> files;
           attribute DOMString formAction;
           attribute DOMString formEnctype;
           attribute DOMString formMethod;
           attribute boolean formNoValidate;
           attribute DOMString formTarget;
           attribute DOMString height;
           attribute boolean indeterminate;
  readonly attribute <ref>HTMLElement</ref> list;
           attribute DOMString max;
           attribute long maxLength;
           attribute DOMString min;
           attribute boolean multiple;
           attribute DOMString name;
           attribute DOMString pattern;
           attribute DOMString placeholder;
           attribute boolean readOnly;
           attribute boolean required;
           attribute unsigned long size;
           attribute DOMString src;
           attribute DOMString step;
           attribute DOMString type;
           attribute DOMString defaultValue;
           attribute DOMString value;
           attribute <ref>Date</ref> valueAsDate;
           attribute float valueAsNumber;
  readonly attribute <ref>HTMLOptionElement</ref> selectedOption;
           attribute DOMString width;

  void stepUp(in optional long n);
  void stepDown(in optional long n);

  readonly attribute boolean willValidate;
  readonly attribute <ref>ValidityState</ref> validity;
  readonly attribute DOMString validationMessage;
  boolean checkValidity();
  void setCustomValidity(in DOMString error);

  readonly attribute <ref>NodeList</ref> labels;

  void select();
           attribute unsigned long selectionStart;
           attribute unsigned long selectionEnd;
  void setSelectionRange(in unsigned long start, in unsigned long end);
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute name="accept" id="::HTMLInputElement::accept">
      <webidl>           attribute DOMString accept;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="alt" id="::HTMLInputElement::alt">
      <webidl>           attribute DOMString alt;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="autocomplete" id="::HTMLInputElement::autocomplete">
      <webidl>           attribute boolean autocomplete;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute name="autofocus" id="::HTMLInputElement::autofocus">
      <webidl>           attribute boolean autofocus;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute name="defaultChecked" id="::HTMLInputElement::defaultChecked">
      <webidl>           attribute boolean defaultChecked;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute name="checked" id="::HTMLInputElement::checked">
      <webidl>           attribute boolean checked;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute name="disabled" id="::HTMLInputElement::disabled">
      <webidl>           attribute boolean disabled;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute readonly="readonly" name="form" id="::HTMLInputElement::form">
      <webidl>  readonly attribute <ref>HTMLFormElement</ref> form;</webidl>
      <Type name="HTMLFormElement"/>
    </Attribute>
    <Attribute readonly="readonly" name="files" id="::HTMLInputElement::files">
      <webidl>  readonly attribute <ref>FileList</ref> files;</webidl>
      <Type name="FileList"/>
    </Attribute>
    <Attribute name="formAction" id="::HTMLInputElement::formAction">
      <webidl>           attribute DOMString formAction;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="formEnctype" id="::HTMLInputElement::formEnctype">
      <webidl>           attribute DOMString formEnctype;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="formMethod" id="::HTMLInputElement::formMethod">
      <webidl>           attribute DOMString formMethod;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="formNoValidate" id="::HTMLInputElement::formNoValidate">
      <webidl>           attribute boolean formNoValidate;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute name="formTarget" id="::HTMLInputElement::formTarget">
      <webidl>           attribute DOMString formTarget;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="height" id="::HTMLInputElement::height">
      <webidl>           attribute DOMString height;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="indeterminate" id="::HTMLInputElement::indeterminate">
      <webidl>           attribute boolean indeterminate;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute readonly="readonly" name="list" id="::HTMLInputElement::list">
      <webidl>  readonly attribute <ref>HTMLElement</ref> list;</webidl>
      <Type name="HTMLElement"/>
    </Attribute>
    <Attribute name="max" id="::HTMLInputElement::max">
      <webidl>           attribute DOMString max;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="maxLength" id="::HTMLInputElement::maxLength">
      <webidl>           attribute long maxLength;</webidl>
      <Type type="long"/>
    </Attribute>
    <Attribute name="min" id="::HTMLInputElement::min">
      <webidl>           attribute DOMString min;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="multiple" id="::HTMLInputElement::multiple">
      <webidl>           attribute boolean multiple;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute name="name" id="::HTMLInputElement::name">
      <webidl>           attribute DOMString name;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="pattern" id="::HTMLInputElement::pattern">
      <webidl>           attribute DOMString pattern;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="placeholder" id="::HTMLInputElement::placeholder">
      <webidl>           attribute DOMString placeholder;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="readOnly" id="::HTMLInputElement::readOnly">
      <webidl>           attribute boolean readOnly;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute name="required" id="::HTMLInputElement::required">
      <webidl>           attribute boolean required;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute name="size" id="::HTMLInputElement::size">
      <webidl>           attribute unsigned long size;</webidl>
      <Type type="unsigned long"/>
    </Attribute>
    <Attribute name="src" id="::HTMLInputElement::src">
      <webidl>           attribute DOMString src;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="step" id="::HTMLInputElement::step">
      <webidl>           attribute DOMString step;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="type" id="::HTMLInputElement::type">
      <webidl>           attribute DOMString type;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="defaultValue" id="::HTMLInputElement::defaultValue">
      <webidl>           attribute DOMString defaultValue;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="value" id="::HTMLInputElement::value">
      <webidl>           attribute DOMString value;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="valueAsDate" id="::HTMLInputElement::valueAsDate">
      <webidl>           attribute <ref>Date</ref> valueAsDate;</webidl>
      <Type name="Date"/>
    </Attribute>
    <Attribute name="valueAsNumber" id="::HTMLInputElement::valueAsNumber">
      <webidl>           attribute float valueAsNumber;</webidl>
      <Type type="float"/>
    </Attribute>
    <Attribute readonly="readonly" name="selectedOption" id="::HTMLInputElement::selectedOption">
      <webidl>  readonly attribute <ref>HTMLOptionElement</ref> selectedOption;</webidl>
      <Type name="HTMLOptionElement"/>
    </Attribute>
    <Attribute name="width" id="::HTMLInputElement::width">
      <webidl>           attribute DOMString width;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Operation name="stepUp" id="::HTMLInputElement::stepUp">
      <webidl>  void stepUp(in optional long n);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" optional="optional" name="n">
          <Type type="long"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="stepDown" id="::HTMLInputElement::stepDown">
      <webidl>  void stepDown(in optional long n);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" optional="optional" name="n">
          <Type type="long"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Attribute readonly="readonly" name="willValidate" id="::HTMLInputElement::willValidate">
      <webidl>  readonly attribute boolean willValidate;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute readonly="readonly" name="validity" id="::HTMLInputElement::validity">
      <webidl>  readonly attribute <ref>ValidityState</ref> validity;</webidl>
      <Type name="ValidityState"/>
    </Attribute>
    <Attribute readonly="readonly" name="validationMessage" id="::HTMLInputElement::validationMessage">
      <webidl>  readonly attribute DOMString validationMessage;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Operation name="checkValidity" id="::HTMLInputElement::checkValidity">
      <webidl>  boolean checkValidity();</webidl>
      <Type type="boolean"/>
      <ArgumentList/>
    </Operation>
    <Operation name="setCustomValidity" id="::HTMLInputElement::setCustomValidity">
      <webidl>  void setCustomValidity(in DOMString error);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" name="error">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Attribute readonly="readonly" name="labels" id="::HTMLInputElement::labels">
      <webidl>  readonly attribute <ref>NodeList</ref> labels;</webidl>
      <Type name="NodeList"/>
    </Attribute>
    <Operation name="select" id="::HTMLInputElement::select">
      <webidl>  void select();</webidl>
      <Type type="void"/>
      <ArgumentList/>
    </Operation>
    <Attribute name="selectionStart" id="::HTMLInputElement::selectionStart">
      <webidl>           attribute unsigned long selectionStart;</webidl>
      <Type type="unsigned long"/>
    </Attribute>
    <Attribute name="selectionEnd" id="::HTMLInputElement::selectionEnd">
      <webidl>           attribute unsigned long selectionEnd;</webidl>
      <Type type="unsigned long"/>
    </Attribute>
    <Operation name="setSelectionRange" id="::HTMLInputElement::setSelectionRange">
      <webidl>  void setSelectionRange(in unsigned long start, in unsigned long end);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" name="start">
          <Type type="unsigned long"/>
        </Argument>
        <Argument in="in" name="end">
          <Type type="unsigned long"/>
        </Argument>
      </ArgumentList>
    </Operation>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLButtonElement" id="::HTMLButtonElement">
    <webidl>interface HTMLButtonElement : <ref>HTMLElement</ref> {
           attribute boolean autofocus;
           attribute boolean disabled;
  readonly attribute <ref>HTMLFormElement</ref> form;
           attribute DOMString formAction;
           attribute DOMString formEnctype;
           attribute DOMString formMethod;
           attribute DOMString formNoValidate;
           attribute DOMString formTarget;
           attribute DOMString name;
           attribute DOMString type;
           attribute DOMString value;

  readonly attribute boolean willValidate;
  readonly attribute <ref>ValidityState</ref> validity;
  readonly attribute DOMString validationMessage;
  boolean checkValidity();
  void setCustomValidity(in DOMString error);

  readonly attribute <ref>NodeList</ref> labels;
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute name="autofocus" id="::HTMLButtonElement::autofocus">
      <webidl>           attribute boolean autofocus;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute name="disabled" id="::HTMLButtonElement::disabled">
      <webidl>           attribute boolean disabled;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute readonly="readonly" name="form" id="::HTMLButtonElement::form">
      <webidl>  readonly attribute <ref>HTMLFormElement</ref> form;</webidl>
      <Type name="HTMLFormElement"/>
    </Attribute>
    <Attribute name="formAction" id="::HTMLButtonElement::formAction">
      <webidl>           attribute DOMString formAction;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="formEnctype" id="::HTMLButtonElement::formEnctype">
      <webidl>           attribute DOMString formEnctype;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="formMethod" id="::HTMLButtonElement::formMethod">
      <webidl>           attribute DOMString formMethod;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="formNoValidate" id="::HTMLButtonElement::formNoValidate">
      <webidl>           attribute DOMString formNoValidate;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="formTarget" id="::HTMLButtonElement::formTarget">
      <webidl>           attribute DOMString formTarget;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="name" id="::HTMLButtonElement::name">
      <webidl>           attribute DOMString name;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="type" id="::HTMLButtonElement::type">
      <webidl>           attribute DOMString type;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="value" id="::HTMLButtonElement::value">
      <webidl>           attribute DOMString value;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute readonly="readonly" name="willValidate" id="::HTMLButtonElement::willValidate">
      <webidl>  readonly attribute boolean willValidate;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute readonly="readonly" name="validity" id="::HTMLButtonElement::validity">
      <webidl>  readonly attribute <ref>ValidityState</ref> validity;</webidl>
      <Type name="ValidityState"/>
    </Attribute>
    <Attribute readonly="readonly" name="validationMessage" id="::HTMLButtonElement::validationMessage">
      <webidl>  readonly attribute DOMString validationMessage;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Operation name="checkValidity" id="::HTMLButtonElement::checkValidity">
      <webidl>  boolean checkValidity();</webidl>
      <Type type="boolean"/>
      <ArgumentList/>
    </Operation>
    <Operation name="setCustomValidity" id="::HTMLButtonElement::setCustomValidity">
      <webidl>  void setCustomValidity(in DOMString error);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" name="error">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Attribute readonly="readonly" name="labels" id="::HTMLButtonElement::labels">
      <webidl>  readonly attribute <ref>NodeList</ref> labels;</webidl>
      <Type name="NodeList"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLSelectElement" id="::HTMLSelectElement">
    <webidl>interface HTMLSelectElement : <ref>HTMLElement</ref> {
           attribute boolean autofocus;
           attribute boolean disabled;
  readonly attribute <ref>HTMLFormElement</ref> form;
           attribute boolean multiple;
           attribute DOMString name;
           attribute unsigned long size;

  readonly attribute DOMString type;

  readonly attribute <ref>HTMLOptionsCollection</ref> options;
           attribute unsigned long length;
  caller getter any item(in unsigned long index);
  caller getter any namedItem(in DOMString name);
  void add(in <ref>HTMLElement</ref> element, in optional <ref>HTMLElement</ref> before);
  void add(in <ref>HTMLElement</ref> element, in long before);
  void remove(in long index);

  readonly attribute <ref>HTMLCollection</ref> selectedOptions;
           attribute long selectedIndex;
           attribute DOMString value;

  readonly attribute boolean willValidate;
  readonly attribute <ref>ValidityState</ref> validity;
  readonly attribute DOMString validationMessage;
  boolean checkValidity();
  void setCustomValidity(in DOMString error);

  readonly attribute <ref>NodeList</ref> labels;
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute name="autofocus" id="::HTMLSelectElement::autofocus">
      <webidl>           attribute boolean autofocus;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute name="disabled" id="::HTMLSelectElement::disabled">
      <webidl>           attribute boolean disabled;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute readonly="readonly" name="form" id="::HTMLSelectElement::form">
      <webidl>  readonly attribute <ref>HTMLFormElement</ref> form;</webidl>
      <Type name="HTMLFormElement"/>
    </Attribute>
    <Attribute name="multiple" id="::HTMLSelectElement::multiple">
      <webidl>           attribute boolean multiple;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute name="name" id="::HTMLSelectElement::name">
      <webidl>           attribute DOMString name;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="size" id="::HTMLSelectElement::size">
      <webidl>           attribute unsigned long size;</webidl>
      <Type type="unsigned long"/>
    </Attribute>
    <Attribute readonly="readonly" name="type" id="::HTMLSelectElement::type">
      <webidl>  readonly attribute DOMString type;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute readonly="readonly" name="options" id="::HTMLSelectElement::options">
      <webidl>  readonly attribute <ref>HTMLOptionsCollection</ref> options;</webidl>
      <Type name="HTMLOptionsCollection"/>
    </Attribute>
    <Attribute name="length" id="::HTMLSelectElement::length">
      <webidl>           attribute unsigned long length;</webidl>
      <Type type="unsigned long"/>
    </Attribute>
    <Operation caller="caller" getter="getter" name="item" id="::HTMLSelectElement::item">
      <webidl>  caller getter any item(in unsigned long index);</webidl>
      <Type type="any"/>
      <ArgumentList>
        <Argument in="in" name="index">
          <Type type="unsigned long"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation caller="caller" getter="getter" name="namedItem" id="::HTMLSelectElement::namedItem">
      <webidl>  caller getter any namedItem(in DOMString name);</webidl>
      <Type type="any"/>
      <ArgumentList>
        <Argument in="in" name="name">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="add" id="::HTMLSelectElement::add">
      <webidl>  void add(in <ref>HTMLElement</ref> element, in optional <ref>HTMLElement</ref> before);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" name="element">
          <Type name="HTMLElement"/>
        </Argument>
        <Argument in="in" optional="optional" name="before">
          <Type name="HTMLElement"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="add" id="::HTMLSelectElement::add">
      <webidl>  void add(in <ref>HTMLElement</ref> element, in long before);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" name="element">
          <Type name="HTMLElement"/>
        </Argument>
        <Argument in="in" name="before">
          <Type type="long"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="remove" id="::HTMLSelectElement::remove">
      <webidl>  void remove(in long index);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" name="index">
          <Type type="long"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Attribute readonly="readonly" name="selectedOptions" id="::HTMLSelectElement::selectedOptions">
      <webidl>  readonly attribute <ref>HTMLCollection</ref> selectedOptions;</webidl>
      <Type name="HTMLCollection"/>
    </Attribute>
    <Attribute name="selectedIndex" id="::HTMLSelectElement::selectedIndex">
      <webidl>           attribute long selectedIndex;</webidl>
      <Type type="long"/>
    </Attribute>
    <Attribute name="value" id="::HTMLSelectElement::value">
      <webidl>           attribute DOMString value;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute readonly="readonly" name="willValidate" id="::HTMLSelectElement::willValidate">
      <webidl>  readonly attribute boolean willValidate;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute readonly="readonly" name="validity" id="::HTMLSelectElement::validity">
      <webidl>  readonly attribute <ref>ValidityState</ref> validity;</webidl>
      <Type name="ValidityState"/>
    </Attribute>
    <Attribute readonly="readonly" name="validationMessage" id="::HTMLSelectElement::validationMessage">
      <webidl>  readonly attribute DOMString validationMessage;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Operation name="checkValidity" id="::HTMLSelectElement::checkValidity">
      <webidl>  boolean checkValidity();</webidl>
      <Type type="boolean"/>
      <ArgumentList/>
    </Operation>
    <Operation name="setCustomValidity" id="::HTMLSelectElement::setCustomValidity">
      <webidl>  void setCustomValidity(in DOMString error);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" name="error">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Attribute readonly="readonly" name="labels" id="::HTMLSelectElement::labels">
      <webidl>  readonly attribute <ref>NodeList</ref> labels;</webidl>
      <Type name="NodeList"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLDataListElement" id="::HTMLDataListElement">
    <webidl>interface HTMLDataListElement : <ref>HTMLElement</ref> {
  readonly attribute <ref>HTMLCollection</ref> options;
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute readonly="readonly" name="options" id="::HTMLDataListElement::options">
      <webidl>  readonly attribute <ref>HTMLCollection</ref> options;</webidl>
      <Type name="HTMLCollection"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLOptGroupElement" id="::HTMLOptGroupElement">
    <webidl>interface HTMLOptGroupElement : <ref>HTMLElement</ref> {
           attribute boolean disabled;
           attribute DOMString label;
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute name="disabled" id="::HTMLOptGroupElement::disabled">
      <webidl>           attribute boolean disabled;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute name="label" id="::HTMLOptGroupElement::label">
      <webidl>           attribute DOMString label;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLOptionElement" id="::HTMLOptionElement">
    <webidl>[NamedConstructor=Option(),
 NamedConstructor=Option(in DOMString text),
 NamedConstructor=Option(in DOMString text, in DOMString value),
 NamedConstructor=Option(in DOMString text, in DOMString value, in boolean defaultSelected),
 NamedConstructor=Option(in DOMString text, in DOMString value, in boolean defaultSelected, in boolean selected)]
interface HTMLOptionElement : <ref>HTMLElement</ref> {
           attribute boolean disabled;
  readonly attribute <ref>HTMLFormElement</ref> form;
           attribute DOMString label;
           attribute boolean defaultSelected;
           attribute boolean selected;
           attribute DOMString value;

           attribute DOMString text;
  readonly attribute long index;
};</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="NamedConstructor" value="Option">
        <ArgumentList/>
      </ExtendedAttribute>
      <ExtendedAttribute name="NamedConstructor" value="Option">
        <ArgumentList>
          <Argument in="in" name="text">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </ExtendedAttribute>
      <ExtendedAttribute name="NamedConstructor" value="Option">
        <ArgumentList>
          <Argument in="in" name="text">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="value">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </ExtendedAttribute>
      <ExtendedAttribute name="NamedConstructor" value="Option">
        <ArgumentList>
          <Argument in="in" name="text">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="value">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="defaultSelected">
            <Type type="boolean"/>
          </Argument>
        </ArgumentList>
      </ExtendedAttribute>
      <ExtendedAttribute name="NamedConstructor" value="Option">
        <ArgumentList>
          <Argument in="in" name="text">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="value">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="defaultSelected">
            <Type type="boolean"/>
          </Argument>
          <Argument in="in" name="selected">
            <Type type="boolean"/>
          </Argument>
        </ArgumentList>
      </ExtendedAttribute>
    </ExtendedAttributeList>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute name="disabled" id="::HTMLOptionElement::disabled">
      <webidl>           attribute boolean disabled;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute readonly="readonly" name="form" id="::HTMLOptionElement::form">
      <webidl>  readonly attribute <ref>HTMLFormElement</ref> form;</webidl>
      <Type name="HTMLFormElement"/>
    </Attribute>
    <Attribute name="label" id="::HTMLOptionElement::label">
      <webidl>           attribute DOMString label;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="defaultSelected" id="::HTMLOptionElement::defaultSelected">
      <webidl>           attribute boolean defaultSelected;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute name="selected" id="::HTMLOptionElement::selected">
      <webidl>           attribute boolean selected;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute name="value" id="::HTMLOptionElement::value">
      <webidl>           attribute DOMString value;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="text" id="::HTMLOptionElement::text">
      <webidl>           attribute DOMString text;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute readonly="readonly" name="index" id="::HTMLOptionElement::index">
      <webidl>  readonly attribute long index;</webidl>
      <Type type="long"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLTextAreaElement" id="::HTMLTextAreaElement">
    <webidl>interface HTMLTextAreaElement : <ref>HTMLElement</ref> {
           attribute boolean autofocus;
           attribute unsigned long cols;
           attribute boolean disabled;
  readonly attribute <ref>HTMLFormElement</ref> form;
           attribute long maxLength;
           attribute DOMString name;
           attribute DOMString placeholder;
           attribute boolean readOnly;
           attribute boolean required;
           attribute unsigned long rows;
           attribute DOMString wrap;

  readonly attribute DOMString type;
           attribute DOMString defaultValue;
           attribute DOMString value;
  readonly attribute unsigned long textLength;

  readonly attribute boolean willValidate;
  readonly attribute <ref>ValidityState</ref> validity;
  readonly attribute DOMString validationMessage;
  boolean checkValidity();
  void setCustomValidity(in DOMString error);

  readonly attribute <ref>NodeList</ref> labels;

  void select();
           attribute unsigned long selectionStart;
           attribute unsigned long selectionEnd;
  void setSelectionRange(in unsigned long start, in unsigned long end);
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute name="autofocus" id="::HTMLTextAreaElement::autofocus">
      <webidl>           attribute boolean autofocus;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute name="cols" id="::HTMLTextAreaElement::cols">
      <webidl>           attribute unsigned long cols;</webidl>
      <Type type="unsigned long"/>
    </Attribute>
    <Attribute name="disabled" id="::HTMLTextAreaElement::disabled">
      <webidl>           attribute boolean disabled;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute readonly="readonly" name="form" id="::HTMLTextAreaElement::form">
      <webidl>  readonly attribute <ref>HTMLFormElement</ref> form;</webidl>
      <Type name="HTMLFormElement"/>
    </Attribute>
    <Attribute name="maxLength" id="::HTMLTextAreaElement::maxLength">
      <webidl>           attribute long maxLength;</webidl>
      <Type type="long"/>
    </Attribute>
    <Attribute name="name" id="::HTMLTextAreaElement::name">
      <webidl>           attribute DOMString name;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="placeholder" id="::HTMLTextAreaElement::placeholder">
      <webidl>           attribute DOMString placeholder;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="readOnly" id="::HTMLTextAreaElement::readOnly">
      <webidl>           attribute boolean readOnly;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute name="required" id="::HTMLTextAreaElement::required">
      <webidl>           attribute boolean required;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute name="rows" id="::HTMLTextAreaElement::rows">
      <webidl>           attribute unsigned long rows;</webidl>
      <Type type="unsigned long"/>
    </Attribute>
    <Attribute name="wrap" id="::HTMLTextAreaElement::wrap">
      <webidl>           attribute DOMString wrap;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute readonly="readonly" name="type" id="::HTMLTextAreaElement::type">
      <webidl>  readonly attribute DOMString type;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="defaultValue" id="::HTMLTextAreaElement::defaultValue">
      <webidl>           attribute DOMString defaultValue;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="value" id="::HTMLTextAreaElement::value">
      <webidl>           attribute DOMString value;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute readonly="readonly" name="textLength" id="::HTMLTextAreaElement::textLength">
      <webidl>  readonly attribute unsigned long textLength;</webidl>
      <Type type="unsigned long"/>
    </Attribute>
    <Attribute readonly="readonly" name="willValidate" id="::HTMLTextAreaElement::willValidate">
      <webidl>  readonly attribute boolean willValidate;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute readonly="readonly" name="validity" id="::HTMLTextAreaElement::validity">
      <webidl>  readonly attribute <ref>ValidityState</ref> validity;</webidl>
      <Type name="ValidityState"/>
    </Attribute>
    <Attribute readonly="readonly" name="validationMessage" id="::HTMLTextAreaElement::validationMessage">
      <webidl>  readonly attribute DOMString validationMessage;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Operation name="checkValidity" id="::HTMLTextAreaElement::checkValidity">
      <webidl>  boolean checkValidity();</webidl>
      <Type type="boolean"/>
      <ArgumentList/>
    </Operation>
    <Operation name="setCustomValidity" id="::HTMLTextAreaElement::setCustomValidity">
      <webidl>  void setCustomValidity(in DOMString error);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" name="error">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Attribute readonly="readonly" name="labels" id="::HTMLTextAreaElement::labels">
      <webidl>  readonly attribute <ref>NodeList</ref> labels;</webidl>
      <Type name="NodeList"/>
    </Attribute>
    <Operation name="select" id="::HTMLTextAreaElement::select">
      <webidl>  void select();</webidl>
      <Type type="void"/>
      <ArgumentList/>
    </Operation>
    <Attribute name="selectionStart" id="::HTMLTextAreaElement::selectionStart">
      <webidl>           attribute unsigned long selectionStart;</webidl>
      <Type type="unsigned long"/>
    </Attribute>
    <Attribute name="selectionEnd" id="::HTMLTextAreaElement::selectionEnd">
      <webidl>           attribute unsigned long selectionEnd;</webidl>
      <Type type="unsigned long"/>
    </Attribute>
    <Operation name="setSelectionRange" id="::HTMLTextAreaElement::setSelectionRange">
      <webidl>  void setSelectionRange(in unsigned long start, in unsigned long end);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" name="start">
          <Type type="unsigned long"/>
        </Argument>
        <Argument in="in" name="end">
          <Type type="unsigned long"/>
        </Argument>
      </ArgumentList>
    </Operation>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLKeygenElement" id="::HTMLKeygenElement">
    <webidl>interface HTMLKeygenElement : <ref>HTMLElement</ref> {
           attribute boolean autofocus;
           attribute DOMString challenge;
           attribute boolean disabled;
  readonly attribute <ref>HTMLFormElement</ref> form;
           attribute DOMString keytype;
           attribute DOMString name;

  readonly attribute DOMString type;

  readonly attribute boolean willValidate;
  readonly attribute <ref>ValidityState</ref> validity;
  readonly attribute DOMString validationMessage;
  boolean checkValidity();
  void setCustomValidity(in DOMString error);

  readonly attribute <ref>NodeList</ref> labels;
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute name="autofocus" id="::HTMLKeygenElement::autofocus">
      <webidl>           attribute boolean autofocus;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute name="challenge" id="::HTMLKeygenElement::challenge">
      <webidl>           attribute DOMString challenge;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="disabled" id="::HTMLKeygenElement::disabled">
      <webidl>           attribute boolean disabled;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute readonly="readonly" name="form" id="::HTMLKeygenElement::form">
      <webidl>  readonly attribute <ref>HTMLFormElement</ref> form;</webidl>
      <Type name="HTMLFormElement"/>
    </Attribute>
    <Attribute name="keytype" id="::HTMLKeygenElement::keytype">
      <webidl>           attribute DOMString keytype;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="name" id="::HTMLKeygenElement::name">
      <webidl>           attribute DOMString name;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute readonly="readonly" name="type" id="::HTMLKeygenElement::type">
      <webidl>  readonly attribute DOMString type;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute readonly="readonly" name="willValidate" id="::HTMLKeygenElement::willValidate">
      <webidl>  readonly attribute boolean willValidate;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute readonly="readonly" name="validity" id="::HTMLKeygenElement::validity">
      <webidl>  readonly attribute <ref>ValidityState</ref> validity;</webidl>
      <Type name="ValidityState"/>
    </Attribute>
    <Attribute readonly="readonly" name="validationMessage" id="::HTMLKeygenElement::validationMessage">
      <webidl>  readonly attribute DOMString validationMessage;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Operation name="checkValidity" id="::HTMLKeygenElement::checkValidity">
      <webidl>  boolean checkValidity();</webidl>
      <Type type="boolean"/>
      <ArgumentList/>
    </Operation>
    <Operation name="setCustomValidity" id="::HTMLKeygenElement::setCustomValidity">
      <webidl>  void setCustomValidity(in DOMString error);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" name="error">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Attribute readonly="readonly" name="labels" id="::HTMLKeygenElement::labels">
      <webidl>  readonly attribute <ref>NodeList</ref> labels;</webidl>
      <Type name="NodeList"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLOutputElement" id="::HTMLOutputElement">
    <webidl>interface HTMLOutputElement : <ref>HTMLElement</ref> {
  [PutForwards=value] readonly attribute <ref>DOMSettableTokenList</ref> htmlFor;
  readonly attribute <ref>HTMLFormElement</ref> form;
           attribute DOMString name;

  readonly attribute DOMString type;
           attribute DOMString defaultValue;
           attribute DOMString value;

  readonly attribute boolean willValidate;
  readonly attribute <ref>ValidityState</ref> validity;
  readonly attribute DOMString validationMessage;
  boolean checkValidity();
  void setCustomValidity(in DOMString error);

  readonly attribute <ref>NodeList</ref> labels;
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute readonly="readonly" name="htmlFor" id="::HTMLOutputElement::htmlFor">
      <webidl> readonly attribute <ref>DOMSettableTokenList</ref> htmlFor;</webidl>
      <Type name="DOMSettableTokenList"/>
    </Attribute>
    <Attribute readonly="readonly" name="form" id="::HTMLOutputElement::form">
      <webidl>  readonly attribute <ref>HTMLFormElement</ref> form;</webidl>
      <Type name="HTMLFormElement"/>
    </Attribute>
    <Attribute name="name" id="::HTMLOutputElement::name">
      <webidl>           attribute DOMString name;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute readonly="readonly" name="type" id="::HTMLOutputElement::type">
      <webidl>  readonly attribute DOMString type;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="defaultValue" id="::HTMLOutputElement::defaultValue">
      <webidl>           attribute DOMString defaultValue;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="value" id="::HTMLOutputElement::value">
      <webidl>           attribute DOMString value;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute readonly="readonly" name="willValidate" id="::HTMLOutputElement::willValidate">
      <webidl>  readonly attribute boolean willValidate;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute readonly="readonly" name="validity" id="::HTMLOutputElement::validity">
      <webidl>  readonly attribute <ref>ValidityState</ref> validity;</webidl>
      <Type name="ValidityState"/>
    </Attribute>
    <Attribute readonly="readonly" name="validationMessage" id="::HTMLOutputElement::validationMessage">
      <webidl>  readonly attribute DOMString validationMessage;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Operation name="checkValidity" id="::HTMLOutputElement::checkValidity">
      <webidl>  boolean checkValidity();</webidl>
      <Type type="boolean"/>
      <ArgumentList/>
    </Operation>
    <Operation name="setCustomValidity" id="::HTMLOutputElement::setCustomValidity">
      <webidl>  void setCustomValidity(in DOMString error);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" name="error">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Attribute readonly="readonly" name="labels" id="::HTMLOutputElement::labels">
      <webidl>  readonly attribute <ref>NodeList</ref> labels;</webidl>
      <Type name="NodeList"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLProgressElement" id="::HTMLProgressElement">
    <webidl>interface HTMLProgressElement : <ref>HTMLElement</ref> {
           attribute float value;
           attribute float max;
  readonly attribute float position;
  readonly attribute <ref>HTMLFormElement</ref> form;
  readonly attribute <ref>NodeList</ref> labels;
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute name="value" id="::HTMLProgressElement::value">
      <webidl>           attribute float value;</webidl>
      <Type type="float"/>
    </Attribute>
    <Attribute name="max" id="::HTMLProgressElement::max">
      <webidl>           attribute float max;</webidl>
      <Type type="float"/>
    </Attribute>
    <Attribute readonly="readonly" name="position" id="::HTMLProgressElement::position">
      <webidl>  readonly attribute float position;</webidl>
      <Type type="float"/>
    </Attribute>
    <Attribute readonly="readonly" name="form" id="::HTMLProgressElement::form">
      <webidl>  readonly attribute <ref>HTMLFormElement</ref> form;</webidl>
      <Type name="HTMLFormElement"/>
    </Attribute>
    <Attribute readonly="readonly" name="labels" id="::HTMLProgressElement::labels">
      <webidl>  readonly attribute <ref>NodeList</ref> labels;</webidl>
      <Type name="NodeList"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLMeterElement" id="::HTMLMeterElement">
    <webidl>interface HTMLMeterElement : <ref>HTMLElement</ref> {
           attribute float value;
           attribute float min;
           attribute float max;
           attribute float low;
           attribute float high;
           attribute float optimum;
  readonly attribute <ref>HTMLFormElement</ref> form;
  readonly attribute <ref>NodeList</ref> labels;
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute name="value" id="::HTMLMeterElement::value">
      <webidl>           attribute float value;</webidl>
      <Type type="float"/>
    </Attribute>
    <Attribute name="min" id="::HTMLMeterElement::min">
      <webidl>           attribute float min;</webidl>
      <Type type="float"/>
    </Attribute>
    <Attribute name="max" id="::HTMLMeterElement::max">
      <webidl>           attribute float max;</webidl>
      <Type type="float"/>
    </Attribute>
    <Attribute name="low" id="::HTMLMeterElement::low">
      <webidl>           attribute float low;</webidl>
      <Type type="float"/>
    </Attribute>
    <Attribute name="high" id="::HTMLMeterElement::high">
      <webidl>           attribute float high;</webidl>
      <Type type="float"/>
    </Attribute>
    <Attribute name="optimum" id="::HTMLMeterElement::optimum">
      <webidl>           attribute float optimum;</webidl>
      <Type type="float"/>
    </Attribute>
    <Attribute readonly="readonly" name="form" id="::HTMLMeterElement::form">
      <webidl>  readonly attribute <ref>HTMLFormElement</ref> form;</webidl>
      <Type name="HTMLFormElement"/>
    </Attribute>
    <Attribute readonly="readonly" name="labels" id="::HTMLMeterElement::labels">
      <webidl>  readonly attribute <ref>NodeList</ref> labels;</webidl>
      <Type name="NodeList"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="ValidityState" id="::ValidityState">
    <webidl>interface ValidityState {
  readonly attribute boolean valueMissing;
  readonly attribute boolean typeMismatch;
  readonly attribute boolean patternMismatch;
  readonly attribute boolean tooLong;
  readonly attribute boolean rangeUnderflow;
  readonly attribute boolean rangeOverflow;
  readonly attribute boolean stepMismatch;
  readonly attribute boolean customError;
  readonly attribute boolean valid;
};</webidl>
    <Attribute readonly="readonly" name="valueMissing" id="::ValidityState::valueMissing">
      <webidl>  readonly attribute boolean valueMissing;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute readonly="readonly" name="typeMismatch" id="::ValidityState::typeMismatch">
      <webidl>  readonly attribute boolean typeMismatch;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute readonly="readonly" name="patternMismatch" id="::ValidityState::patternMismatch">
      <webidl>  readonly attribute boolean patternMismatch;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute readonly="readonly" name="tooLong" id="::ValidityState::tooLong">
      <webidl>  readonly attribute boolean tooLong;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute readonly="readonly" name="rangeUnderflow" id="::ValidityState::rangeUnderflow">
      <webidl>  readonly attribute boolean rangeUnderflow;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute readonly="readonly" name="rangeOverflow" id="::ValidityState::rangeOverflow">
      <webidl>  readonly attribute boolean rangeOverflow;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute readonly="readonly" name="stepMismatch" id="::ValidityState::stepMismatch">
      <webidl>  readonly attribute boolean stepMismatch;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute readonly="readonly" name="customError" id="::ValidityState::customError">
      <webidl>  readonly attribute boolean customError;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute readonly="readonly" name="valid" id="::ValidityState::valid">
      <webidl>  readonly attribute boolean valid;</webidl>
      <Type type="boolean"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLDetailsElement" id="::HTMLDetailsElement">
    <webidl>interface HTMLDetailsElement : <ref>HTMLElement</ref> {
           attribute boolean open;
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute name="open" id="::HTMLDetailsElement::open">
      <webidl>           attribute boolean open;</webidl>
      <Type type="boolean"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLCommandElement" id="::HTMLCommandElement">
    <webidl>interface HTMLCommandElement : <ref>HTMLElement</ref> {
           attribute DOMString type;
           attribute DOMString label;
           attribute DOMString icon;
           attribute boolean disabled;
           attribute boolean checked;
           attribute DOMString radiogroup;
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute name="type" id="::HTMLCommandElement::type">
      <webidl>           attribute DOMString type;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="label" id="::HTMLCommandElement::label">
      <webidl>           attribute DOMString label;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="icon" id="::HTMLCommandElement::icon">
      <webidl>           attribute DOMString icon;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="disabled" id="::HTMLCommandElement::disabled">
      <webidl>           attribute boolean disabled;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute name="checked" id="::HTMLCommandElement::checked">
      <webidl>           attribute boolean checked;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute name="radiogroup" id="::HTMLCommandElement::radiogroup">
      <webidl>           attribute DOMString radiogroup;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLMenuElement" id="::HTMLMenuElement">
    <webidl>interface HTMLMenuElement : <ref>HTMLElement</ref> {
           attribute DOMString type;
           attribute DOMString label;
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute name="type" id="::HTMLMenuElement::type">
      <webidl>           attribute DOMString type;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="label" id="::HTMLMenuElement::label">
      <webidl>           attribute DOMString label;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="Window" id="::Window">
    <webidl>[OverrideBuiltins, ReplaceableNamedProperties] 
interface Window {
  readonly attribute <ref>WindowProxy</ref> window;
  readonly attribute <ref>WindowProxy</ref> self;
           attribute DOMString name;
  [PutForwards=href] readonly attribute <ref>Location</ref> location;
  readonly attribute <ref>History</ref> history;
  readonly attribute <ref>UndoManager</ref> undoManager;
  <ref>Selection</ref> getSelection();
  [Replaceable] readonly attribute <ref>BarProp</ref> locationbar;
  [Replaceable] readonly attribute <ref>BarProp</ref> menubar;
  [Replaceable] readonly attribute <ref>BarProp</ref> personalbar;
  [Replaceable] readonly attribute <ref>BarProp</ref> scrollbars;
  [Replaceable] readonly attribute <ref>BarProp</ref> statusbar;
  [Replaceable] readonly attribute <ref>BarProp</ref> toolbar;
  void close();
  void focus();
  void blur();

  [Replaceable] readonly attribute <ref>WindowProxy</ref> frames;
  [Replaceable] readonly attribute unsigned long length;
  readonly attribute <ref>WindowProxy</ref> top;
  [Replaceable] readonly attribute <ref>WindowProxy</ref> opener;
  readonly attribute <ref>WindowProxy</ref> parent;
  readonly attribute <ref>Element</ref> frameElement;
  <ref>WindowProxy</ref> open(in optional DOMString url, in optional DOMString target, in optional DOMString features, in optional DOMString replace);
  getter <ref>WindowProxy</ref> (in unsigned long index);
  getter <ref>WindowProxy</ref> (in DOMString name);

  readonly attribute <ref>Navigator</ref> navigator; 
  readonly attribute <ref>ApplicationCache</ref> applicationCache;

  void alert(in DOMString message);
  boolean confirm(in DOMString message);
  DOMString prompt(in DOMString message, in optional DOMString default);
  void print();
  any showModalDialog(in DOMString url, in optional any argument);

           attribute <ref>Function</ref> onabort;
           attribute <ref>Function</ref> onafterprint;
           attribute <ref>Function</ref> onbeforeprint;
           attribute <ref>Function</ref> onbeforeunload;
           attribute <ref>Function</ref> onblur;
           attribute <ref>Function</ref> oncanplay;
           attribute <ref>Function</ref> oncanplaythrough;
           attribute <ref>Function</ref> onchange;
           attribute <ref>Function</ref> onclick;
           attribute <ref>Function</ref> oncontextmenu;
           attribute <ref>Function</ref> ondblclick;
           attribute <ref>Function</ref> ondrag;
           attribute <ref>Function</ref> ondragend;
           attribute <ref>Function</ref> ondragenter;
           attribute <ref>Function</ref> ondragleave;
           attribute <ref>Function</ref> ondragover;
           attribute <ref>Function</ref> ondragstart;
           attribute <ref>Function</ref> ondrop;
           attribute <ref>Function</ref> ondurationchange;
           attribute <ref>Function</ref> onemptied;
           attribute <ref>Function</ref> onended;
           attribute <ref>Function</ref> onerror;
           attribute <ref>Function</ref> onfocus;
           attribute <ref>Function</ref> onformchange;
           attribute <ref>Function</ref> onforminput;
           attribute <ref>Function</ref> onhashchange;
           attribute <ref>Function</ref> oninput;
           attribute <ref>Function</ref> oninvalid;
           attribute <ref>Function</ref> onkeydown;
           attribute <ref>Function</ref> onkeypress;
           attribute <ref>Function</ref> onkeyup;
           attribute <ref>Function</ref> onload;
           attribute <ref>Function</ref> onloadeddata;
           attribute <ref>Function</ref> onloadedmetadata;
           attribute <ref>Function</ref> onloadstart;
           attribute <ref>Function</ref> onmessage;
           attribute <ref>Function</ref> onmousedown;
           attribute <ref>Function</ref> onmousemove;
           attribute <ref>Function</ref> onmouseout;
           attribute <ref>Function</ref> onmouseover;
           attribute <ref>Function</ref> onmouseup;
           attribute <ref>Function</ref> onmousewheel;
           attribute <ref>Function</ref> onoffline;
           attribute <ref>Function</ref> ononline;
           attribute <ref>Function</ref> onpause;
           attribute <ref>Function</ref> onplay;
           attribute <ref>Function</ref> onplaying;
           attribute <ref>Function</ref> onpagehide;
           attribute <ref>Function</ref> onpageshow;
           attribute <ref>Function</ref> onpopstate;
           attribute <ref>Function</ref> onprogress;
           attribute <ref>Function</ref> onratechange;
           attribute <ref>Function</ref> onreadystatechange;
           attribute <ref>Function</ref> onredo;
           attribute <ref>Function</ref> onresize;
           attribute <ref>Function</ref> onscroll;
           attribute <ref>Function</ref> onseeked;
           attribute <ref>Function</ref> onseeking;
           attribute <ref>Function</ref> onselect;
           attribute <ref>Function</ref> onshow;
           attribute <ref>Function</ref> onstalled;
           attribute <ref>Function</ref> onstorage;
           attribute <ref>Function</ref> onsubmit;
           attribute <ref>Function</ref> onsuspend;
           attribute <ref>Function</ref> ontimeupdate;
           attribute <ref>Function</ref> onundo;
           attribute <ref>Function</ref> onunload;
           attribute <ref>Function</ref> onvolumechange;
           attribute <ref>Function</ref> onwaiting;
};</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="OverrideBuiltins"/>
      <ExtendedAttribute name="ReplaceableNamedProperties"/>
    </ExtendedAttributeList>
    <Attribute readonly="readonly" name="window" id="::Window::window">
      <webidl>  readonly attribute <ref>WindowProxy</ref> window;</webidl>
      <Type name="WindowProxy"/>
    </Attribute>
    <Attribute readonly="readonly" name="self" id="::Window::self">
      <webidl>  readonly attribute <ref>WindowProxy</ref> self;</webidl>
      <Type name="WindowProxy"/>
    </Attribute>
    <Attribute name="name" id="::Window::name">
      <webidl>           attribute DOMString name;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute readonly="readonly" name="location" id="::Window::location">
      <webidl> readonly attribute <ref>Location</ref> location;</webidl>
      <Type name="Location"/>
    </Attribute>
    <Attribute readonly="readonly" name="history" id="::Window::history">
      <webidl>  readonly attribute <ref>History</ref> history;</webidl>
      <Type name="History"/>
    </Attribute>
    <Attribute readonly="readonly" name="undoManager" id="::Window::undoManager">
      <webidl>  readonly attribute <ref>UndoManager</ref> undoManager;</webidl>
      <Type name="UndoManager"/>
    </Attribute>
    <Operation name="getSelection" id="::Window::getSelection">
      <webidl>  <ref>Selection</ref> getSelection();</webidl>
      <Type name="Selection"/>
      <ArgumentList/>
    </Operation>
    <Attribute readonly="readonly" name="locationbar" id="::Window::locationbar">
      <webidl> readonly attribute <ref>BarProp</ref> locationbar;</webidl>
      <Type name="BarProp"/>
    </Attribute>
    <Attribute readonly="readonly" name="menubar" id="::Window::menubar">
      <webidl> readonly attribute <ref>BarProp</ref> menubar;</webidl>
      <Type name="BarProp"/>
    </Attribute>
    <Attribute readonly="readonly" name="personalbar" id="::Window::personalbar">
      <webidl> readonly attribute <ref>BarProp</ref> personalbar;</webidl>
      <Type name="BarProp"/>
    </Attribute>
    <Attribute readonly="readonly" name="scrollbars" id="::Window::scrollbars">
      <webidl> readonly attribute <ref>BarProp</ref> scrollbars;</webidl>
      <Type name="BarProp"/>
    </Attribute>
    <Attribute readonly="readonly" name="statusbar" id="::Window::statusbar">
      <webidl> readonly attribute <ref>BarProp</ref> statusbar;</webidl>
      <Type name="BarProp"/>
    </Attribute>
    <Attribute readonly="readonly" name="toolbar" id="::Window::toolbar">
      <webidl> readonly attribute <ref>BarProp</ref> toolbar;</webidl>
      <Type name="BarProp"/>
    </Attribute>
    <Operation name="close" id="::Window::close">
      <webidl>  void close();</webidl>
      <Type type="void"/>
      <ArgumentList/>
    </Operation>
    <Operation name="focus" id="::Window::focus">
      <webidl>  void focus();</webidl>
      <Type type="void"/>
      <ArgumentList/>
    </Operation>
    <Operation name="blur" id="::Window::blur">
      <webidl>  void blur();</webidl>
      <Type type="void"/>
      <ArgumentList/>
    </Operation>
    <Attribute readonly="readonly" name="frames" id="::Window::frames">
      <webidl> readonly attribute <ref>WindowProxy</ref> frames;</webidl>
      <Type name="WindowProxy"/>
    </Attribute>
    <Attribute readonly="readonly" name="length" id="::Window::length">
      <webidl> readonly attribute unsigned long length;</webidl>
      <Type type="unsigned long"/>
    </Attribute>
    <Attribute readonly="readonly" name="top" id="::Window::top">
      <webidl>  readonly attribute <ref>WindowProxy</ref> top;</webidl>
      <Type name="WindowProxy"/>
    </Attribute>
    <Attribute readonly="readonly" name="opener" id="::Window::opener">
      <webidl> readonly attribute <ref>WindowProxy</ref> opener;</webidl>
      <Type name="WindowProxy"/>
    </Attribute>
    <Attribute readonly="readonly" name="parent" id="::Window::parent">
      <webidl>  readonly attribute <ref>WindowProxy</ref> parent;</webidl>
      <Type name="WindowProxy"/>
    </Attribute>
    <Attribute readonly="readonly" name="frameElement" id="::Window::frameElement">
      <webidl>  readonly attribute <ref>Element</ref> frameElement;</webidl>
      <Type name="Element"/>
    </Attribute>
    <Operation name="open" id="::Window::open">
      <webidl>  <ref>WindowProxy</ref> open(in optional DOMString url, in optional DOMString target, in optional DOMString features, in optional DOMString replace);</webidl>
      <Type name="WindowProxy"/>
      <ArgumentList>
        <Argument in="in" optional="optional" name="url">
          <Type type="DOMString"/>
        </Argument>
        <Argument in="in" optional="optional" name="target">
          <Type type="DOMString"/>
        </Argument>
        <Argument in="in" optional="optional" name="features">
          <Type type="DOMString"/>
        </Argument>
        <Argument in="in" optional="optional" name="replace">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation getter="getter">
      <webidl>  getter <ref>WindowProxy</ref> (in unsigned long index);</webidl>
      <Type name="WindowProxy"/>
      <ArgumentList>
        <Argument in="in" name="index">
          <Type type="unsigned long"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation getter="getter">
      <webidl>  getter <ref>WindowProxy</ref> (in DOMString name);</webidl>
      <Type name="WindowProxy"/>
      <ArgumentList>
        <Argument in="in" name="name">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Attribute readonly="readonly" name="navigator" id="::Window::navigator">
      <webidl>  readonly attribute <ref>Navigator</ref> navigator;</webidl>
      <Type name="Navigator"/>
    </Attribute>
    <Attribute readonly="readonly" name="applicationCache" id="::Window::applicationCache">
      <webidl>  readonly attribute <ref>ApplicationCache</ref> applicationCache;</webidl>
      <Type name="ApplicationCache"/>
    </Attribute>
    <Operation name="alert" id="::Window::alert">
      <webidl>  void alert(in DOMString message);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" name="message">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="confirm" id="::Window::confirm">
      <webidl>  boolean confirm(in DOMString message);</webidl>
      <Type type="boolean"/>
      <ArgumentList>
        <Argument in="in" name="message">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="prompt" id="::Window::prompt">
      <webidl>  DOMString prompt(in DOMString message, in optional DOMString default);</webidl>
      <Type type="DOMString"/>
      <ArgumentList>
        <Argument in="in" name="message">
          <Type type="DOMString"/>
        </Argument>
        <Argument in="in" optional="optional" name="default">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="print" id="::Window::print">
      <webidl>  void print();</webidl>
      <Type type="void"/>
      <ArgumentList/>
    </Operation>
    <Operation name="showModalDialog" id="::Window::showModalDialog">
      <webidl>  any showModalDialog(in DOMString url, in optional any argument);</webidl>
      <Type type="any"/>
      <ArgumentList>
        <Argument in="in" name="url">
          <Type type="DOMString"/>
        </Argument>
        <Argument in="in" optional="optional" name="argument">
          <Type type="any"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Attribute name="onabort" id="::Window::onabort">
      <webidl>           attribute <ref>Function</ref> onabort;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onafterprint" id="::Window::onafterprint">
      <webidl>           attribute <ref>Function</ref> onafterprint;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onbeforeprint" id="::Window::onbeforeprint">
      <webidl>           attribute <ref>Function</ref> onbeforeprint;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onbeforeunload" id="::Window::onbeforeunload">
      <webidl>           attribute <ref>Function</ref> onbeforeunload;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onblur" id="::Window::onblur">
      <webidl>           attribute <ref>Function</ref> onblur;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="oncanplay" id="::Window::oncanplay">
      <webidl>           attribute <ref>Function</ref> oncanplay;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="oncanplaythrough" id="::Window::oncanplaythrough">
      <webidl>           attribute <ref>Function</ref> oncanplaythrough;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onchange" id="::Window::onchange">
      <webidl>           attribute <ref>Function</ref> onchange;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onclick" id="::Window::onclick">
      <webidl>           attribute <ref>Function</ref> onclick;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="oncontextmenu" id="::Window::oncontextmenu">
      <webidl>           attribute <ref>Function</ref> oncontextmenu;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="ondblclick" id="::Window::ondblclick">
      <webidl>           attribute <ref>Function</ref> ondblclick;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="ondrag" id="::Window::ondrag">
      <webidl>           attribute <ref>Function</ref> ondrag;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="ondragend" id="::Window::ondragend">
      <webidl>           attribute <ref>Function</ref> ondragend;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="ondragenter" id="::Window::ondragenter">
      <webidl>           attribute <ref>Function</ref> ondragenter;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="ondragleave" id="::Window::ondragleave">
      <webidl>           attribute <ref>Function</ref> ondragleave;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="ondragover" id="::Window::ondragover">
      <webidl>           attribute <ref>Function</ref> ondragover;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="ondragstart" id="::Window::ondragstart">
      <webidl>           attribute <ref>Function</ref> ondragstart;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="ondrop" id="::Window::ondrop">
      <webidl>           attribute <ref>Function</ref> ondrop;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="ondurationchange" id="::Window::ondurationchange">
      <webidl>           attribute <ref>Function</ref> ondurationchange;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onemptied" id="::Window::onemptied">
      <webidl>           attribute <ref>Function</ref> onemptied;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onended" id="::Window::onended">
      <webidl>           attribute <ref>Function</ref> onended;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onerror" id="::Window::onerror">
      <webidl>           attribute <ref>Function</ref> onerror;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onfocus" id="::Window::onfocus">
      <webidl>           attribute <ref>Function</ref> onfocus;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onformchange" id="::Window::onformchange">
      <webidl>           attribute <ref>Function</ref> onformchange;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onforminput" id="::Window::onforminput">
      <webidl>           attribute <ref>Function</ref> onforminput;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onhashchange" id="::Window::onhashchange">
      <webidl>           attribute <ref>Function</ref> onhashchange;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="oninput" id="::Window::oninput">
      <webidl>           attribute <ref>Function</ref> oninput;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="oninvalid" id="::Window::oninvalid">
      <webidl>           attribute <ref>Function</ref> oninvalid;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onkeydown" id="::Window::onkeydown">
      <webidl>           attribute <ref>Function</ref> onkeydown;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onkeypress" id="::Window::onkeypress">
      <webidl>           attribute <ref>Function</ref> onkeypress;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onkeyup" id="::Window::onkeyup">
      <webidl>           attribute <ref>Function</ref> onkeyup;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onload" id="::Window::onload">
      <webidl>           attribute <ref>Function</ref> onload;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onloadeddata" id="::Window::onloadeddata">
      <webidl>           attribute <ref>Function</ref> onloadeddata;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onloadedmetadata" id="::Window::onloadedmetadata">
      <webidl>           attribute <ref>Function</ref> onloadedmetadata;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onloadstart" id="::Window::onloadstart">
      <webidl>           attribute <ref>Function</ref> onloadstart;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onmessage" id="::Window::onmessage">
      <webidl>           attribute <ref>Function</ref> onmessage;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onmousedown" id="::Window::onmousedown">
      <webidl>           attribute <ref>Function</ref> onmousedown;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onmousemove" id="::Window::onmousemove">
      <webidl>           attribute <ref>Function</ref> onmousemove;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onmouseout" id="::Window::onmouseout">
      <webidl>           attribute <ref>Function</ref> onmouseout;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onmouseover" id="::Window::onmouseover">
      <webidl>           attribute <ref>Function</ref> onmouseover;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onmouseup" id="::Window::onmouseup">
      <webidl>           attribute <ref>Function</ref> onmouseup;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onmousewheel" id="::Window::onmousewheel">
      <webidl>           attribute <ref>Function</ref> onmousewheel;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onoffline" id="::Window::onoffline">
      <webidl>           attribute <ref>Function</ref> onoffline;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="ononline" id="::Window::ononline">
      <webidl>           attribute <ref>Function</ref> ononline;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onpause" id="::Window::onpause">
      <webidl>           attribute <ref>Function</ref> onpause;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onplay" id="::Window::onplay">
      <webidl>           attribute <ref>Function</ref> onplay;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onplaying" id="::Window::onplaying">
      <webidl>           attribute <ref>Function</ref> onplaying;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onpagehide" id="::Window::onpagehide">
      <webidl>           attribute <ref>Function</ref> onpagehide;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onpageshow" id="::Window::onpageshow">
      <webidl>           attribute <ref>Function</ref> onpageshow;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onpopstate" id="::Window::onpopstate">
      <webidl>           attribute <ref>Function</ref> onpopstate;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onprogress" id="::Window::onprogress">
      <webidl>           attribute <ref>Function</ref> onprogress;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onratechange" id="::Window::onratechange">
      <webidl>           attribute <ref>Function</ref> onratechange;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onreadystatechange" id="::Window::onreadystatechange">
      <webidl>           attribute <ref>Function</ref> onreadystatechange;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onredo" id="::Window::onredo">
      <webidl>           attribute <ref>Function</ref> onredo;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onresize" id="::Window::onresize">
      <webidl>           attribute <ref>Function</ref> onresize;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onscroll" id="::Window::onscroll">
      <webidl>           attribute <ref>Function</ref> onscroll;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onseeked" id="::Window::onseeked">
      <webidl>           attribute <ref>Function</ref> onseeked;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onseeking" id="::Window::onseeking">
      <webidl>           attribute <ref>Function</ref> onseeking;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onselect" id="::Window::onselect">
      <webidl>           attribute <ref>Function</ref> onselect;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onshow" id="::Window::onshow">
      <webidl>           attribute <ref>Function</ref> onshow;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onstalled" id="::Window::onstalled">
      <webidl>           attribute <ref>Function</ref> onstalled;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onstorage" id="::Window::onstorage">
      <webidl>           attribute <ref>Function</ref> onstorage;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onsubmit" id="::Window::onsubmit">
      <webidl>           attribute <ref>Function</ref> onsubmit;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onsuspend" id="::Window::onsuspend">
      <webidl>           attribute <ref>Function</ref> onsuspend;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="ontimeupdate" id="::Window::ontimeupdate">
      <webidl>           attribute <ref>Function</ref> ontimeupdate;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onundo" id="::Window::onundo">
      <webidl>           attribute <ref>Function</ref> onundo;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onunload" id="::Window::onunload">
      <webidl>           attribute <ref>Function</ref> onunload;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onvolumechange" id="::Window::onvolumechange">
      <webidl>           attribute <ref>Function</ref> onvolumechange;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onwaiting" id="::Window::onwaiting">
      <webidl>           attribute <ref>Function</ref> onwaiting;</webidl>
      <Type name="Function"/>
    </Attribute>
  </Interface>
  <Implements name1="Window" name2="EventTarget">
    <webidl><ref>Window</ref> implements <ref>EventTarget</ref>;</webidl>
  </Implements>
</Definitions>


<Definitions>
  <Interface name="BarProp" id="::BarProp">
    <webidl>interface BarProp {
           attribute boolean visible;
};</webidl>
    <Attribute name="visible" id="::BarProp::visible">
      <webidl>           attribute boolean visible;</webidl>
      <Type type="boolean"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="Function" id="::Function">
    <webidl>[Callback=FunctionOnly, NoInterfaceObject]
interface Function {
  any call(in any... arguments);
};</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="Callback" value="FunctionOnly"/>
      <ExtendedAttribute name="NoInterfaceObject"/>
    </ExtendedAttributeList>
    <Operation name="call" id="::Function::call">
      <webidl>  any call(in any... arguments);</webidl>
      <Type type="any"/>
      <ArgumentList>
        <Argument in="in" ellipsis="ellipsis" name="arguments">
          <Type type="any"/>
        </Argument>
      </ArgumentList>
    </Operation>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="WindowTimers" id="::WindowTimers">
    <webidl>[Supplemental, NoInterfaceObject]
interface WindowTimers {
  long setTimeout(in any handler, in optional any timeout, in any... args);
  void clearTimeout(in long handle);
  long setInterval(in any handler, in optional any timeout, in any... args);
  void clearInterval(in long handle);
};</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="Supplemental"/>
      <ExtendedAttribute name="NoInterfaceObject"/>
    </ExtendedAttributeList>
    <Operation name="setTimeout" id="::WindowTimers::setTimeout">
      <webidl>  long setTimeout(in any handler, in optional any timeout, in any... args);</webidl>
      <Type type="long"/>
      <ArgumentList>
        <Argument in="in" name="handler">
          <Type type="any"/>
        </Argument>
        <Argument in="in" optional="optional" name="timeout">
          <Type type="any"/>
        </Argument>
        <Argument in="in" ellipsis="ellipsis" name="args">
          <Type type="any"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="clearTimeout" id="::WindowTimers::clearTimeout">
      <webidl>  void clearTimeout(in long handle);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" name="handle">
          <Type type="long"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="setInterval" id="::WindowTimers::setInterval">
      <webidl>  long setInterval(in any handler, in optional any timeout, in any... args);</webidl>
      <Type type="long"/>
      <ArgumentList>
        <Argument in="in" name="handler">
          <Type type="any"/>
        </Argument>
        <Argument in="in" optional="optional" name="timeout">
          <Type type="any"/>
        </Argument>
        <Argument in="in" ellipsis="ellipsis" name="args">
          <Type type="any"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="clearInterval" id="::WindowTimers::clearInterval">
      <webidl>  void clearInterval(in long handle);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" name="handle">
          <Type type="long"/>
        </Argument>
      </ArgumentList>
    </Operation>
  </Interface>
  <Implements name1="Window" name2="WindowTimers">
    <webidl><ref>Window</ref> implements <ref>WindowTimers</ref>;</webidl>
  </Implements>
</Definitions>


<Definitions>
  <Interface name="WindowModal" id="::WindowModal">
    <webidl>[Supplemental, NoInterfaceObject] interface WindowModal {
  readonly attribute any dialogArguments;
           attribute DOMString returnValue;
};</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="Supplemental"/>
      <ExtendedAttribute name="NoInterfaceObject"/>
    </ExtendedAttributeList>
    <Attribute readonly="readonly" name="dialogArguments" id="::WindowModal::dialogArguments">
      <webidl>  readonly attribute any dialogArguments;</webidl>
      <Type type="any"/>
    </Attribute>
    <Attribute name="returnValue" id="::WindowModal::returnValue">
      <webidl>           attribute DOMString returnValue;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="Navigator" id="::Navigator">
    <webidl>interface Navigator {
};</webidl>
  </Interface>
  <Implements name1="Navigator" name2="NavigatorID">
    <webidl><ref>Navigator</ref> implements <ref>NavigatorID</ref>;</webidl>
  </Implements>
  <Implements name1="Navigator" name2="NavigatorOnLine">
    <webidl><ref>Navigator</ref> implements <ref>NavigatorOnLine</ref>;</webidl>
  </Implements>
  <Implements name1="Navigator" name2="NavigatorAbilities">
    <webidl><ref>Navigator</ref> implements <ref>NavigatorAbilities</ref>;</webidl>
  </Implements>
  <Interface name="NavigatorID" id="::NavigatorID">
    <webidl>[Supplemental, NoInterfaceObject]
interface NavigatorID {
  readonly attribute DOMString appName;
  readonly attribute DOMString appVersion;
  readonly attribute DOMString platform;
  readonly attribute DOMString userAgent;
};</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="Supplemental"/>
      <ExtendedAttribute name="NoInterfaceObject"/>
    </ExtendedAttributeList>
    <Attribute readonly="readonly" name="appName" id="::NavigatorID::appName">
      <webidl>  readonly attribute DOMString appName;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute readonly="readonly" name="appVersion" id="::NavigatorID::appVersion">
      <webidl>  readonly attribute DOMString appVersion;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute readonly="readonly" name="platform" id="::NavigatorID::platform">
      <webidl>  readonly attribute DOMString platform;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute readonly="readonly" name="userAgent" id="::NavigatorID::userAgent">
      <webidl>  readonly attribute DOMString userAgent;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
  <Interface name="NavigatorOnLine" id="::NavigatorOnLine">
    <webidl>[Supplemental, NoInterfaceObject]
interface NavigatorOnLine {
  readonly attribute boolean onLine;
};</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="Supplemental"/>
      <ExtendedAttribute name="NoInterfaceObject"/>
    </ExtendedAttributeList>
    <Attribute readonly="readonly" name="onLine" id="::NavigatorOnLine::onLine">
      <webidl>  readonly attribute boolean onLine;</webidl>
      <Type type="boolean"/>
    </Attribute>
  </Interface>
  <Interface name="NavigatorAbilities" id="::NavigatorAbilities">
    <webidl>[Supplemental, NoInterfaceObject]
interface NavigatorAbilities {
  void registerProtocolHandler(in DOMString scheme, in DOMString url, in DOMString title);
  void registerContentHandler(in DOMString mimeType, in DOMString url, in DOMString title);
  void yieldForStorageUpdates();
};</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="Supplemental"/>
      <ExtendedAttribute name="NoInterfaceObject"/>
    </ExtendedAttributeList>
    <Operation name="registerProtocolHandler" id="::NavigatorAbilities::registerProtocolHandler">
      <webidl>  void registerProtocolHandler(in DOMString scheme, in DOMString url, in DOMString title);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" name="scheme">
          <Type type="DOMString"/>
        </Argument>
        <Argument in="in" name="url">
          <Type type="DOMString"/>
        </Argument>
        <Argument in="in" name="title">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="registerContentHandler" id="::NavigatorAbilities::registerContentHandler">
      <webidl>  void registerContentHandler(in DOMString mimeType, in DOMString url, in DOMString title);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" name="mimeType">
          <Type type="DOMString"/>
        </Argument>
        <Argument in="in" name="url">
          <Type type="DOMString"/>
        </Argument>
        <Argument in="in" name="title">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="yieldForStorageUpdates" id="::NavigatorAbilities::yieldForStorageUpdates">
      <webidl>  void yieldForStorageUpdates();</webidl>
      <Type type="void"/>
      <ArgumentList/>
    </Operation>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="ApplicationCache" id="::ApplicationCache">
    <webidl>interface ApplicationCache {

  const unsigned short UNCACHED = 0;
  const unsigned short IDLE = 1;
  const unsigned short CHECKING = 2;
  const unsigned short DOWNLOADING = 3;
  const unsigned short UPDATEREADY = 4;
  const unsigned short OBSOLETE = 5;
  readonly attribute unsigned short status;

  void update();
  void swapCache();

           attribute <ref>Function</ref> onchecking;
           attribute <ref>Function</ref> onerror;
           attribute <ref>Function</ref> onnoupdate;
           attribute <ref>Function</ref> ondownloading;
           attribute <ref>Function</ref> onprogress;
           attribute <ref>Function</ref> onupdateready;
           attribute <ref>Function</ref> oncached;
           attribute <ref>Function</ref> onobsolete;
};</webidl>
    <Const name="UNCACHED" value="0" id="::ApplicationCache::UNCACHED">
      <webidl>  const unsigned short UNCACHED = 0;</webidl>
      <Type type="unsigned short"/>
    </Const>
    <Const name="IDLE" value="1" id="::ApplicationCache::IDLE">
      <webidl>  const unsigned short IDLE = 1;</webidl>
      <Type type="unsigned short"/>
    </Const>
    <Const name="CHECKING" value="2" id="::ApplicationCache::CHECKING">
      <webidl>  const unsigned short CHECKING = 2;</webidl>
      <Type type="unsigned short"/>
    </Const>
    <Const name="DOWNLOADING" value="3" id="::ApplicationCache::DOWNLOADING">
      <webidl>  const unsigned short DOWNLOADING = 3;</webidl>
      <Type type="unsigned short"/>
    </Const>
    <Const name="UPDATEREADY" value="4" id="::ApplicationCache::UPDATEREADY">
      <webidl>  const unsigned short UPDATEREADY = 4;</webidl>
      <Type type="unsigned short"/>
    </Const>
    <Const name="OBSOLETE" value="5" id="::ApplicationCache::OBSOLETE">
      <webidl>  const unsigned short OBSOLETE = 5;</webidl>
      <Type type="unsigned short"/>
    </Const>
    <Attribute readonly="readonly" name="status" id="::ApplicationCache::status">
      <webidl>  readonly attribute unsigned short status;</webidl>
      <Type type="unsigned short"/>
    </Attribute>
    <Operation name="update" id="::ApplicationCache::update">
      <webidl>  void update();</webidl>
      <Type type="void"/>
      <ArgumentList/>
    </Operation>
    <Operation name="swapCache" id="::ApplicationCache::swapCache">
      <webidl>  void swapCache();</webidl>
      <Type type="void"/>
      <ArgumentList/>
    </Operation>
    <Attribute name="onchecking" id="::ApplicationCache::onchecking">
      <webidl>           attribute <ref>Function</ref> onchecking;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onerror" id="::ApplicationCache::onerror">
      <webidl>           attribute <ref>Function</ref> onerror;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onnoupdate" id="::ApplicationCache::onnoupdate">
      <webidl>           attribute <ref>Function</ref> onnoupdate;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="ondownloading" id="::ApplicationCache::ondownloading">
      <webidl>           attribute <ref>Function</ref> ondownloading;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onprogress" id="::ApplicationCache::onprogress">
      <webidl>           attribute <ref>Function</ref> onprogress;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onupdateready" id="::ApplicationCache::onupdateready">
      <webidl>           attribute <ref>Function</ref> onupdateready;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="oncached" id="::ApplicationCache::oncached">
      <webidl>           attribute <ref>Function</ref> oncached;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onobsolete" id="::ApplicationCache::onobsolete">
      <webidl>           attribute <ref>Function</ref> onobsolete;</webidl>
      <Type name="Function"/>
    </Attribute>
  </Interface>
  <Implements name1="ApplicationCache" name2="EventTarget">
    <webidl><ref>ApplicationCache</ref> implements <ref>EventTarget</ref>;</webidl>
  </Implements>
</Definitions>


<Definitions>
  <Interface name="History" id="::History">
    <webidl>interface History {
  readonly attribute long length;
  void go(in optional long delta);
  void back();
  void forward();
  void pushState(in any data, in DOMString title, in optional DOMString url);
  void replaceState(in any data, in DOMString title, in optional DOMString url);
};</webidl>
    <Attribute readonly="readonly" name="length" id="::History::length">
      <webidl>  readonly attribute long length;</webidl>
      <Type type="long"/>
    </Attribute>
    <Operation name="go" id="::History::go">
      <webidl>  void go(in optional long delta);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" optional="optional" name="delta">
          <Type type="long"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="back" id="::History::back">
      <webidl>  void back();</webidl>
      <Type type="void"/>
      <ArgumentList/>
    </Operation>
    <Operation name="forward" id="::History::forward">
      <webidl>  void forward();</webidl>
      <Type type="void"/>
      <ArgumentList/>
    </Operation>
    <Operation name="pushState" id="::History::pushState">
      <webidl>  void pushState(in any data, in DOMString title, in optional DOMString url);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" name="data">
          <Type type="any"/>
        </Argument>
        <Argument in="in" name="title">
          <Type type="DOMString"/>
        </Argument>
        <Argument in="in" optional="optional" name="url">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="replaceState" id="::History::replaceState">
      <webidl>  void replaceState(in any data, in DOMString title, in optional DOMString url);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" name="data">
          <Type type="any"/>
        </Argument>
        <Argument in="in" name="title">
          <Type type="DOMString"/>
        </Argument>
        <Argument in="in" optional="optional" name="url">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="PopStateEvent" id="::PopStateEvent">
    <webidl>interface PopStateEvent : <ref>Event</ref> {
  readonly attribute any state;
  void initPopStateEvent(in DOMString typeArg, in boolean canBubbleArg, in boolean cancelableArg, in any stateArg);
};</webidl>
    <InterfaceInheritance>
      <Name name="Event"/>
    </InterfaceInheritance>
    <Attribute readonly="readonly" name="state" id="::PopStateEvent::state">
      <webidl>  readonly attribute any state;</webidl>
      <Type type="any"/>
    </Attribute>
    <Operation name="initPopStateEvent" id="::PopStateEvent::initPopStateEvent">
      <webidl>  void initPopStateEvent(in DOMString typeArg, in boolean canBubbleArg, in boolean cancelableArg, in any stateArg);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" name="typeArg">
          <Type type="DOMString"/>
        </Argument>
        <Argument in="in" name="canBubbleArg">
          <Type type="boolean"/>
        </Argument>
        <Argument in="in" name="cancelableArg">
          <Type type="boolean"/>
        </Argument>
        <Argument in="in" name="stateArg">
          <Type type="any"/>
        </Argument>
      </ArgumentList>
    </Operation>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="Location" id="::Location">
    <webidl>interface Location {
  stringifier readonly attribute DOMString href;
  void assign(in DOMString url);
  void replace(in DOMString url);
  void reload();

           attribute DOMString protocol;
           attribute DOMString host;
           attribute DOMString hostname;
           attribute DOMString port;
           attribute DOMString pathname;
           attribute DOMString search;
           attribute DOMString hash;

  DOMString resolveURL(in DOMString url);
};</webidl>
    <Attribute stringifier="stringifier" readonly="readonly" name="href" id="::Location::href">
      <webidl>  stringifier readonly attribute DOMString href;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Operation name="assign" id="::Location::assign">
      <webidl>  void assign(in DOMString url);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" name="url">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="replace" id="::Location::replace">
      <webidl>  void replace(in DOMString url);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" name="url">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="reload" id="::Location::reload">
      <webidl>  void reload();</webidl>
      <Type type="void"/>
      <ArgumentList/>
    </Operation>
    <Attribute name="protocol" id="::Location::protocol">
      <webidl>           attribute DOMString protocol;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="host" id="::Location::host">
      <webidl>           attribute DOMString host;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="hostname" id="::Location::hostname">
      <webidl>           attribute DOMString hostname;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="port" id="::Location::port">
      <webidl>           attribute DOMString port;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="pathname" id="::Location::pathname">
      <webidl>           attribute DOMString pathname;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="search" id="::Location::search">
      <webidl>           attribute DOMString search;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="hash" id="::Location::hash">
      <webidl>           attribute DOMString hash;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Operation name="resolveURL" id="::Location::resolveURL">
      <webidl>  DOMString resolveURL(in DOMString url);</webidl>
      <Type type="DOMString"/>
      <ArgumentList>
        <Argument in="in" name="url">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="BeforeUnloadEvent" id="::BeforeUnloadEvent">
    <webidl>interface BeforeUnloadEvent : <ref>Event</ref> {
           attribute DOMString returnValue;
};</webidl>
    <InterfaceInheritance>
      <Name name="Event"/>
    </InterfaceInheritance>
    <Attribute name="returnValue" id="::BeforeUnloadEvent::returnValue">
      <webidl>           attribute DOMString returnValue;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="Selection" id="::Selection">
    <webidl>interface Selection {
  readonly attribute <ref>Node</ref> anchorNode;
  readonly attribute long anchorOffset;
  readonly attribute <ref>Node</ref> focusNode;
  readonly attribute long focusOffset;
  readonly attribute boolean isCollapsed;
  void collapse(in <ref>Node</ref> parentNode, in long offset);
  void collapseToStart();
  void collapseToEnd();
  void selectAllChildren(in <ref>Node</ref> parentNode);
  void deleteFromDocument();
  readonly attribute long rangeCount;
  <ref>Range</ref> getRangeAt(in long index);
  void addRange(in <ref>Range</ref> range);
  void removeRange(in <ref>Range</ref> range);
  void removeAllRanges();
  stringifier DOMString ();
};</webidl>
    <Attribute readonly="readonly" name="anchorNode" id="::Selection::anchorNode">
      <webidl>  readonly attribute <ref>Node</ref> anchorNode;</webidl>
      <Type name="Node"/>
    </Attribute>
    <Attribute readonly="readonly" name="anchorOffset" id="::Selection::anchorOffset">
      <webidl>  readonly attribute long anchorOffset;</webidl>
      <Type type="long"/>
    </Attribute>
    <Attribute readonly="readonly" name="focusNode" id="::Selection::focusNode">
      <webidl>  readonly attribute <ref>Node</ref> focusNode;</webidl>
      <Type name="Node"/>
    </Attribute>
    <Attribute readonly="readonly" name="focusOffset" id="::Selection::focusOffset">
      <webidl>  readonly attribute long focusOffset;</webidl>
      <Type type="long"/>
    </Attribute>
    <Attribute readonly="readonly" name="isCollapsed" id="::Selection::isCollapsed">
      <webidl>  readonly attribute boolean isCollapsed;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Operation name="collapse" id="::Selection::collapse">
      <webidl>  void collapse(in <ref>Node</ref> parentNode, in long offset);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" name="parentNode">
          <Type name="Node"/>
        </Argument>
        <Argument in="in" name="offset">
          <Type type="long"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="collapseToStart" id="::Selection::collapseToStart">
      <webidl>  void collapseToStart();</webidl>
      <Type type="void"/>
      <ArgumentList/>
    </Operation>
    <Operation name="collapseToEnd" id="::Selection::collapseToEnd">
      <webidl>  void collapseToEnd();</webidl>
      <Type type="void"/>
      <ArgumentList/>
    </Operation>
    <Operation name="selectAllChildren" id="::Selection::selectAllChildren">
      <webidl>  void selectAllChildren(in <ref>Node</ref> parentNode);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" name="parentNode">
          <Type name="Node"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="deleteFromDocument" id="::Selection::deleteFromDocument">
      <webidl>  void deleteFromDocument();</webidl>
      <Type type="void"/>
      <ArgumentList/>
    </Operation>
    <Attribute readonly="readonly" name="rangeCount" id="::Selection::rangeCount">
      <webidl>  readonly attribute long rangeCount;</webidl>
      <Type type="long"/>
    </Attribute>
    <Operation name="getRangeAt" id="::Selection::getRangeAt">
      <webidl>  <ref>Range</ref> getRangeAt(in long index);</webidl>
      <Type name="Range"/>
      <ArgumentList>
        <Argument in="in" name="index">
          <Type type="long"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="addRange" id="::Selection::addRange">
      <webidl>  void addRange(in <ref>Range</ref> range);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" name="range">
          <Type name="Range"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="removeRange" id="::Selection::removeRange">
      <webidl>  void removeRange(in <ref>Range</ref> range);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" name="range">
          <Type name="Range"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="removeAllRanges" id="::Selection::removeAllRanges">
      <webidl>  void removeAllRanges();</webidl>
      <Type type="void"/>
      <ArgumentList/>
    </Operation>
    <Operation stringifier="stringifier">
      <webidl>  stringifier DOMString ();</webidl>
      <Type type="DOMString"/>
      <ArgumentList/>
    </Operation>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="DragEvent" id="::DragEvent">
    <webidl>interface DragEvent : <ref>MouseEvent</ref> {
  readonly attribute <ref>DataTransfer</ref> dataTransfer;

  void initDragEvent(in DOMString typeArg, in boolean canBubbleArg, in boolean cancelableArg, in <ref>AbstractView</ref> viewArg, in long detailArg, in long screenXArg, in long screenYArg, in long clientXArg, in long clientYArg, in boolean ctrlKeyArg, in boolean altKeyArg, in boolean shiftKeyArg, in boolean metaKeyArg, in unsigned short buttonArg, in <ref>EventTarget</ref> relatedTargetArg, in <ref>DataTransfer</ref> dataTransferArg);
};</webidl>
    <InterfaceInheritance>
      <Name name="MouseEvent"/>
    </InterfaceInheritance>
    <Attribute readonly="readonly" name="dataTransfer" id="::DragEvent::dataTransfer">
      <webidl>  readonly attribute <ref>DataTransfer</ref> dataTransfer;</webidl>
      <Type name="DataTransfer"/>
    </Attribute>
    <Operation name="initDragEvent" id="::DragEvent::initDragEvent">
      <webidl>  void initDragEvent(in DOMString typeArg, in boolean canBubbleArg, in boolean cancelableArg, in <ref>AbstractView</ref> viewArg, in long detailArg, in long screenXArg, in long screenYArg, in long clientXArg, in long clientYArg, in boolean ctrlKeyArg, in boolean altKeyArg, in boolean shiftKeyArg, in boolean metaKeyArg, in unsigned short buttonArg, in <ref>EventTarget</ref> relatedTargetArg, in <ref>DataTransfer</ref> dataTransferArg);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" name="typeArg">
          <Type type="DOMString"/>
        </Argument>
        <Argument in="in" name="canBubbleArg">
          <Type type="boolean"/>
        </Argument>
        <Argument in="in" name="cancelableArg">
          <Type type="boolean"/>
        </Argument>
        <Argument in="in" name="viewArg">
          <Type name="AbstractView"/>
        </Argument>
        <Argument in="in" name="detailArg">
          <Type type="long"/>
        </Argument>
        <Argument in="in" name="screenXArg">
          <Type type="long"/>
        </Argument>
        <Argument in="in" name="screenYArg">
          <Type type="long"/>
        </Argument>
        <Argument in="in" name="clientXArg">
          <Type type="long"/>
        </Argument>
        <Argument in="in" name="clientYArg">
          <Type type="long"/>
        </Argument>
        <Argument in="in" name="ctrlKeyArg">
          <Type type="boolean"/>
        </Argument>
        <Argument in="in" name="altKeyArg">
          <Type type="boolean"/>
        </Argument>
        <Argument in="in" name="shiftKeyArg">
          <Type type="boolean"/>
        </Argument>
        <Argument in="in" name="metaKeyArg">
          <Type type="boolean"/>
        </Argument>
        <Argument in="in" name="buttonArg">
          <Type type="unsigned short"/>
        </Argument>
        <Argument in="in" name="relatedTargetArg">
          <Type name="EventTarget"/>
        </Argument>
        <Argument in="in" name="dataTransferArg">
          <Type name="DataTransfer"/>
        </Argument>
      </ArgumentList>
    </Operation>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="DataTransfer" id="::DataTransfer">
    <webidl>interface DataTransfer {
           attribute DOMString dropEffect;
           attribute DOMString effectAllowed;

  readonly attribute <ref>DOMStringList</ref> types;
  void clearData(in optional DOMString format);
  void setData(in DOMString format, in DOMString data);
  DOMString getData(in DOMString format);
  readonly attribute <ref>FileList</ref> files;

  void setDragImage(in <ref>Element</ref> image, in long x, in long y);
  void addElement(in <ref>Element</ref> element);
};</webidl>
    <Attribute name="dropEffect" id="::DataTransfer::dropEffect">
      <webidl>           attribute DOMString dropEffect;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="effectAllowed" id="::DataTransfer::effectAllowed">
      <webidl>           attribute DOMString effectAllowed;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute readonly="readonly" name="types" id="::DataTransfer::types">
      <webidl>  readonly attribute <ref>DOMStringList</ref> types;</webidl>
      <Type name="DOMStringList"/>
    </Attribute>
    <Operation name="clearData" id="::DataTransfer::clearData">
      <webidl>  void clearData(in optional DOMString format);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" optional="optional" name="format">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="setData" id="::DataTransfer::setData">
      <webidl>  void setData(in DOMString format, in DOMString data);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" name="format">
          <Type type="DOMString"/>
        </Argument>
        <Argument in="in" name="data">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="getData" id="::DataTransfer::getData">
      <webidl>  DOMString getData(in DOMString format);</webidl>
      <Type type="DOMString"/>
      <ArgumentList>
        <Argument in="in" name="format">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Attribute readonly="readonly" name="files" id="::DataTransfer::files">
      <webidl>  readonly attribute <ref>FileList</ref> files;</webidl>
      <Type name="FileList"/>
    </Attribute>
    <Operation name="setDragImage" id="::DataTransfer::setDragImage">
      <webidl>  void setDragImage(in <ref>Element</ref> image, in long x, in long y);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" name="image">
          <Type name="Element"/>
        </Argument>
        <Argument in="in" name="x">
          <Type type="long"/>
        </Argument>
        <Argument in="in" name="y">
          <Type type="long"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="addElement" id="::DataTransfer::addElement">
      <webidl>  void addElement(in <ref>Element</ref> element);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" name="element">
          <Type name="Element"/>
        </Argument>
      </ArgumentList>
    </Operation>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="UndoManager" id="::UndoManager">
    <webidl>interface UndoManager {
  readonly attribute unsigned long length;
  getter any item(in unsigned long index);
  readonly attribute unsigned long position;
  unsigned long add(in any data, in DOMString title);
  void remove(in unsigned long index);
  void clearUndo();
  void clearRedo();
};</webidl>
    <Attribute readonly="readonly" name="length" id="::UndoManager::length">
      <webidl>  readonly attribute unsigned long length;</webidl>
      <Type type="unsigned long"/>
    </Attribute>
    <Operation getter="getter" name="item" id="::UndoManager::item">
      <webidl>  getter any item(in unsigned long index);</webidl>
      <Type type="any"/>
      <ArgumentList>
        <Argument in="in" name="index">
          <Type type="unsigned long"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Attribute readonly="readonly" name="position" id="::UndoManager::position">
      <webidl>  readonly attribute unsigned long position;</webidl>
      <Type type="unsigned long"/>
    </Attribute>
    <Operation name="add" id="::UndoManager::add">
      <webidl>  unsigned long add(in any data, in DOMString title);</webidl>
      <Type type="unsigned long"/>
      <ArgumentList>
        <Argument in="in" name="data">
          <Type type="any"/>
        </Argument>
        <Argument in="in" name="title">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="remove" id="::UndoManager::remove">
      <webidl>  void remove(in unsigned long index);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" name="index">
          <Type type="unsigned long"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="clearUndo" id="::UndoManager::clearUndo">
      <webidl>  void clearUndo();</webidl>
      <Type type="void"/>
      <ArgumentList/>
    </Operation>
    <Operation name="clearRedo" id="::UndoManager::clearRedo">
      <webidl>  void clearRedo();</webidl>
      <Type type="void"/>
      <ArgumentList/>
    </Operation>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="UndoManagerEvent" id="::UndoManagerEvent">
    <webidl>interface UndoManagerEvent : <ref>Event</ref> {
  readonly attribute any data;
  void initUndoManagerEvent(in DOMString typeArg, in boolean canBubbleArg, in boolean cancelableArg, in any dataArg);
};</webidl>
    <InterfaceInheritance>
      <Name name="Event"/>
    </InterfaceInheritance>
    <Attribute readonly="readonly" name="data" id="::UndoManagerEvent::data">
      <webidl>  readonly attribute any data;</webidl>
      <Type type="any"/>
    </Attribute>
    <Operation name="initUndoManagerEvent" id="::UndoManagerEvent::initUndoManagerEvent">
      <webidl>  void initUndoManagerEvent(in DOMString typeArg, in boolean canBubbleArg, in boolean cancelableArg, in any dataArg);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument in="in" name="typeArg">
          <Type type="DOMString"/>
        </Argument>
        <Argument in="in" name="canBubbleArg">
          <Type type="boolean"/>
        </Argument>
        <Argument in="in" name="cancelableArg">
          <Type type="boolean"/>
        </Argument>
        <Argument in="in" name="dataArg">
          <Type type="any"/>
        </Argument>
      </ArgumentList>
    </Operation>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLAppletElement" id="::HTMLAppletElement">
    <webidl>interface HTMLAppletElement : <ref>HTMLElement</ref> {
           attribute DOMString align;
           attribute DOMString alt;
           attribute DOMString archive;
           attribute DOMString code;
           attribute DOMString codeBase;
           attribute DOMString height;
           attribute unsigned long hspace;
           attribute DOMString name;
           attribute DOMString _object; 
           attribute unsigned long vspace;
           attribute DOMString width;
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute name="align" id="::HTMLAppletElement::align">
      <webidl>           attribute DOMString align;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="alt" id="::HTMLAppletElement::alt">
      <webidl>           attribute DOMString alt;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="archive" id="::HTMLAppletElement::archive">
      <webidl>           attribute DOMString archive;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="code" id="::HTMLAppletElement::code">
      <webidl>           attribute DOMString code;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="codeBase" id="::HTMLAppletElement::codeBase">
      <webidl>           attribute DOMString codeBase;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="height" id="::HTMLAppletElement::height">
      <webidl>           attribute DOMString height;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="hspace" id="::HTMLAppletElement::hspace">
      <webidl>           attribute unsigned long hspace;</webidl>
      <Type type="unsigned long"/>
    </Attribute>
    <Attribute name="name" id="::HTMLAppletElement::name">
      <webidl>           attribute DOMString name;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="_object" id="::HTMLAppletElement::_object">
      <webidl>           attribute DOMString _object;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="vspace" id="::HTMLAppletElement::vspace">
      <webidl>           attribute unsigned long vspace;</webidl>
      <Type type="unsigned long"/>
    </Attribute>
    <Attribute name="width" id="::HTMLAppletElement::width">
      <webidl>           attribute DOMString width;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLMarqueeElement" id="::HTMLMarqueeElement">
    <webidl>interface HTMLMarqueeElement : <ref>HTMLElement</ref> {
           attribute DOMString behavior;
           attribute DOMString bgColor;
           attribute DOMString direction;
           attribute DOMString height;
           attribute unsigned long hspace;
           attribute long loop;
           attribute unsigned long scrollAmount;
           attribute unsigned long scrollDelay;
           attribute DOMString trueSpeed;
           attribute unsigned long vspace;
           attribute DOMString width;

           attribute <ref>Function</ref> onbounce;
           attribute <ref>Function</ref> onfinish;
           attribute <ref>Function</ref> onstart;

  void start();
  void stop();
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute name="behavior" id="::HTMLMarqueeElement::behavior">
      <webidl>           attribute DOMString behavior;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="bgColor" id="::HTMLMarqueeElement::bgColor">
      <webidl>           attribute DOMString bgColor;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="direction" id="::HTMLMarqueeElement::direction">
      <webidl>           attribute DOMString direction;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="height" id="::HTMLMarqueeElement::height">
      <webidl>           attribute DOMString height;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="hspace" id="::HTMLMarqueeElement::hspace">
      <webidl>           attribute unsigned long hspace;</webidl>
      <Type type="unsigned long"/>
    </Attribute>
    <Attribute name="loop" id="::HTMLMarqueeElement::loop">
      <webidl>           attribute long loop;</webidl>
      <Type type="long"/>
    </Attribute>
    <Attribute name="scrollAmount" id="::HTMLMarqueeElement::scrollAmount">
      <webidl>           attribute unsigned long scrollAmount;</webidl>
      <Type type="unsigned long"/>
    </Attribute>
    <Attribute name="scrollDelay" id="::HTMLMarqueeElement::scrollDelay">
      <webidl>           attribute unsigned long scrollDelay;</webidl>
      <Type type="unsigned long"/>
    </Attribute>
    <Attribute name="trueSpeed" id="::HTMLMarqueeElement::trueSpeed">
      <webidl>           attribute DOMString trueSpeed;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="vspace" id="::HTMLMarqueeElement::vspace">
      <webidl>           attribute unsigned long vspace;</webidl>
      <Type type="unsigned long"/>
    </Attribute>
    <Attribute name="width" id="::HTMLMarqueeElement::width">
      <webidl>           attribute DOMString width;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="onbounce" id="::HTMLMarqueeElement::onbounce">
      <webidl>           attribute <ref>Function</ref> onbounce;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onfinish" id="::HTMLMarqueeElement::onfinish">
      <webidl>           attribute <ref>Function</ref> onfinish;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onstart" id="::HTMLMarqueeElement::onstart">
      <webidl>           attribute <ref>Function</ref> onstart;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Operation name="start" id="::HTMLMarqueeElement::start">
      <webidl>  void start();</webidl>
      <Type type="void"/>
      <ArgumentList/>
    </Operation>
    <Operation name="stop" id="::HTMLMarqueeElement::stop">
      <webidl>  void stop();</webidl>
      <Type type="void"/>
      <ArgumentList/>
    </Operation>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLFrameSetElement" id="::HTMLFrameSetElement">
    <webidl>interface HTMLFrameSetElement : <ref>HTMLElement</ref> {
           attribute DOMString cols;
           attribute DOMString rows;
           attribute <ref>Function</ref> onafterprint;
           attribute <ref>Function</ref> onbeforeprint;
           attribute <ref>Function</ref> onbeforeunload;
           attribute <ref>Function</ref> onblur;
           attribute <ref>Function</ref> onerror;
           attribute <ref>Function</ref> onfocus;
           attribute <ref>Function</ref> onhashchange;
           attribute <ref>Function</ref> onload;
           attribute <ref>Function</ref> onmessage;
           attribute <ref>Function</ref> onoffline;
           attribute <ref>Function</ref> ononline;
           attribute <ref>Function</ref> onpagehide;
           attribute <ref>Function</ref> onpageshow;
           attribute <ref>Function</ref> onpopstate;
           attribute <ref>Function</ref> onredo;
           attribute <ref>Function</ref> onresize;
           attribute <ref>Function</ref> onstorage;
           attribute <ref>Function</ref> onundo;
           attribute <ref>Function</ref> onunload;
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute name="cols" id="::HTMLFrameSetElement::cols">
      <webidl>           attribute DOMString cols;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="rows" id="::HTMLFrameSetElement::rows">
      <webidl>           attribute DOMString rows;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="onafterprint" id="::HTMLFrameSetElement::onafterprint">
      <webidl>           attribute <ref>Function</ref> onafterprint;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onbeforeprint" id="::HTMLFrameSetElement::onbeforeprint">
      <webidl>           attribute <ref>Function</ref> onbeforeprint;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onbeforeunload" id="::HTMLFrameSetElement::onbeforeunload">
      <webidl>           attribute <ref>Function</ref> onbeforeunload;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onblur" id="::HTMLFrameSetElement::onblur">
      <webidl>           attribute <ref>Function</ref> onblur;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onerror" id="::HTMLFrameSetElement::onerror">
      <webidl>           attribute <ref>Function</ref> onerror;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onfocus" id="::HTMLFrameSetElement::onfocus">
      <webidl>           attribute <ref>Function</ref> onfocus;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onhashchange" id="::HTMLFrameSetElement::onhashchange">
      <webidl>           attribute <ref>Function</ref> onhashchange;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onload" id="::HTMLFrameSetElement::onload">
      <webidl>           attribute <ref>Function</ref> onload;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onmessage" id="::HTMLFrameSetElement::onmessage">
      <webidl>           attribute <ref>Function</ref> onmessage;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onoffline" id="::HTMLFrameSetElement::onoffline">
      <webidl>           attribute <ref>Function</ref> onoffline;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="ononline" id="::HTMLFrameSetElement::ononline">
      <webidl>           attribute <ref>Function</ref> ononline;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onpagehide" id="::HTMLFrameSetElement::onpagehide">
      <webidl>           attribute <ref>Function</ref> onpagehide;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onpageshow" id="::HTMLFrameSetElement::onpageshow">
      <webidl>           attribute <ref>Function</ref> onpageshow;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onpopstate" id="::HTMLFrameSetElement::onpopstate">
      <webidl>           attribute <ref>Function</ref> onpopstate;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onredo" id="::HTMLFrameSetElement::onredo">
      <webidl>           attribute <ref>Function</ref> onredo;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onresize" id="::HTMLFrameSetElement::onresize">
      <webidl>           attribute <ref>Function</ref> onresize;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onstorage" id="::HTMLFrameSetElement::onstorage">
      <webidl>           attribute <ref>Function</ref> onstorage;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onundo" id="::HTMLFrameSetElement::onundo">
      <webidl>           attribute <ref>Function</ref> onundo;</webidl>
      <Type name="Function"/>
    </Attribute>
    <Attribute name="onunload" id="::HTMLFrameSetElement::onunload">
      <webidl>           attribute <ref>Function</ref> onunload;</webidl>
      <Type name="Function"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLFrameElement" id="::HTMLFrameElement">
    <webidl>interface HTMLFrameElement : <ref>HTMLElement</ref> {
           attribute DOMString frameBorder;
           attribute DOMString longDesc;
           attribute DOMString marginHeight;
           attribute DOMString marginWidth;
           attribute DOMString name;
           attribute boolean noResize;
           attribute DOMString scrolling;
           attribute DOMString src;
  readonly attribute <ref>Document</ref> contentDocument;
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute name="frameBorder" id="::HTMLFrameElement::frameBorder">
      <webidl>           attribute DOMString frameBorder;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="longDesc" id="::HTMLFrameElement::longDesc">
      <webidl>           attribute DOMString longDesc;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="marginHeight" id="::HTMLFrameElement::marginHeight">
      <webidl>           attribute DOMString marginHeight;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="marginWidth" id="::HTMLFrameElement::marginWidth">
      <webidl>           attribute DOMString marginWidth;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="name" id="::HTMLFrameElement::name">
      <webidl>           attribute DOMString name;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="noResize" id="::HTMLFrameElement::noResize">
      <webidl>           attribute boolean noResize;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute name="scrolling" id="::HTMLFrameElement::scrolling">
      <webidl>           attribute DOMString scrolling;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="src" id="::HTMLFrameElement::src">
      <webidl>           attribute DOMString src;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute readonly="readonly" name="contentDocument" id="::HTMLFrameElement::contentDocument">
      <webidl>  readonly attribute <ref>Document</ref> contentDocument;</webidl>
      <Type name="Document"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLAnchorElement" id="::HTMLAnchorElement">
    <webidl>[Supplemental]
interface HTMLAnchorElement {
           attribute DOMString coords;
           attribute DOMString charset;
           attribute DOMString name;
           attribute DOMString rev;
           attribute DOMString shape;
};</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="Supplemental"/>
    </ExtendedAttributeList>
    <Attribute name="coords" id="::HTMLAnchorElement::coords">
      <webidl>           attribute DOMString coords;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="charset" id="::HTMLAnchorElement::charset">
      <webidl>           attribute DOMString charset;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="name" id="::HTMLAnchorElement::name">
      <webidl>           attribute DOMString name;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="rev" id="::HTMLAnchorElement::rev">
      <webidl>           attribute DOMString rev;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="shape" id="::HTMLAnchorElement::shape">
      <webidl>           attribute DOMString shape;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLAreaElement" id="::HTMLAreaElement">
    <webidl>[Supplemental]
interface HTMLAreaElement {
           attribute boolean noHref;
};</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="Supplemental"/>
    </ExtendedAttributeList>
    <Attribute name="noHref" id="::HTMLAreaElement::noHref">
      <webidl>           attribute boolean noHref;</webidl>
      <Type type="boolean"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLBaseFontElement" id="::HTMLBaseFontElement">
    <webidl>interface HTMLBaseFontElement : <ref>HTMLElement</ref> {
           attribute DOMString color;
           attribute DOMString face;
           attribute long size; 
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute name="color" id="::HTMLBaseFontElement::color">
      <webidl>           attribute DOMString color;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="face" id="::HTMLBaseFontElement::face">
      <webidl>           attribute DOMString face;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="size" id="::HTMLBaseFontElement::size">
      <webidl>           attribute long size;</webidl>
      <Type type="long"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLBodyElement" id="::HTMLBodyElement">
    <webidl>[Supplemental]
interface HTMLBodyElement {
           attribute DOMString text;
           attribute DOMString bgColor;
           attribute DOMString background;
           attribute DOMString link;
           attribute DOMString vLink;
           attribute DOMString aLink;
};</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="Supplemental"/>
    </ExtendedAttributeList>
    <Attribute name="text" id="::HTMLBodyElement::text">
      <webidl>           attribute DOMString text;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="bgColor" id="::HTMLBodyElement::bgColor">
      <webidl>           attribute DOMString bgColor;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="background" id="::HTMLBodyElement::background">
      <webidl>           attribute DOMString background;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="link" id="::HTMLBodyElement::link">
      <webidl>           attribute DOMString link;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="vLink" id="::HTMLBodyElement::vLink">
      <webidl>           attribute DOMString vLink;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="aLink" id="::HTMLBodyElement::aLink">
      <webidl>           attribute DOMString aLink;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLBRElement" id="::HTMLBRElement">
    <webidl>[Supplemental]
interface HTMLBRElement {
           attribute DOMString clear;
};</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="Supplemental"/>
    </ExtendedAttributeList>
    <Attribute name="clear" id="::HTMLBRElement::clear">
      <webidl>           attribute DOMString clear;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLTableCaptionElement" id="::HTMLTableCaptionElement">
    <webidl>[Supplemental]
interface HTMLTableCaptionElement {
           attribute DOMString align;
};</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="Supplemental"/>
    </ExtendedAttributeList>
    <Attribute name="align" id="::HTMLTableCaptionElement::align">
      <webidl>           attribute DOMString align;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLTableColElement" id="::HTMLTableColElement">
    <webidl>[Supplemental]
interface HTMLTableColElement {
           attribute DOMString align;
           attribute DOMString ch;
           attribute DOMString chOff;
           attribute DOMString vAlign;
           attribute DOMString width;
};</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="Supplemental"/>
    </ExtendedAttributeList>
    <Attribute name="align" id="::HTMLTableColElement::align">
      <webidl>           attribute DOMString align;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="ch" id="::HTMLTableColElement::ch">
      <webidl>           attribute DOMString ch;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="chOff" id="::HTMLTableColElement::chOff">
      <webidl>           attribute DOMString chOff;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="vAlign" id="::HTMLTableColElement::vAlign">
      <webidl>           attribute DOMString vAlign;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="width" id="::HTMLTableColElement::width">
      <webidl>           attribute DOMString width;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLDirectoryElement" id="::HTMLDirectoryElement">
    <webidl>interface HTMLDirectoryElement : <ref>HTMLElement</ref> {
           attribute DOMString compact;
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute name="compact" id="::HTMLDirectoryElement::compact">
      <webidl>           attribute DOMString compact;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLDivElement" id="::HTMLDivElement">
    <webidl>[Supplemental]
interface HTMLDivElement {
           attribute DOMString align;
};</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="Supplemental"/>
    </ExtendedAttributeList>
    <Attribute name="align" id="::HTMLDivElement::align">
      <webidl>           attribute DOMString align;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLDListElement" id="::HTMLDListElement">
    <webidl>[Supplemental]
interface HTMLDListElement {
           attribute DOMString compact;
};</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="Supplemental"/>
    </ExtendedAttributeList>
    <Attribute name="compact" id="::HTMLDListElement::compact">
      <webidl>           attribute DOMString compact;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLEmbedElement" id="::HTMLEmbedElement">
    <webidl>[Supplemental]
interface HTMLEmbedElement {
           attribute DOMString align;
           attribute DOMString name;
};</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="Supplemental"/>
    </ExtendedAttributeList>
    <Attribute name="align" id="::HTMLEmbedElement::align">
      <webidl>           attribute DOMString align;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="name" id="::HTMLEmbedElement::name">
      <webidl>           attribute DOMString name;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLFontElement" id="::HTMLFontElement">
    <webidl>interface HTMLFontElement : <ref>HTMLElement</ref> {
           attribute DOMString color;
           attribute DOMString face;
           attribute DOMString size; 
};</webidl>
    <InterfaceInheritance>
      <Name name="HTMLElement"/>
    </InterfaceInheritance>
    <Attribute name="color" id="::HTMLFontElement::color">
      <webidl>           attribute DOMString color;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="face" id="::HTMLFontElement::face">
      <webidl>           attribute DOMString face;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="size" id="::HTMLFontElement::size">
      <webidl>           attribute DOMString size;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLHeadingElement" id="::HTMLHeadingElement">
    <webidl>[Supplemental]
interface HTMLHeadingElement {
           attribute DOMString align;
};</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="Supplemental"/>
    </ExtendedAttributeList>
    <Attribute name="align" id="::HTMLHeadingElement::align">
      <webidl>           attribute DOMString align;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLHeadElement" id="::HTMLHeadElement">
    <webidl>[Supplemental]
interface HTMLHeadElement {
           attribute DOMString profile;
};</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="Supplemental"/>
    </ExtendedAttributeList>
    <Attribute name="profile" id="::HTMLHeadElement::profile">
      <webidl>           attribute DOMString profile;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLHRElement" id="::HTMLHRElement">
    <webidl>[Supplemental]
interface HTMLHRElement {
           attribute DOMString align;
           attribute DOMString color;
           attribute boolean noShade;
           attribute DOMString size;
           attribute DOMString width;
};</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="Supplemental"/>
    </ExtendedAttributeList>
    <Attribute name="align" id="::HTMLHRElement::align">
      <webidl>           attribute DOMString align;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="color" id="::HTMLHRElement::color">
      <webidl>           attribute DOMString color;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="noShade" id="::HTMLHRElement::noShade">
      <webidl>           attribute boolean noShade;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute name="size" id="::HTMLHRElement::size">
      <webidl>           attribute DOMString size;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="width" id="::HTMLHRElement::width">
      <webidl>           attribute DOMString width;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLHtmlElement" id="::HTMLHtmlElement">
    <webidl>[Supplemental]
interface HTMLHtmlElement {
           attribute DOMString version;
};</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="Supplemental"/>
    </ExtendedAttributeList>
    <Attribute name="version" id="::HTMLHtmlElement::version">
      <webidl>           attribute DOMString version;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLIFrameElement" id="::HTMLIFrameElement">
    <webidl>[Supplemental]
interface HTMLIFrameElement {
           attribute DOMString align;
           attribute DOMString frameBorder;
           attribute DOMString longDesc;
           attribute DOMString marginHeight;
           attribute DOMString marginWidth;
           attribute DOMString scrolling;
};</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="Supplemental"/>
    </ExtendedAttributeList>
    <Attribute name="align" id="::HTMLIFrameElement::align">
      <webidl>           attribute DOMString align;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="frameBorder" id="::HTMLIFrameElement::frameBorder">
      <webidl>           attribute DOMString frameBorder;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="longDesc" id="::HTMLIFrameElement::longDesc">
      <webidl>           attribute DOMString longDesc;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="marginHeight" id="::HTMLIFrameElement::marginHeight">
      <webidl>           attribute DOMString marginHeight;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="marginWidth" id="::HTMLIFrameElement::marginWidth">
      <webidl>           attribute DOMString marginWidth;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="scrolling" id="::HTMLIFrameElement::scrolling">
      <webidl>           attribute DOMString scrolling;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLImageElement" id="::HTMLImageElement">
    <webidl>[Supplemental]
interface HTMLImageElement {
           attribute DOMString name;
           attribute DOMString align;
           attribute DOMString border;
           attribute unsigned long hspace;
           attribute DOMString longDesc;
           attribute unsigned long vspace;
};</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="Supplemental"/>
    </ExtendedAttributeList>
    <Attribute name="name" id="::HTMLImageElement::name">
      <webidl>           attribute DOMString name;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="align" id="::HTMLImageElement::align">
      <webidl>           attribute DOMString align;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="border" id="::HTMLImageElement::border">
      <webidl>           attribute DOMString border;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="hspace" id="::HTMLImageElement::hspace">
      <webidl>           attribute unsigned long hspace;</webidl>
      <Type type="unsigned long"/>
    </Attribute>
    <Attribute name="longDesc" id="::HTMLImageElement::longDesc">
      <webidl>           attribute DOMString longDesc;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="vspace" id="::HTMLImageElement::vspace">
      <webidl>           attribute unsigned long vspace;</webidl>
      <Type type="unsigned long"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLInputElement" id="::HTMLInputElement">
    <webidl>[Supplemental]
interface HTMLInputElement {
           attribute DOMString align;
           attribute DOMString useMap;
};</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="Supplemental"/>
    </ExtendedAttributeList>
    <Attribute name="align" id="::HTMLInputElement::align">
      <webidl>           attribute DOMString align;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="useMap" id="::HTMLInputElement::useMap">
      <webidl>           attribute DOMString useMap;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLLegendElement" id="::HTMLLegendElement">
    <webidl>[Supplemental]
interface HTMLLegendElement {
           attribute DOMString align;
};</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="Supplemental"/>
    </ExtendedAttributeList>
    <Attribute name="align" id="::HTMLLegendElement::align">
      <webidl>           attribute DOMString align;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLLIElement" id="::HTMLLIElement">
    <webidl>[Supplemental]
interface HTMLLIElement {
           attribute DOMString type;
};</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="Supplemental"/>
    </ExtendedAttributeList>
    <Attribute name="type" id="::HTMLLIElement::type">
      <webidl>           attribute DOMString type;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLLinkElement" id="::HTMLLinkElement">
    <webidl>[Supplemental]
interface HTMLLinkElement {
           attribute DOMString charset;
           attribute DOMString rev;
           attribute DOMString target;
};</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="Supplemental"/>
    </ExtendedAttributeList>
    <Attribute name="charset" id="::HTMLLinkElement::charset">
      <webidl>           attribute DOMString charset;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="rev" id="::HTMLLinkElement::rev">
      <webidl>           attribute DOMString rev;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="target" id="::HTMLLinkElement::target">
      <webidl>           attribute DOMString target;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLMenuElement" id="::HTMLMenuElement">
    <webidl>[Supplemental]
interface HTMLMenuElement {
           attribute DOMString compact;
};</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="Supplemental"/>
    </ExtendedAttributeList>
    <Attribute name="compact" id="::HTMLMenuElement::compact">
      <webidl>           attribute DOMString compact;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLMetaElement" id="::HTMLMetaElement">
    <webidl>[Supplemental]
interface HTMLMetaElement {
           attribute DOMString scheme;
};</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="Supplemental"/>
    </ExtendedAttributeList>
    <Attribute name="scheme" id="::HTMLMetaElement::scheme">
      <webidl>           attribute DOMString scheme;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLObjectElement" id="::HTMLObjectElement">
    <webidl>[Supplemental]
interface HTMLObjectElement {
           attribute DOMString align;
           attribute DOMString archive;
           attribute DOMString border;
           attribute DOMString code;
           attribute DOMString codeBase;
           attribute DOMString codeType;
           attribute boolean declare;
           attribute unsigned long hspace;
           attribute DOMString standby;
           attribute unsigned long vspace;
};</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="Supplemental"/>
    </ExtendedAttributeList>
    <Attribute name="align" id="::HTMLObjectElement::align">
      <webidl>           attribute DOMString align;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="archive" id="::HTMLObjectElement::archive">
      <webidl>           attribute DOMString archive;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="border" id="::HTMLObjectElement::border">
      <webidl>           attribute DOMString border;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="code" id="::HTMLObjectElement::code">
      <webidl>           attribute DOMString code;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="codeBase" id="::HTMLObjectElement::codeBase">
      <webidl>           attribute DOMString codeBase;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="codeType" id="::HTMLObjectElement::codeType">
      <webidl>           attribute DOMString codeType;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="declare" id="::HTMLObjectElement::declare">
      <webidl>           attribute boolean declare;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute name="hspace" id="::HTMLObjectElement::hspace">
      <webidl>           attribute unsigned long hspace;</webidl>
      <Type type="unsigned long"/>
    </Attribute>
    <Attribute name="standby" id="::HTMLObjectElement::standby">
      <webidl>           attribute DOMString standby;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="vspace" id="::HTMLObjectElement::vspace">
      <webidl>           attribute unsigned long vspace;</webidl>
      <Type type="unsigned long"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLOListElement" id="::HTMLOListElement">
    <webidl>[Supplemental]
interface HTMLOListElement {
           attribute DOMString compact;
           attribute DOMString type;
};</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="Supplemental"/>
    </ExtendedAttributeList>
    <Attribute name="compact" id="::HTMLOListElement::compact">
      <webidl>           attribute DOMString compact;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="type" id="::HTMLOListElement::type">
      <webidl>           attribute DOMString type;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLParagraphElement" id="::HTMLParagraphElement">
    <webidl>[Supplemental]
interface HTMLParagraphElement {
           attribute DOMString align;
};</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="Supplemental"/>
    </ExtendedAttributeList>
    <Attribute name="align" id="::HTMLParagraphElement::align">
      <webidl>           attribute DOMString align;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLParamElement" id="::HTMLParamElement">
    <webidl>[Supplemental]
interface HTMLParamElement {
           attribute DOMString type;
           attribute DOMString valueType;
};</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="Supplemental"/>
    </ExtendedAttributeList>
    <Attribute name="type" id="::HTMLParamElement::type">
      <webidl>           attribute DOMString type;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="valueType" id="::HTMLParamElement::valueType">
      <webidl>           attribute DOMString valueType;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLPreElement" id="::HTMLPreElement">
    <webidl>[Supplemental]
interface HTMLPreElement {
           attribute unsigned long width;
};</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="Supplemental"/>
    </ExtendedAttributeList>
    <Attribute name="width" id="::HTMLPreElement::width">
      <webidl>           attribute unsigned long width;</webidl>
      <Type type="unsigned long"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLScriptElement" id="::HTMLScriptElement">
    <webidl>[Supplemental]
interface HTMLScriptElement {
           attribute DOMString event;
           attribute DOMString htmlFor;
};</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="Supplemental"/>
    </ExtendedAttributeList>
    <Attribute name="event" id="::HTMLScriptElement::event">
      <webidl>           attribute DOMString event;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="htmlFor" id="::HTMLScriptElement::htmlFor">
      <webidl>           attribute DOMString htmlFor;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLTableElement" id="::HTMLTableElement">
    <webidl>[Supplemental]
interface HTMLTableElement {
           attribute DOMString align;
           attribute DOMString bgColor;
           attribute DOMString border;
           attribute DOMString cellPadding;
           attribute DOMString cellSpacing;
           attribute DOMString frame;
           attribute DOMString rules;
           attribute DOMString width;
};</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="Supplemental"/>
    </ExtendedAttributeList>
    <Attribute name="align" id="::HTMLTableElement::align">
      <webidl>           attribute DOMString align;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="bgColor" id="::HTMLTableElement::bgColor">
      <webidl>           attribute DOMString bgColor;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="border" id="::HTMLTableElement::border">
      <webidl>           attribute DOMString border;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="cellPadding" id="::HTMLTableElement::cellPadding">
      <webidl>           attribute DOMString cellPadding;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="cellSpacing" id="::HTMLTableElement::cellSpacing">
      <webidl>           attribute DOMString cellSpacing;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="frame" id="::HTMLTableElement::frame">
      <webidl>           attribute DOMString frame;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="rules" id="::HTMLTableElement::rules">
      <webidl>           attribute DOMString rules;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="width" id="::HTMLTableElement::width">
      <webidl>           attribute DOMString width;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLTableSectionElement" id="::HTMLTableSectionElement">
    <webidl>[Supplemental]
interface HTMLTableSectionElement {
           attribute DOMString align;
           attribute DOMString ch;
           attribute DOMString chOff;
           attribute DOMString vAlign;
};</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="Supplemental"/>
    </ExtendedAttributeList>
    <Attribute name="align" id="::HTMLTableSectionElement::align">
      <webidl>           attribute DOMString align;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="ch" id="::HTMLTableSectionElement::ch">
      <webidl>           attribute DOMString ch;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="chOff" id="::HTMLTableSectionElement::chOff">
      <webidl>           attribute DOMString chOff;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="vAlign" id="::HTMLTableSectionElement::vAlign">
      <webidl>           attribute DOMString vAlign;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLTableCellElement" id="::HTMLTableCellElement">
    <webidl>[Supplemental]
interface HTMLTableCellElement {
           attribute DOMString abbr;
           attribute DOMString align;
           attribute DOMString axis;
           attribute DOMString bgColor;
           attribute DOMString ch;
           attribute DOMString chOff;
           attribute DOMString height;
           attribute boolean noWrap;
           attribute DOMString vAlign;
           attribute DOMString width;
};</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="Supplemental"/>
    </ExtendedAttributeList>
    <Attribute name="abbr" id="::HTMLTableCellElement::abbr">
      <webidl>           attribute DOMString abbr;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="align" id="::HTMLTableCellElement::align">
      <webidl>           attribute DOMString align;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="axis" id="::HTMLTableCellElement::axis">
      <webidl>           attribute DOMString axis;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="bgColor" id="::HTMLTableCellElement::bgColor">
      <webidl>           attribute DOMString bgColor;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="ch" id="::HTMLTableCellElement::ch">
      <webidl>           attribute DOMString ch;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="chOff" id="::HTMLTableCellElement::chOff">
      <webidl>           attribute DOMString chOff;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="height" id="::HTMLTableCellElement::height">
      <webidl>           attribute DOMString height;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="noWrap" id="::HTMLTableCellElement::noWrap">
      <webidl>           attribute boolean noWrap;</webidl>
      <Type type="boolean"/>
    </Attribute>
    <Attribute name="vAlign" id="::HTMLTableCellElement::vAlign">
      <webidl>           attribute DOMString vAlign;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="width" id="::HTMLTableCellElement::width">
      <webidl>           attribute DOMString width;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLTableRowElement" id="::HTMLTableRowElement">
    <webidl>[Supplemental]
interface HTMLTableRowElement {
           attribute DOMString align;
           attribute DOMString bgColor;
           attribute DOMString ch;
           attribute DOMString chOff;
           attribute DOMString vAlign;
};</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="Supplemental"/>
    </ExtendedAttributeList>
    <Attribute name="align" id="::HTMLTableRowElement::align">
      <webidl>           attribute DOMString align;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="bgColor" id="::HTMLTableRowElement::bgColor">
      <webidl>           attribute DOMString bgColor;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="ch" id="::HTMLTableRowElement::ch">
      <webidl>           attribute DOMString ch;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="chOff" id="::HTMLTableRowElement::chOff">
      <webidl>           attribute DOMString chOff;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="vAlign" id="::HTMLTableRowElement::vAlign">
      <webidl>           attribute DOMString vAlign;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLUListElement" id="::HTMLUListElement">
    <webidl>[Supplemental]
interface HTMLUListElement {
           attribute DOMString compact;
           attribute DOMString type;
};</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="Supplemental"/>
    </ExtendedAttributeList>
    <Attribute name="compact" id="::HTMLUListElement::compact">
      <webidl>           attribute DOMString compact;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="type" id="::HTMLUListElement::type">
      <webidl>           attribute DOMString type;</webidl>
      <Type type="DOMString"/>
    </Attribute>
  </Interface>
</Definitions>


<Definitions>
  <Interface name="HTMLDocument" id="::HTMLDocument">
    <webidl>[Supplemental]
interface HTMLDocument {
           attribute DOMString fgColor;
           attribute DOMString bgColor;
           attribute DOMString linkColor;
           attribute DOMString vlinkColor;
           attribute DOMString alinkColor;

  readonly attribute <ref>HTMLCollection</ref> anchors;
  readonly attribute <ref>HTMLCollection</ref> applets;

  void clear();

  readonly attribute <ref>HTMLAllCollection</ref> all;
};</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="Supplemental"/>
    </ExtendedAttributeList>
    <Attribute name="fgColor" id="::HTMLDocument::fgColor">
      <webidl>           attribute DOMString fgColor;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="bgColor" id="::HTMLDocument::bgColor">
      <webidl>           attribute DOMString bgColor;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="linkColor" id="::HTMLDocument::linkColor">
      <webidl>           attribute DOMString linkColor;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="vlinkColor" id="::HTMLDocument::vlinkColor">
      <webidl>           attribute DOMString vlinkColor;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute name="alinkColor" id="::HTMLDocument::alinkColor">
      <webidl>           attribute DOMString alinkColor;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute readonly="readonly" name="anchors" id="::HTMLDocument::anchors">
      <webidl>  readonly attribute <ref>HTMLCollection</ref> anchors;</webidl>
      <Type name="HTMLCollection"/>
    </Attribute>
    <Attribute readonly="readonly" name="applets" id="::HTMLDocument::applets">
      <webidl>  readonly attribute <ref>HTMLCollection</ref> applets;</webidl>
      <Type name="HTMLCollection"/>
    </Attribute>
    <Operation name="clear" id="::HTMLDocument::clear">
      <webidl>  void clear();</webidl>
      <Type type="void"/>
      <ArgumentList/>
    </Operation>
    <Attribute readonly="readonly" name="all" id="::HTMLDocument::all">
      <webidl>  readonly attribute <ref>HTMLAllCollection</ref> all;</webidl>
      <Type name="HTMLAllCollection"/>
    </Attribute>
  </Interface>
</Definitions>

</Definitions>
