<Definitions>
  <webidl>    interface FileList {
      getter <ref>File</ref>? item(unsigned long index);
      readonly attribute unsigned long length;
    };
    

    [Constructor, 
     Constructor(sequence&lt;(<ref>ArrayBuffer</ref> or <ref>ArrayBufferView</ref> or <ref>Blob</ref> or DOMString)> blobParts, optional <ref>BlobPropertyBag</ref> options)] 
    interface Blob {
      
      readonly attribute unsigned long long size;
      readonly attribute DOMString type;
      
      
      <ref>Blob</ref> slice(optional long long start,
                 optional long long end,
                 optional DOMString contentType);
      void close(); 
    
    };

    dictionary BlobPropertyBag {
                
      DOMString type = &quot;&quot;;
        
    };
    

interface File : <ref>Blob</ref> {

  readonly attribute DOMString name;
  readonly attribute Date lastModifiedDate;

};
          


        [Constructor]
        interface FileReader: <ref>EventTarget</ref> {

          void readAsArrayBuffer(<ref>Blob</ref> blob);
          void readAsText(<ref>Blob</ref> blob, optional DOMString label);
          void readAsDataURL(<ref>Blob</ref> blob);

          void abort();

          const unsigned short EMPTY = 0;
          const unsigned short LOADING = 1;
          const unsigned short DONE = 2;


          readonly attribute unsigned short readyState;

          readonly attribute (DOMString or <ref>ArrayBuffer</ref>)? result;

          readonly attribute <ref>DOMError</ref>? error;

          attribute <ref>EventHandler</ref> onloadstart;
          attribute <ref>EventHandler</ref> onprogress;
          attribute <ref>EventHandler</ref> onload;
          attribute <ref>EventHandler</ref> onabort;
          attribute <ref>EventHandler</ref> onerror;
          attribute <ref>EventHandler</ref> onloadend;

        };
          


        [Constructor]
        interface FileReaderSync {


          <ref>ArrayBuffer</ref> readAsArrayBuffer(<ref>Blob</ref> blob); 
          DOMString readAsText(<ref>Blob</ref> blob, optional DOMString label);
          DOMString readAsDataURL(<ref>Blob</ref> blob);
        };
        

        partial interface URL {

            static DOMString? createObjectURL(<ref>Blob</ref> blob, optional <ref>objectURLOptions</ref> options);
            static void revokeObjectURL(DOMString url);
        };
        
        dictionary objectURLOptions
        {
                boolean autoRevoke = true;

        };</webidl>
  <Interface name="FileList" id="::FileList">
    <webidl>    interface FileList {
      getter <ref>File</ref>? item(unsigned long index);
      readonly attribute unsigned long length;
    };</webidl>
    <Operation getter="getter" name="item" id="::FileList::item">
      <webidl>      getter <ref>File</ref>? item(unsigned long index);</webidl>
      <Type name="File" nullable="nullable"/>
      <ArgumentList>
        <Argument name="index">
          <Type type="unsigned long"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Attribute readonly="readonly" name="length" id="::FileList::length">
      <webidl>      readonly attribute unsigned long length;</webidl>
      <Type type="unsigned long"/>
    </Attribute>
  </Interface>
  <Interface name="Blob" id="::Blob">
    <webidl>    [Constructor, 
     Constructor(sequence&lt;(<ref>ArrayBuffer</ref> or <ref>ArrayBufferView</ref> or <ref>Blob</ref> or DOMString)> blobParts, optional <ref>BlobPropertyBag</ref> options)] 
    interface Blob {
      
      readonly attribute unsigned long long size;
      readonly attribute DOMString type;
      
      
      <ref>Blob</ref> slice(optional long long start,
                 optional long long end,
                 optional DOMString contentType);
      void close(); 
    
    };</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="Constructor">
        <webidl>Constructor</webidl>
      </ExtendedAttribute>
      <ExtendedAttribute name="Constructor">
        <webidl>     Constructor(sequence&lt;(<ref>ArrayBuffer</ref> or <ref>ArrayBufferView</ref> or <ref>Blob</ref> or DOMString)> blobParts, optional <ref>BlobPropertyBag</ref> options)</webidl>
        <ArgumentList>
          <Argument name="blobParts">
            <Type type="sequence">
              <Type type="union">
                <Type name="ArrayBuffer"/>
                <Type name="ArrayBufferView"/>
                <Type name="Blob"/>
                <Type type="DOMString"/>
              </Type>
            </Type>
          </Argument>
          <Argument optional="optional" name="options">
            <Type name="BlobPropertyBag"/>
          </Argument>
        </ArgumentList>
      </ExtendedAttribute>
    </ExtendedAttributeList>
    <Attribute readonly="readonly" name="size" id="::Blob::size">
      <webidl>      readonly attribute unsigned long long size;</webidl>
      <Type type="unsigned long long"/>
    </Attribute>
    <Attribute readonly="readonly" name="type" id="::Blob::type">
      <webidl>      readonly attribute DOMString type;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Operation name="slice" id="::Blob::slice">
      <webidl>      <ref>Blob</ref> slice(optional long long start,
                 optional long long end,
                 optional DOMString contentType);</webidl>
      <Type name="Blob"/>
      <ArgumentList>
        <Argument optional="optional" name="start">
          <Type type="long long"/>
        </Argument>
        <Argument optional="optional" name="end">
          <Type type="long long"/>
        </Argument>
        <Argument optional="optional" name="contentType">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="close" id="::Blob::close">
      <webidl>      void close();</webidl>
      <Type type="void"/>
      <ArgumentList/>
    </Operation>
  </Interface>
  <Dictionary name="BlobPropertyBag" id="::BlobPropertyBag">
    <webidl>    dictionary BlobPropertyBag {
                
      DOMString type = &quot;&quot;;
        
    };</webidl>
    <DictionaryMember name="type" stringvalue="" id="::BlobPropertyBag::type">
      <webidl>      DOMString type = &quot;&quot;;</webidl>
      <Type type="DOMString"/>
    </DictionaryMember>
  </Dictionary>
  <Interface name="File" id="::File">
    <webidl>interface File : <ref>Blob</ref> {

  readonly attribute DOMString name;
  readonly attribute Date lastModifiedDate;

};</webidl>
    <InterfaceInheritance>
      <Name name="Blob"/>
    </InterfaceInheritance>
    <Attribute readonly="readonly" name="name" id="::File::name">
      <webidl>  readonly attribute DOMString name;</webidl>
      <Type type="DOMString"/>
    </Attribute>
    <Attribute readonly="readonly" name="lastModifiedDate" id="::File::lastModifiedDate">
      <webidl>  readonly attribute Date lastModifiedDate;</webidl>
      <Type type="Date"/>
    </Attribute>
  </Interface>
  <Interface name="FileReader" id="::FileReader">
    <webidl>        [Constructor]
        interface FileReader: <ref>EventTarget</ref> {

          void readAsArrayBuffer(<ref>Blob</ref> blob);
          void readAsText(<ref>Blob</ref> blob, optional DOMString label);
          void readAsDataURL(<ref>Blob</ref> blob);

          void abort();

          const unsigned short EMPTY = 0;
          const unsigned short LOADING = 1;
          const unsigned short DONE = 2;


          readonly attribute unsigned short readyState;

          readonly attribute (DOMString or <ref>ArrayBuffer</ref>)? result;

          readonly attribute <ref>DOMError</ref>? error;

          attribute <ref>EventHandler</ref> onloadstart;
          attribute <ref>EventHandler</ref> onprogress;
          attribute <ref>EventHandler</ref> onload;
          attribute <ref>EventHandler</ref> onabort;
          attribute <ref>EventHandler</ref> onerror;
          attribute <ref>EventHandler</ref> onloadend;

        };</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="Constructor">
        <webidl>Constructor</webidl>
      </ExtendedAttribute>
    </ExtendedAttributeList>
    <InterfaceInheritance>
      <Name name="EventTarget"/>
    </InterfaceInheritance>
    <Operation name="readAsArrayBuffer" id="::FileReader::readAsArrayBuffer">
      <webidl>          void readAsArrayBuffer(<ref>Blob</ref> blob);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument name="blob">
          <Type name="Blob"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="readAsText" id="::FileReader::readAsText">
      <webidl>          void readAsText(<ref>Blob</ref> blob, optional DOMString label);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument name="blob">
          <Type name="Blob"/>
        </Argument>
        <Argument optional="optional" name="label">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="readAsDataURL" id="::FileReader::readAsDataURL">
      <webidl>          void readAsDataURL(<ref>Blob</ref> blob);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument name="blob">
          <Type name="Blob"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="abort" id="::FileReader::abort">
      <webidl>          void abort();</webidl>
      <Type type="void"/>
      <ArgumentList/>
    </Operation>
    <Const name="EMPTY" value="0" id="::FileReader::EMPTY">
      <webidl>          const unsigned short EMPTY = 0;</webidl>
      <Type type="unsigned short"/>
    </Const>
    <Const name="LOADING" value="1" id="::FileReader::LOADING">
      <webidl>          const unsigned short LOADING = 1;</webidl>
      <Type type="unsigned short"/>
    </Const>
    <Const name="DONE" value="2" id="::FileReader::DONE">
      <webidl>          const unsigned short DONE = 2;</webidl>
      <Type type="unsigned short"/>
    </Const>
    <Attribute readonly="readonly" name="readyState" id="::FileReader::readyState">
      <webidl>          readonly attribute unsigned short readyState;</webidl>
      <Type type="unsigned short"/>
    </Attribute>
    <Attribute readonly="readonly" name="result" id="::FileReader::result">
      <webidl>          readonly attribute (DOMString or <ref>ArrayBuffer</ref>)? result;</webidl>
      <Type type="union" nullable="nullable">
        <Type type="DOMString"/>
        <Type name="ArrayBuffer"/>
      </Type>
    </Attribute>
    <Attribute readonly="readonly" name="error" id="::FileReader::error">
      <webidl>          readonly attribute <ref>DOMError</ref>? error;</webidl>
      <Type name="DOMError" nullable="nullable"/>
    </Attribute>
    <Attribute name="onloadstart" id="::FileReader::onloadstart">
      <webidl>          attribute <ref>EventHandler</ref> onloadstart;</webidl>
      <Type name="EventHandler"/>
    </Attribute>
    <Attribute name="onprogress" id="::FileReader::onprogress">
      <webidl>          attribute <ref>EventHandler</ref> onprogress;</webidl>
      <Type name="EventHandler"/>
    </Attribute>
    <Attribute name="onload" id="::FileReader::onload">
      <webidl>          attribute <ref>EventHandler</ref> onload;</webidl>
      <Type name="EventHandler"/>
    </Attribute>
    <Attribute name="onabort" id="::FileReader::onabort">
      <webidl>          attribute <ref>EventHandler</ref> onabort;</webidl>
      <Type name="EventHandler"/>
    </Attribute>
    <Attribute name="onerror" id="::FileReader::onerror">
      <webidl>          attribute <ref>EventHandler</ref> onerror;</webidl>
      <Type name="EventHandler"/>
    </Attribute>
    <Attribute name="onloadend" id="::FileReader::onloadend">
      <webidl>          attribute <ref>EventHandler</ref> onloadend;</webidl>
      <Type name="EventHandler"/>
    </Attribute>
  </Interface>
  <Interface name="FileReaderSync" id="::FileReaderSync">
    <webidl>        [Constructor]
        interface FileReaderSync {


          <ref>ArrayBuffer</ref> readAsArrayBuffer(<ref>Blob</ref> blob); 
          DOMString readAsText(<ref>Blob</ref> blob, optional DOMString label);
          DOMString readAsDataURL(<ref>Blob</ref> blob);
        };</webidl>
    <ExtendedAttributeList>
      <ExtendedAttribute name="Constructor">
        <webidl>Constructor</webidl>
      </ExtendedAttribute>
    </ExtendedAttributeList>
    <Operation name="readAsArrayBuffer" id="::FileReaderSync::readAsArrayBuffer">
      <webidl>          <ref>ArrayBuffer</ref> readAsArrayBuffer(<ref>Blob</ref> blob);</webidl>
      <Type name="ArrayBuffer"/>
      <ArgumentList>
        <Argument name="blob">
          <Type name="Blob"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="readAsText" id="::FileReaderSync::readAsText">
      <webidl>          DOMString readAsText(<ref>Blob</ref> blob, optional DOMString label);</webidl>
      <Type type="DOMString"/>
      <ArgumentList>
        <Argument name="blob">
          <Type name="Blob"/>
        </Argument>
        <Argument optional="optional" name="label">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation name="readAsDataURL" id="::FileReaderSync::readAsDataURL">
      <webidl>          DOMString readAsDataURL(<ref>Blob</ref> blob);</webidl>
      <Type type="DOMString"/>
      <ArgumentList>
        <Argument name="blob">
          <Type name="Blob"/>
        </Argument>
      </ArgumentList>
    </Operation>
  </Interface>
  <Interface name="URL" partial="partial" id="::URL">
    <webidl>        partial interface URL {

            static DOMString? createObjectURL(<ref>Blob</ref> blob, optional <ref>objectURLOptions</ref> options);
            static void revokeObjectURL(DOMString url);
        };</webidl>
    <Operation static="static" name="createObjectURL" id="::URL::createObjectURL">
      <webidl>            static DOMString? createObjectURL(<ref>Blob</ref> blob, optional <ref>objectURLOptions</ref> options);</webidl>
      <Type type="DOMString" nullable="nullable"/>
      <ArgumentList>
        <Argument name="blob">
          <Type name="Blob"/>
        </Argument>
        <Argument optional="optional" name="options">
          <Type name="objectURLOptions"/>
        </Argument>
      </ArgumentList>
    </Operation>
    <Operation static="static" name="revokeObjectURL" id="::URL::revokeObjectURL">
      <webidl>            static void revokeObjectURL(DOMString url);</webidl>
      <Type type="void"/>
      <ArgumentList>
        <Argument name="url">
          <Type type="DOMString"/>
        </Argument>
      </ArgumentList>
    </Operation>
  </Interface>
  <Dictionary name="objectURLOptions" id="::objectURLOptions">
    <webidl>        dictionary objectURLOptions
        {
                boolean autoRevoke = true;

        };</webidl>
    <DictionaryMember name="autoRevoke" value="true" id="::objectURLOptions::autoRevoke">
      <webidl>                boolean autoRevoke = true;</webidl>
      <Type type="boolean"/>
    </DictionaryMember>
  </Dictionary>
</Definitions>
