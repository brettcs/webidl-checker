<Module>
<Definitions>
  <Module name="css" id="::css">
    <webidl>module css {

  typedef <ref>dom::Document</ref> Document;
  typedef <ref>dom::Element</ref> Element;
  typedef <ref>dom::DOMImplementation</ref> DOMImplementation;
  typedef <ref>dom::DOMException</ref> DOMException;
  typedef <ref>views::AbstractView</ref> AbstractView;

  interface CSSRuleList {
    readonly attribute unsigned long length;
    getter <ref>CSSRule</ref> item(in unsigned long index);
  };

  [PrototypeRoot]
  interface CSSRule {

    const unsigned short      UNKNOWN_RULE                   = 0;
    const unsigned short      STYLE_RULE                     = 1;
    const unsigned short      CHARSET_RULE                   = 2;
    const unsigned short      IMPORT_RULE                    = 3;
    const unsigned short      MEDIA_RULE                     = 4;
    const unsigned short      FONT_FACE_RULE                 = 5;
    const unsigned short      PAGE_RULE                      = 6;

    readonly attribute unsigned short   type;
             attribute DOMString        cssText setraises(<ref>DOMException</ref>);

    readonly attribute <ref>CSSStyleSheet</ref>    parentStyleSheet;
    readonly attribute <ref>CSSRule</ref>          parentRule;
  };

  interface CSSStyleRule : <ref>CSSRule</ref> {
             attribute DOMString        selectorText setraises(<ref>DOMException</ref>);

    readonly attribute <ref>CSSStyleDeclaration</ref>  style;
  };

  interface CSSMediaRule : <ref>CSSRule</ref> {
    readonly attribute <ref>stylesheets::MediaList</ref>  media;
    readonly attribute <ref>CSSRuleList</ref>      cssRules;
    unsigned long      insertRule(in DOMString rule, 
                                  in unsigned long index)
                                        raises(<ref>DOMException</ref>);
    void               deleteRule(in unsigned long index)
                                        raises(<ref>DOMException</ref>);
  };

  interface CSSFontFaceRule : <ref>CSSRule</ref> {
    readonly attribute <ref>CSSStyleDeclaration</ref>  style;
  };

  interface CSSPageRule : <ref>CSSRule</ref> {
             attribute DOMString        selectorText setraises(<ref>DOMException</ref>);

    readonly attribute <ref>CSSStyleDeclaration</ref>  style;
  };

  interface CSSImportRule : <ref>CSSRule</ref> {
    readonly attribute DOMString        href;
    readonly attribute <ref>stylesheets::MediaList</ref>  media;
    readonly attribute <ref>CSSStyleSheet</ref>    styleSheet;
  };

  interface CSSCharsetRule : <ref>CSSRule</ref> {
             attribute DOMString        encoding setraises(<ref>DOMException</ref>);

  };

  interface CSSUnknownRule : <ref>CSSRule</ref> {
  };

  interface CSSStyleDeclaration {
             attribute DOMString        cssText setraises(<ref>DOMException</ref>);

    DOMString          getPropertyValue(in DOMString propertyName);
    <ref>CSSValue</ref>           getPropertyCSSValue(in DOMString propertyName);
    DOMString          removeProperty(in DOMString propertyName)
                                        raises(<ref>DOMException</ref>);
    DOMString          getPropertyPriority(in DOMString propertyName);
    void               setProperty(in DOMString propertyName, 
                                   in DOMString value, 
                                   in DOMString? priority)
                                        raises(<ref>DOMException</ref>);
    readonly attribute unsigned long    length;
    getter DOMString item(in unsigned long index);
    readonly attribute <ref>CSSRule</ref>          parentRule;
  };

  [PrototypeRoot]
  interface CSSValue {

    const unsigned short      CSS_INHERIT                    = 0;
    const unsigned short      CSS_PRIMITIVE_VALUE            = 1;
    const unsigned short      CSS_VALUE_LIST                 = 2;
    const unsigned short      CSS_CUSTOM                     = 3;

             attribute DOMString        cssText setraises(<ref>DOMException</ref>);

    readonly attribute unsigned short   cssValueType;
  };

  interface CSSPrimitiveValue : <ref>CSSValue</ref> {

    const unsigned short      CSS_UNKNOWN                    = 0;
    const unsigned short      CSS_NUMBER                     = 1;
    const unsigned short      CSS_PERCENTAGE                 = 2;
    const unsigned short      CSS_EMS                        = 3;
    const unsigned short      CSS_EXS                        = 4;
    const unsigned short      CSS_PX                         = 5;
    const unsigned short      CSS_CM                         = 6;
    const unsigned short      CSS_MM                         = 7;
    const unsigned short      CSS_IN                         = 8;
    const unsigned short      CSS_PT                         = 9;
    const unsigned short      CSS_PC                         = 10;
    const unsigned short      CSS_DEG                        = 11;
    const unsigned short      CSS_RAD                        = 12;
    const unsigned short      CSS_GRAD                       = 13;
    const unsigned short      CSS_MS                         = 14;
    const unsigned short      CSS_S                          = 15;
    const unsigned short      CSS_HZ                         = 16;
    const unsigned short      CSS_KHZ                        = 17;
    const unsigned short      CSS_DIMENSION                  = 18;
    const unsigned short      CSS_STRING                     = 19;
    const unsigned short      CSS_URI                        = 20;
    const unsigned short      CSS_IDENT                      = 21;
    const unsigned short      CSS_ATTR                       = 22;
    const unsigned short      CSS_COUNTER                    = 23;
    const unsigned short      CSS_RECT                       = 24;
    const unsigned short      CSS_RGBCOLOR                   = 25;

    readonly attribute unsigned short   primitiveType;
    void               setFloatValue(in unsigned short unitType, 
                                     in float floatValue)
                                        raises(<ref>DOMException</ref>);
    float              getFloatValue(in unsigned short unitType)
                                        raises(<ref>DOMException</ref>);
    void               setStringValue(in unsigned short stringType, 
                                      in DOMString stringValue)
                                        raises(<ref>DOMException</ref>);
    DOMString          getStringValue()
                                        raises(<ref>DOMException</ref>);
    <ref>Counter</ref>            getCounterValue()
                                        raises(<ref>DOMException</ref>);
    <ref>Rect</ref>               getRectValue()
                                        raises(<ref>DOMException</ref>);
    <ref>RGBColor</ref>           getRGBColorValue()
                                        raises(<ref>DOMException</ref>);
  };

  interface CSSValueList : <ref>CSSValue</ref> {
    readonly attribute unsigned long length;
    getter <ref>CSSValue</ref> item(in unsigned long index);
  };

  interface RGBColor {
    readonly attribute <ref>CSSPrimitiveValue</ref>  red;
    readonly attribute <ref>CSSPrimitiveValue</ref>  green;
    readonly attribute <ref>CSSPrimitiveValue</ref>  blue;
  };

  interface Rect {
    readonly attribute <ref>CSSPrimitiveValue</ref>  top;
    readonly attribute <ref>CSSPrimitiveValue</ref>  right;
    readonly attribute <ref>CSSPrimitiveValue</ref>  bottom;
    readonly attribute <ref>CSSPrimitiveValue</ref>  left;
  };

  interface Counter {
    readonly attribute DOMString        identifier;
    readonly attribute DOMString        listStyle;
    readonly attribute DOMString        separator;
  };

  interface ElementCSSInlineStyle {
    readonly attribute <ref>CSSStyleDeclaration</ref>  style;
  };

  interface CSS2Properties {
             attribute DOMString        azimuth setraises(<ref>DOMException</ref>);

             attribute DOMString        background setraises(<ref>DOMException</ref>);

             attribute DOMString        backgroundAttachment setraises(<ref>DOMException</ref>);

             attribute DOMString        backgroundColor setraises(<ref>DOMException</ref>);

             attribute DOMString        backgroundImage setraises(<ref>DOMException</ref>);

             attribute DOMString        backgroundPosition setraises(<ref>DOMException</ref>);

             attribute DOMString        backgroundRepeat setraises(<ref>DOMException</ref>);

             attribute DOMString        border setraises(<ref>DOMException</ref>);

             attribute DOMString        borderCollapse setraises(<ref>DOMException</ref>);

             attribute DOMString        borderColor setraises(<ref>DOMException</ref>);

             attribute DOMString        borderSpacing setraises(<ref>DOMException</ref>);

             attribute DOMString        borderStyle setraises(<ref>DOMException</ref>);

             attribute DOMString        borderTop setraises(<ref>DOMException</ref>);

             attribute DOMString        borderRight setraises(<ref>DOMException</ref>);

             attribute DOMString        borderBottom setraises(<ref>DOMException</ref>);

             attribute DOMString        borderLeft setraises(<ref>DOMException</ref>);

             attribute DOMString        borderTopColor setraises(<ref>DOMException</ref>);

             attribute DOMString        borderRightColor setraises(<ref>DOMException</ref>);

             attribute DOMString        borderBottomColor setraises(<ref>DOMException</ref>);

             attribute DOMString        borderLeftColor setraises(<ref>DOMException</ref>);

             attribute DOMString        borderTopStyle setraises(<ref>DOMException</ref>);

             attribute DOMString        borderRightStyle setraises(<ref>DOMException</ref>);

             attribute DOMString        borderBottomStyle setraises(<ref>DOMException</ref>);

             attribute DOMString        borderLeftStyle setraises(<ref>DOMException</ref>);

             attribute DOMString        borderTopWidth setraises(<ref>DOMException</ref>);

             attribute DOMString        borderRightWidth setraises(<ref>DOMException</ref>);

             attribute DOMString        borderBottomWidth setraises(<ref>DOMException</ref>);

             attribute DOMString        borderLeftWidth setraises(<ref>DOMException</ref>);

             attribute DOMString        borderWidth setraises(<ref>DOMException</ref>);

             attribute DOMString        bottom setraises(<ref>DOMException</ref>);

             attribute DOMString        captionSide setraises(<ref>DOMException</ref>);

             attribute DOMString        clear setraises(<ref>DOMException</ref>);

             attribute DOMString        clip setraises(<ref>DOMException</ref>);

             attribute DOMString        color setraises(<ref>DOMException</ref>);

             attribute DOMString        content setraises(<ref>DOMException</ref>);

             attribute DOMString        counterIncrement setraises(<ref>DOMException</ref>);

             attribute DOMString        counterReset setraises(<ref>DOMException</ref>);

             attribute DOMString        cue setraises(<ref>DOMException</ref>);

             attribute DOMString        cueAfter setraises(<ref>DOMException</ref>);

             attribute DOMString        cueBefore setraises(<ref>DOMException</ref>);

             attribute DOMString        cursor setraises(<ref>DOMException</ref>);

             attribute DOMString        direction setraises(<ref>DOMException</ref>);

             attribute DOMString        display setraises(<ref>DOMException</ref>);

             attribute DOMString        elevation setraises(<ref>DOMException</ref>);

             attribute DOMString        emptyCells setraises(<ref>DOMException</ref>);

             attribute DOMString        cssFloat setraises(<ref>DOMException</ref>);

             attribute DOMString        font setraises(<ref>DOMException</ref>);

             attribute DOMString        fontFamily setraises(<ref>DOMException</ref>);

             attribute DOMString        fontSize setraises(<ref>DOMException</ref>);

             attribute DOMString        fontSizeAdjust setraises(<ref>DOMException</ref>);

             attribute DOMString        fontStretch setraises(<ref>DOMException</ref>);

             attribute DOMString        fontStyle setraises(<ref>DOMException</ref>);

             attribute DOMString        fontVariant setraises(<ref>DOMException</ref>);

             attribute DOMString        fontWeight setraises(<ref>DOMException</ref>);

             attribute DOMString        height setraises(<ref>DOMException</ref>);

             attribute DOMString        left setraises(<ref>DOMException</ref>);

             attribute DOMString        letterSpacing setraises(<ref>DOMException</ref>);

             attribute DOMString        lineHeight setraises(<ref>DOMException</ref>);

             attribute DOMString        listStyle setraises(<ref>DOMException</ref>);

             attribute DOMString        listStyleImage setraises(<ref>DOMException</ref>);

             attribute DOMString        listStylePosition setraises(<ref>DOMException</ref>);

             attribute DOMString        listStyleType setraises(<ref>DOMException</ref>);

             attribute DOMString        margin setraises(<ref>DOMException</ref>);

             attribute DOMString        marginTop setraises(<ref>DOMException</ref>);

             attribute DOMString        marginRight setraises(<ref>DOMException</ref>);

             attribute DOMString        marginBottom setraises(<ref>DOMException</ref>);

             attribute DOMString        marginLeft setraises(<ref>DOMException</ref>);

             attribute DOMString        markerOffset setraises(<ref>DOMException</ref>);

             attribute DOMString        marks setraises(<ref>DOMException</ref>);

             attribute DOMString        maxHeight setraises(<ref>DOMException</ref>);

             attribute DOMString        maxWidth setraises(<ref>DOMException</ref>);

             attribute DOMString        minHeight setraises(<ref>DOMException</ref>);

             attribute DOMString        minWidth setraises(<ref>DOMException</ref>);

             attribute DOMString        orphans setraises(<ref>DOMException</ref>);

             attribute DOMString        outline setraises(<ref>DOMException</ref>);

             attribute DOMString        outlineColor setraises(<ref>DOMException</ref>);

             attribute DOMString        outlineStyle setraises(<ref>DOMException</ref>);

             attribute DOMString        outlineWidth setraises(<ref>DOMException</ref>);

             attribute DOMString        overflow setraises(<ref>DOMException</ref>);

             attribute DOMString        padding setraises(<ref>DOMException</ref>);

             attribute DOMString        paddingTop setraises(<ref>DOMException</ref>);

             attribute DOMString        paddingRight setraises(<ref>DOMException</ref>);

             attribute DOMString        paddingBottom setraises(<ref>DOMException</ref>);

             attribute DOMString        paddingLeft setraises(<ref>DOMException</ref>);

             attribute DOMString        page setraises(<ref>DOMException</ref>);

             attribute DOMString        pageBreakAfter setraises(<ref>DOMException</ref>);

             attribute DOMString        pageBreakBefore setraises(<ref>DOMException</ref>);

             attribute DOMString        pageBreakInside setraises(<ref>DOMException</ref>);

             attribute DOMString        pause setraises(<ref>DOMException</ref>);

             attribute DOMString        pauseAfter setraises(<ref>DOMException</ref>);

             attribute DOMString        pauseBefore setraises(<ref>DOMException</ref>);

             attribute DOMString        pitch setraises(<ref>DOMException</ref>);

             attribute DOMString        pitchRange setraises(<ref>DOMException</ref>);

             attribute DOMString        playDuring setraises(<ref>DOMException</ref>);

             attribute DOMString        position setraises(<ref>DOMException</ref>);

             attribute DOMString        quotes setraises(<ref>DOMException</ref>);

             attribute DOMString        richness setraises(<ref>DOMException</ref>);

             attribute DOMString        right setraises(<ref>DOMException</ref>);

             attribute DOMString        size setraises(<ref>DOMException</ref>);

             attribute DOMString        speak setraises(<ref>DOMException</ref>);

             attribute DOMString        speakHeader setraises(<ref>DOMException</ref>);

             attribute DOMString        speakNumeral setraises(<ref>DOMException</ref>);

             attribute DOMString        speakPunctuation setraises(<ref>DOMException</ref>);

             attribute DOMString        speechRate setraises(<ref>DOMException</ref>);

             attribute DOMString        stress setraises(<ref>DOMException</ref>);

             attribute DOMString        tableLayout setraises(<ref>DOMException</ref>);

             attribute DOMString        textAlign setraises(<ref>DOMException</ref>);

             attribute DOMString        textDecoration setraises(<ref>DOMException</ref>);

             attribute DOMString        textIndent setraises(<ref>DOMException</ref>);

             attribute DOMString        textShadow setraises(<ref>DOMException</ref>);

             attribute DOMString        textTransform setraises(<ref>DOMException</ref>);

             attribute DOMString        top setraises(<ref>DOMException</ref>);

             attribute DOMString        unicodeBidi setraises(<ref>DOMException</ref>);

             attribute DOMString        verticalAlign setraises(<ref>DOMException</ref>);

             attribute DOMString        visibility setraises(<ref>DOMException</ref>);

             attribute DOMString        voiceFamily setraises(<ref>DOMException</ref>);

             attribute DOMString        volume setraises(<ref>DOMException</ref>);

             attribute DOMString        whiteSpace setraises(<ref>DOMException</ref>);

             attribute DOMString        widows setraises(<ref>DOMException</ref>);

             attribute DOMString        width setraises(<ref>DOMException</ref>);

             attribute DOMString        wordSpacing setraises(<ref>DOMException</ref>);

             attribute DOMString        zIndex setraises(<ref>DOMException</ref>);

  };

  interface CSSStyleSheet : <ref>stylesheets::StyleSheet</ref> {
    readonly attribute <ref>CSSRule</ref>          ownerRule;
    readonly attribute <ref>CSSRuleList</ref>      cssRules;
    unsigned long      insertRule(in DOMString rule, 
                                  in unsigned long index)
                                        raises(<ref>DOMException</ref>);
    void               deleteRule(in unsigned long index)
                                        raises(<ref>DOMException</ref>);
  };

  interface ViewCSS  {
    <ref>CSSStyleDeclaration</ref> getComputedStyle(in <ref>Element</ref> elt, 
                                         in DOMString? pseudoElt);
  };

  <ref>AbstractView</ref> implements <ref>ViewCSS</ref>;

  interface DocumentCSS  {
    <ref>CSSStyleDeclaration</ref> getOverrideStyle(in <ref>Element</ref> elt, 
                                         in DOMString? pseudoElt);
  };

  <ref>Document</ref> implements <ref>DocumentCSS</ref>;

  interface DOMImplementationCSS  {
    <ref>CSSStyleSheet</ref>      createCSSStyleSheet(in DOMString title, 
                                           in DOMString media)
                                        raises(<ref>DOMException</ref>);
  };

  <ref>DOMImplementation</ref> implements <ref>DOMImplementationCSS</ref>;
};</webidl>
    <Typedef name="Document" id="::css::Document">
      <webidl>  typedef <ref>dom::Document</ref> Document;</webidl>
      <Type name="domDocument"/>
    </Typedef>
    <Typedef name="Element" id="::css::Element">
      <webidl>  typedef <ref>dom::Element</ref> Element;</webidl>
      <Type name="domElement"/>
    </Typedef>
    <Typedef name="DOMImplementation" id="::css::DOMImplementation">
      <webidl>  typedef <ref>dom::DOMImplementation</ref> DOMImplementation;</webidl>
      <Type name="domDOMImplementation"/>
    </Typedef>
    <Typedef name="DOMException" id="::css::DOMException">
      <webidl>  typedef <ref>dom::DOMException</ref> DOMException;</webidl>
      <Type name="domDOMException"/>
    </Typedef>
    <Typedef name="AbstractView" id="::css::AbstractView">
      <webidl>  typedef <ref>views::AbstractView</ref> AbstractView;</webidl>
      <Type name="viewsAbstractView"/>
    </Typedef>
    <Interface name="CSSRuleList" id="::css::CSSRuleList">
      <webidl>  interface CSSRuleList {
    readonly attribute unsigned long length;
    getter <ref>CSSRule</ref> item(in unsigned long index);
  };</webidl>
      <Attribute readonly="readonly" name="length" id="::css::CSSRuleList::length">
        <webidl>    readonly attribute unsigned long length;</webidl>
        <Type type="unsigned long"/>
      </Attribute>
      <Operation getter="getter" name="item" id="::css::CSSRuleList::item">
        <webidl>    getter <ref>CSSRule</ref> item(in unsigned long index);</webidl>
        <Type name="CSSRule"/>
        <ArgumentList>
          <Argument in="in" name="index">
            <Type type="unsigned long"/>
          </Argument>
        </ArgumentList>
      </Operation>
    </Interface>
    <Interface name="CSSRule" id="::css::CSSRule">
      <webidl>  [PrototypeRoot]
  interface CSSRule {

    const unsigned short      UNKNOWN_RULE                   = 0;
    const unsigned short      STYLE_RULE                     = 1;
    const unsigned short      CHARSET_RULE                   = 2;
    const unsigned short      IMPORT_RULE                    = 3;
    const unsigned short      MEDIA_RULE                     = 4;
    const unsigned short      FONT_FACE_RULE                 = 5;
    const unsigned short      PAGE_RULE                      = 6;

    readonly attribute unsigned short   type;
             attribute DOMString        cssText setraises(<ref>DOMException</ref>);

    readonly attribute <ref>CSSStyleSheet</ref>    parentStyleSheet;
    readonly attribute <ref>CSSRule</ref>          parentRule;
  };</webidl>
      <ExtendedAttributeList>
        <ExtendedAttribute name="PrototypeRoot"/>
      </ExtendedAttributeList>
      <Const name="UNKNOWN_RULE" value="0" id="::css::CSSRule::UNKNOWN_RULE">
        <webidl>    const unsigned short      UNKNOWN_RULE                   = 0;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="STYLE_RULE" value="1" id="::css::CSSRule::STYLE_RULE">
        <webidl>    const unsigned short      STYLE_RULE                     = 1;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CHARSET_RULE" value="2" id="::css::CSSRule::CHARSET_RULE">
        <webidl>    const unsigned short      CHARSET_RULE                   = 2;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="IMPORT_RULE" value="3" id="::css::CSSRule::IMPORT_RULE">
        <webidl>    const unsigned short      IMPORT_RULE                    = 3;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="MEDIA_RULE" value="4" id="::css::CSSRule::MEDIA_RULE">
        <webidl>    const unsigned short      MEDIA_RULE                     = 4;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="FONT_FACE_RULE" value="5" id="::css::CSSRule::FONT_FACE_RULE">
        <webidl>    const unsigned short      FONT_FACE_RULE                 = 5;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="PAGE_RULE" value="6" id="::css::CSSRule::PAGE_RULE">
        <webidl>    const unsigned short      PAGE_RULE                      = 6;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Attribute readonly="readonly" name="type" id="::css::CSSRule::type">
        <webidl>    readonly attribute unsigned short   type;</webidl>
        <Type type="unsigned short"/>
      </Attribute>
      <Attribute name="cssText" id="::css::CSSRule::cssText">
        <webidl>             attribute DOMString        cssText setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute readonly="readonly" name="parentStyleSheet" id="::css::CSSRule::parentStyleSheet">
        <webidl>    readonly attribute <ref>CSSStyleSheet</ref>    parentStyleSheet;</webidl>
        <Type name="CSSStyleSheet"/>
      </Attribute>
      <Attribute readonly="readonly" name="parentRule" id="::css::CSSRule::parentRule">
        <webidl>    readonly attribute <ref>CSSRule</ref>          parentRule;</webidl>
        <Type name="CSSRule"/>
      </Attribute>
    </Interface>
    <Interface name="CSSStyleRule" id="::css::CSSStyleRule">
      <webidl>  interface CSSStyleRule : <ref>CSSRule</ref> {
             attribute DOMString        selectorText setraises(<ref>DOMException</ref>);

    readonly attribute <ref>CSSStyleDeclaration</ref>  style;
  };</webidl>
      <InterfaceInheritance>
        <Name name="CSSRule"/>
      </InterfaceInheritance>
      <Attribute name="selectorText" id="::css::CSSStyleRule::selectorText">
        <webidl>             attribute DOMString        selectorText setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute readonly="readonly" name="style" id="::css::CSSStyleRule::style">
        <webidl>    readonly attribute <ref>CSSStyleDeclaration</ref>  style;</webidl>
        <Type name="CSSStyleDeclaration"/>
      </Attribute>
    </Interface>
    <Interface name="CSSMediaRule" id="::css::CSSMediaRule">
      <webidl>  interface CSSMediaRule : <ref>CSSRule</ref> {
    readonly attribute <ref>stylesheets::MediaList</ref>  media;
    readonly attribute <ref>CSSRuleList</ref>      cssRules;
    unsigned long      insertRule(in DOMString rule, 
                                  in unsigned long index)
                                        raises(<ref>DOMException</ref>);
    void               deleteRule(in unsigned long index)
                                        raises(<ref>DOMException</ref>);
  };</webidl>
      <InterfaceInheritance>
        <Name name="CSSRule"/>
      </InterfaceInheritance>
      <Attribute readonly="readonly" name="media" id="::css::CSSMediaRule::media">
        <webidl>    readonly attribute <ref>stylesheets::MediaList</ref>  media;</webidl>
        <Type name="stylesheetsMediaList"/>
      </Attribute>
      <Attribute readonly="readonly" name="cssRules" id="::css::CSSMediaRule::cssRules">
        <webidl>    readonly attribute <ref>CSSRuleList</ref>      cssRules;</webidl>
        <Type name="CSSRuleList"/>
      </Attribute>
      <Operation name="insertRule" id="::css::CSSMediaRule::insertRule">
        <webidl>    unsigned long      insertRule(in DOMString rule, 
                                  in unsigned long index)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="unsigned long"/>
        <ArgumentList>
          <Argument in="in" name="rule">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="index">
            <Type type="unsigned long"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="deleteRule" id="::css::CSSMediaRule::deleteRule">
        <webidl>    void               deleteRule(in unsigned long index)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="index">
            <Type type="unsigned long"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
    </Interface>
    <Interface name="CSSFontFaceRule" id="::css::CSSFontFaceRule">
      <webidl>  interface CSSFontFaceRule : <ref>CSSRule</ref> {
    readonly attribute <ref>CSSStyleDeclaration</ref>  style;
  };</webidl>
      <InterfaceInheritance>
        <Name name="CSSRule"/>
      </InterfaceInheritance>
      <Attribute readonly="readonly" name="style" id="::css::CSSFontFaceRule::style">
        <webidl>    readonly attribute <ref>CSSStyleDeclaration</ref>  style;</webidl>
        <Type name="CSSStyleDeclaration"/>
      </Attribute>
    </Interface>
    <Interface name="CSSPageRule" id="::css::CSSPageRule">
      <webidl>  interface CSSPageRule : <ref>CSSRule</ref> {
             attribute DOMString        selectorText setraises(<ref>DOMException</ref>);

    readonly attribute <ref>CSSStyleDeclaration</ref>  style;
  };</webidl>
      <InterfaceInheritance>
        <Name name="CSSRule"/>
      </InterfaceInheritance>
      <Attribute name="selectorText" id="::css::CSSPageRule::selectorText">
        <webidl>             attribute DOMString        selectorText setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute readonly="readonly" name="style" id="::css::CSSPageRule::style">
        <webidl>    readonly attribute <ref>CSSStyleDeclaration</ref>  style;</webidl>
        <Type name="CSSStyleDeclaration"/>
      </Attribute>
    </Interface>
    <Interface name="CSSImportRule" id="::css::CSSImportRule">
      <webidl>  interface CSSImportRule : <ref>CSSRule</ref> {
    readonly attribute DOMString        href;
    readonly attribute <ref>stylesheets::MediaList</ref>  media;
    readonly attribute <ref>CSSStyleSheet</ref>    styleSheet;
  };</webidl>
      <InterfaceInheritance>
        <Name name="CSSRule"/>
      </InterfaceInheritance>
      <Attribute readonly="readonly" name="href" id="::css::CSSImportRule::href">
        <webidl>    readonly attribute DOMString        href;</webidl>
        <Type type="DOMString"/>
      </Attribute>
      <Attribute readonly="readonly" name="media" id="::css::CSSImportRule::media">
        <webidl>    readonly attribute <ref>stylesheets::MediaList</ref>  media;</webidl>
        <Type name="stylesheetsMediaList"/>
      </Attribute>
      <Attribute readonly="readonly" name="styleSheet" id="::css::CSSImportRule::styleSheet">
        <webidl>    readonly attribute <ref>CSSStyleSheet</ref>    styleSheet;</webidl>
        <Type name="CSSStyleSheet"/>
      </Attribute>
    </Interface>
    <Interface name="CSSCharsetRule" id="::css::CSSCharsetRule">
      <webidl>  interface CSSCharsetRule : <ref>CSSRule</ref> {
             attribute DOMString        encoding setraises(<ref>DOMException</ref>);

  };</webidl>
      <InterfaceInheritance>
        <Name name="CSSRule"/>
      </InterfaceInheritance>
      <Attribute name="encoding" id="::css::CSSCharsetRule::encoding">
        <webidl>             attribute DOMString        encoding setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
    </Interface>
    <Interface name="CSSUnknownRule" id="::css::CSSUnknownRule">
      <webidl>  interface CSSUnknownRule : <ref>CSSRule</ref> {
  };</webidl>
      <InterfaceInheritance>
        <Name name="CSSRule"/>
      </InterfaceInheritance>
    </Interface>
    <Interface name="CSSStyleDeclaration" id="::css::CSSStyleDeclaration">
      <webidl>  interface CSSStyleDeclaration {
             attribute DOMString        cssText setraises(<ref>DOMException</ref>);

    DOMString          getPropertyValue(in DOMString propertyName);
    <ref>CSSValue</ref>           getPropertyCSSValue(in DOMString propertyName);
    DOMString          removeProperty(in DOMString propertyName)
                                        raises(<ref>DOMException</ref>);
    DOMString          getPropertyPriority(in DOMString propertyName);
    void               setProperty(in DOMString propertyName, 
                                   in DOMString value, 
                                   in DOMString? priority)
                                        raises(<ref>DOMException</ref>);
    readonly attribute unsigned long    length;
    getter DOMString item(in unsigned long index);
    readonly attribute <ref>CSSRule</ref>          parentRule;
  };</webidl>
      <Attribute name="cssText" id="::css::CSSStyleDeclaration::cssText">
        <webidl>             attribute DOMString        cssText setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Operation name="getPropertyValue" id="::css::CSSStyleDeclaration::getPropertyValue">
        <webidl>    DOMString          getPropertyValue(in DOMString propertyName);</webidl>
        <Type type="DOMString"/>
        <ArgumentList>
          <Argument in="in" name="propertyName">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="getPropertyCSSValue" id="::css::CSSStyleDeclaration::getPropertyCSSValue">
        <webidl>    <ref>CSSValue</ref>           getPropertyCSSValue(in DOMString propertyName);</webidl>
        <Type name="CSSValue"/>
        <ArgumentList>
          <Argument in="in" name="propertyName">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="removeProperty" id="::css::CSSStyleDeclaration::removeProperty">
        <webidl>    DOMString          removeProperty(in DOMString propertyName)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <ArgumentList>
          <Argument in="in" name="propertyName">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="getPropertyPriority" id="::css::CSSStyleDeclaration::getPropertyPriority">
        <webidl>    DOMString          getPropertyPriority(in DOMString propertyName);</webidl>
        <Type type="DOMString"/>
        <ArgumentList>
          <Argument in="in" name="propertyName">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="setProperty" id="::css::CSSStyleDeclaration::setProperty">
        <webidl>    void               setProperty(in DOMString propertyName, 
                                   in DOMString value, 
                                   in DOMString? priority)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="propertyName">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="value">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="priority">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Attribute readonly="readonly" name="length" id="::css::CSSStyleDeclaration::length">
        <webidl>    readonly attribute unsigned long    length;</webidl>
        <Type type="unsigned long"/>
      </Attribute>
      <Operation getter="getter" name="item" id="::css::CSSStyleDeclaration::item">
        <webidl>    getter DOMString item(in unsigned long index);</webidl>
        <Type type="DOMString"/>
        <ArgumentList>
          <Argument in="in" name="index">
            <Type type="unsigned long"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Attribute readonly="readonly" name="parentRule" id="::css::CSSStyleDeclaration::parentRule">
        <webidl>    readonly attribute <ref>CSSRule</ref>          parentRule;</webidl>
        <Type name="CSSRule"/>
      </Attribute>
    </Interface>
    <Interface name="CSSValue" id="::css::CSSValue">
      <webidl>  [PrototypeRoot]
  interface CSSValue {

    const unsigned short      CSS_INHERIT                    = 0;
    const unsigned short      CSS_PRIMITIVE_VALUE            = 1;
    const unsigned short      CSS_VALUE_LIST                 = 2;
    const unsigned short      CSS_CUSTOM                     = 3;

             attribute DOMString        cssText setraises(<ref>DOMException</ref>);

    readonly attribute unsigned short   cssValueType;
  };</webidl>
      <ExtendedAttributeList>
        <ExtendedAttribute name="PrototypeRoot"/>
      </ExtendedAttributeList>
      <Const name="CSS_INHERIT" value="0" id="::css::CSSValue::CSS_INHERIT">
        <webidl>    const unsigned short      CSS_INHERIT                    = 0;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_PRIMITIVE_VALUE" value="1" id="::css::CSSValue::CSS_PRIMITIVE_VALUE">
        <webidl>    const unsigned short      CSS_PRIMITIVE_VALUE            = 1;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_VALUE_LIST" value="2" id="::css::CSSValue::CSS_VALUE_LIST">
        <webidl>    const unsigned short      CSS_VALUE_LIST                 = 2;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_CUSTOM" value="3" id="::css::CSSValue::CSS_CUSTOM">
        <webidl>    const unsigned short      CSS_CUSTOM                     = 3;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Attribute name="cssText" id="::css::CSSValue::cssText">
        <webidl>             attribute DOMString        cssText setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute readonly="readonly" name="cssValueType" id="::css::CSSValue::cssValueType">
        <webidl>    readonly attribute unsigned short   cssValueType;</webidl>
        <Type type="unsigned short"/>
      </Attribute>
    </Interface>
    <Interface name="CSSPrimitiveValue" id="::css::CSSPrimitiveValue">
      <webidl>  interface CSSPrimitiveValue : <ref>CSSValue</ref> {

    const unsigned short      CSS_UNKNOWN                    = 0;
    const unsigned short      CSS_NUMBER                     = 1;
    const unsigned short      CSS_PERCENTAGE                 = 2;
    const unsigned short      CSS_EMS                        = 3;
    const unsigned short      CSS_EXS                        = 4;
    const unsigned short      CSS_PX                         = 5;
    const unsigned short      CSS_CM                         = 6;
    const unsigned short      CSS_MM                         = 7;
    const unsigned short      CSS_IN                         = 8;
    const unsigned short      CSS_PT                         = 9;
    const unsigned short      CSS_PC                         = 10;
    const unsigned short      CSS_DEG                        = 11;
    const unsigned short      CSS_RAD                        = 12;
    const unsigned short      CSS_GRAD                       = 13;
    const unsigned short      CSS_MS                         = 14;
    const unsigned short      CSS_S                          = 15;
    const unsigned short      CSS_HZ                         = 16;
    const unsigned short      CSS_KHZ                        = 17;
    const unsigned short      CSS_DIMENSION                  = 18;
    const unsigned short      CSS_STRING                     = 19;
    const unsigned short      CSS_URI                        = 20;
    const unsigned short      CSS_IDENT                      = 21;
    const unsigned short      CSS_ATTR                       = 22;
    const unsigned short      CSS_COUNTER                    = 23;
    const unsigned short      CSS_RECT                       = 24;
    const unsigned short      CSS_RGBCOLOR                   = 25;

    readonly attribute unsigned short   primitiveType;
    void               setFloatValue(in unsigned short unitType, 
                                     in float floatValue)
                                        raises(<ref>DOMException</ref>);
    float              getFloatValue(in unsigned short unitType)
                                        raises(<ref>DOMException</ref>);
    void               setStringValue(in unsigned short stringType, 
                                      in DOMString stringValue)
                                        raises(<ref>DOMException</ref>);
    DOMString          getStringValue()
                                        raises(<ref>DOMException</ref>);
    <ref>Counter</ref>            getCounterValue()
                                        raises(<ref>DOMException</ref>);
    <ref>Rect</ref>               getRectValue()
                                        raises(<ref>DOMException</ref>);
    <ref>RGBColor</ref>           getRGBColorValue()
                                        raises(<ref>DOMException</ref>);
  };</webidl>
      <InterfaceInheritance>
        <Name name="CSSValue"/>
      </InterfaceInheritance>
      <Const name="CSS_UNKNOWN" value="0" id="::css::CSSPrimitiveValue::CSS_UNKNOWN">
        <webidl>    const unsigned short      CSS_UNKNOWN                    = 0;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_NUMBER" value="1" id="::css::CSSPrimitiveValue::CSS_NUMBER">
        <webidl>    const unsigned short      CSS_NUMBER                     = 1;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_PERCENTAGE" value="2" id="::css::CSSPrimitiveValue::CSS_PERCENTAGE">
        <webidl>    const unsigned short      CSS_PERCENTAGE                 = 2;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_EMS" value="3" id="::css::CSSPrimitiveValue::CSS_EMS">
        <webidl>    const unsigned short      CSS_EMS                        = 3;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_EXS" value="4" id="::css::CSSPrimitiveValue::CSS_EXS">
        <webidl>    const unsigned short      CSS_EXS                        = 4;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_PX" value="5" id="::css::CSSPrimitiveValue::CSS_PX">
        <webidl>    const unsigned short      CSS_PX                         = 5;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_CM" value="6" id="::css::CSSPrimitiveValue::CSS_CM">
        <webidl>    const unsigned short      CSS_CM                         = 6;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_MM" value="7" id="::css::CSSPrimitiveValue::CSS_MM">
        <webidl>    const unsigned short      CSS_MM                         = 7;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_IN" value="8" id="::css::CSSPrimitiveValue::CSS_IN">
        <webidl>    const unsigned short      CSS_IN                         = 8;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_PT" value="9" id="::css::CSSPrimitiveValue::CSS_PT">
        <webidl>    const unsigned short      CSS_PT                         = 9;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_PC" value="10" id="::css::CSSPrimitiveValue::CSS_PC">
        <webidl>    const unsigned short      CSS_PC                         = 10;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_DEG" value="11" id="::css::CSSPrimitiveValue::CSS_DEG">
        <webidl>    const unsigned short      CSS_DEG                        = 11;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_RAD" value="12" id="::css::CSSPrimitiveValue::CSS_RAD">
        <webidl>    const unsigned short      CSS_RAD                        = 12;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_GRAD" value="13" id="::css::CSSPrimitiveValue::CSS_GRAD">
        <webidl>    const unsigned short      CSS_GRAD                       = 13;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_MS" value="14" id="::css::CSSPrimitiveValue::CSS_MS">
        <webidl>    const unsigned short      CSS_MS                         = 14;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_S" value="15" id="::css::CSSPrimitiveValue::CSS_S">
        <webidl>    const unsigned short      CSS_S                          = 15;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_HZ" value="16" id="::css::CSSPrimitiveValue::CSS_HZ">
        <webidl>    const unsigned short      CSS_HZ                         = 16;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_KHZ" value="17" id="::css::CSSPrimitiveValue::CSS_KHZ">
        <webidl>    const unsigned short      CSS_KHZ                        = 17;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_DIMENSION" value="18" id="::css::CSSPrimitiveValue::CSS_DIMENSION">
        <webidl>    const unsigned short      CSS_DIMENSION                  = 18;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_STRING" value="19" id="::css::CSSPrimitiveValue::CSS_STRING">
        <webidl>    const unsigned short      CSS_STRING                     = 19;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_URI" value="20" id="::css::CSSPrimitiveValue::CSS_URI">
        <webidl>    const unsigned short      CSS_URI                        = 20;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_IDENT" value="21" id="::css::CSSPrimitiveValue::CSS_IDENT">
        <webidl>    const unsigned short      CSS_IDENT                      = 21;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_ATTR" value="22" id="::css::CSSPrimitiveValue::CSS_ATTR">
        <webidl>    const unsigned short      CSS_ATTR                       = 22;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_COUNTER" value="23" id="::css::CSSPrimitiveValue::CSS_COUNTER">
        <webidl>    const unsigned short      CSS_COUNTER                    = 23;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_RECT" value="24" id="::css::CSSPrimitiveValue::CSS_RECT">
        <webidl>    const unsigned short      CSS_RECT                       = 24;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_RGBCOLOR" value="25" id="::css::CSSPrimitiveValue::CSS_RGBCOLOR">
        <webidl>    const unsigned short      CSS_RGBCOLOR                   = 25;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Attribute readonly="readonly" name="primitiveType" id="::css::CSSPrimitiveValue::primitiveType">
        <webidl>    readonly attribute unsigned short   primitiveType;</webidl>
        <Type type="unsigned short"/>
      </Attribute>
      <Operation name="setFloatValue" id="::css::CSSPrimitiveValue::setFloatValue">
        <webidl>    void               setFloatValue(in unsigned short unitType, 
                                     in float floatValue)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="unitType">
            <Type type="unsigned short"/>
          </Argument>
          <Argument in="in" name="floatValue">
            <Type type="float"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="getFloatValue" id="::css::CSSPrimitiveValue::getFloatValue">
        <webidl>    float              getFloatValue(in unsigned short unitType)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="float"/>
        <ArgumentList>
          <Argument in="in" name="unitType">
            <Type type="unsigned short"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="setStringValue" id="::css::CSSPrimitiveValue::setStringValue">
        <webidl>    void               setStringValue(in unsigned short stringType, 
                                      in DOMString stringValue)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="stringType">
            <Type type="unsigned short"/>
          </Argument>
          <Argument in="in" name="stringValue">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="getStringValue" id="::css::CSSPrimitiveValue::getStringValue">
        <webidl>    DOMString          getStringValue()
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <ArgumentList/>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="getCounterValue" id="::css::CSSPrimitiveValue::getCounterValue">
        <webidl>    <ref>Counter</ref>            getCounterValue()
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Counter"/>
        <ArgumentList/>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="getRectValue" id="::css::CSSPrimitiveValue::getRectValue">
        <webidl>    <ref>Rect</ref>               getRectValue()
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Rect"/>
        <ArgumentList/>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="getRGBColorValue" id="::css::CSSPrimitiveValue::getRGBColorValue">
        <webidl>    <ref>RGBColor</ref>           getRGBColorValue()
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="RGBColor"/>
        <ArgumentList/>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
    </Interface>
    <Interface name="CSSValueList" id="::css::CSSValueList">
      <webidl>  interface CSSValueList : <ref>CSSValue</ref> {
    readonly attribute unsigned long length;
    getter <ref>CSSValue</ref> item(in unsigned long index);
  };</webidl>
      <InterfaceInheritance>
        <Name name="CSSValue"/>
      </InterfaceInheritance>
      <Attribute readonly="readonly" name="length" id="::css::CSSValueList::length">
        <webidl>    readonly attribute unsigned long length;</webidl>
        <Type type="unsigned long"/>
      </Attribute>
      <Operation getter="getter" name="item" id="::css::CSSValueList::item">
        <webidl>    getter <ref>CSSValue</ref> item(in unsigned long index);</webidl>
        <Type name="CSSValue"/>
        <ArgumentList>
          <Argument in="in" name="index">
            <Type type="unsigned long"/>
          </Argument>
        </ArgumentList>
      </Operation>
    </Interface>
    <Interface name="RGBColor" id="::css::RGBColor">
      <webidl>  interface RGBColor {
    readonly attribute <ref>CSSPrimitiveValue</ref>  red;
    readonly attribute <ref>CSSPrimitiveValue</ref>  green;
    readonly attribute <ref>CSSPrimitiveValue</ref>  blue;
  };</webidl>
      <Attribute readonly="readonly" name="red" id="::css::RGBColor::red">
        <webidl>    readonly attribute <ref>CSSPrimitiveValue</ref>  red;</webidl>
        <Type name="CSSPrimitiveValue"/>
      </Attribute>
      <Attribute readonly="readonly" name="green" id="::css::RGBColor::green">
        <webidl>    readonly attribute <ref>CSSPrimitiveValue</ref>  green;</webidl>
        <Type name="CSSPrimitiveValue"/>
      </Attribute>
      <Attribute readonly="readonly" name="blue" id="::css::RGBColor::blue">
        <webidl>    readonly attribute <ref>CSSPrimitiveValue</ref>  blue;</webidl>
        <Type name="CSSPrimitiveValue"/>
      </Attribute>
    </Interface>
    <Interface name="Rect" id="::css::Rect">
      <webidl>  interface Rect {
    readonly attribute <ref>CSSPrimitiveValue</ref>  top;
    readonly attribute <ref>CSSPrimitiveValue</ref>  right;
    readonly attribute <ref>CSSPrimitiveValue</ref>  bottom;
    readonly attribute <ref>CSSPrimitiveValue</ref>  left;
  };</webidl>
      <Attribute readonly="readonly" name="top" id="::css::Rect::top">
        <webidl>    readonly attribute <ref>CSSPrimitiveValue</ref>  top;</webidl>
        <Type name="CSSPrimitiveValue"/>
      </Attribute>
      <Attribute readonly="readonly" name="right" id="::css::Rect::right">
        <webidl>    readonly attribute <ref>CSSPrimitiveValue</ref>  right;</webidl>
        <Type name="CSSPrimitiveValue"/>
      </Attribute>
      <Attribute readonly="readonly" name="bottom" id="::css::Rect::bottom">
        <webidl>    readonly attribute <ref>CSSPrimitiveValue</ref>  bottom;</webidl>
        <Type name="CSSPrimitiveValue"/>
      </Attribute>
      <Attribute readonly="readonly" name="left" id="::css::Rect::left">
        <webidl>    readonly attribute <ref>CSSPrimitiveValue</ref>  left;</webidl>
        <Type name="CSSPrimitiveValue"/>
      </Attribute>
    </Interface>
    <Interface name="Counter" id="::css::Counter">
      <webidl>  interface Counter {
    readonly attribute DOMString        identifier;
    readonly attribute DOMString        listStyle;
    readonly attribute DOMString        separator;
  };</webidl>
      <Attribute readonly="readonly" name="identifier" id="::css::Counter::identifier">
        <webidl>    readonly attribute DOMString        identifier;</webidl>
        <Type type="DOMString"/>
      </Attribute>
      <Attribute readonly="readonly" name="listStyle" id="::css::Counter::listStyle">
        <webidl>    readonly attribute DOMString        listStyle;</webidl>
        <Type type="DOMString"/>
      </Attribute>
      <Attribute readonly="readonly" name="separator" id="::css::Counter::separator">
        <webidl>    readonly attribute DOMString        separator;</webidl>
        <Type type="DOMString"/>
      </Attribute>
    </Interface>
    <Interface name="ElementCSSInlineStyle" id="::css::ElementCSSInlineStyle">
      <webidl>  interface ElementCSSInlineStyle {
    readonly attribute <ref>CSSStyleDeclaration</ref>  style;
  };</webidl>
      <Attribute readonly="readonly" name="style" id="::css::ElementCSSInlineStyle::style">
        <webidl>    readonly attribute <ref>CSSStyleDeclaration</ref>  style;</webidl>
        <Type name="CSSStyleDeclaration"/>
      </Attribute>
    </Interface>
    <Interface name="CSS2Properties" id="::css::CSS2Properties">
      <webidl>  interface CSS2Properties {
             attribute DOMString        azimuth setraises(<ref>DOMException</ref>);

             attribute DOMString        background setraises(<ref>DOMException</ref>);

             attribute DOMString        backgroundAttachment setraises(<ref>DOMException</ref>);

             attribute DOMString        backgroundColor setraises(<ref>DOMException</ref>);

             attribute DOMString        backgroundImage setraises(<ref>DOMException</ref>);

             attribute DOMString        backgroundPosition setraises(<ref>DOMException</ref>);

             attribute DOMString        backgroundRepeat setraises(<ref>DOMException</ref>);

             attribute DOMString        border setraises(<ref>DOMException</ref>);

             attribute DOMString        borderCollapse setraises(<ref>DOMException</ref>);

             attribute DOMString        borderColor setraises(<ref>DOMException</ref>);

             attribute DOMString        borderSpacing setraises(<ref>DOMException</ref>);

             attribute DOMString        borderStyle setraises(<ref>DOMException</ref>);

             attribute DOMString        borderTop setraises(<ref>DOMException</ref>);

             attribute DOMString        borderRight setraises(<ref>DOMException</ref>);

             attribute DOMString        borderBottom setraises(<ref>DOMException</ref>);

             attribute DOMString        borderLeft setraises(<ref>DOMException</ref>);

             attribute DOMString        borderTopColor setraises(<ref>DOMException</ref>);

             attribute DOMString        borderRightColor setraises(<ref>DOMException</ref>);

             attribute DOMString        borderBottomColor setraises(<ref>DOMException</ref>);

             attribute DOMString        borderLeftColor setraises(<ref>DOMException</ref>);

             attribute DOMString        borderTopStyle setraises(<ref>DOMException</ref>);

             attribute DOMString        borderRightStyle setraises(<ref>DOMException</ref>);

             attribute DOMString        borderBottomStyle setraises(<ref>DOMException</ref>);

             attribute DOMString        borderLeftStyle setraises(<ref>DOMException</ref>);

             attribute DOMString        borderTopWidth setraises(<ref>DOMException</ref>);

             attribute DOMString        borderRightWidth setraises(<ref>DOMException</ref>);

             attribute DOMString        borderBottomWidth setraises(<ref>DOMException</ref>);

             attribute DOMString        borderLeftWidth setraises(<ref>DOMException</ref>);

             attribute DOMString        borderWidth setraises(<ref>DOMException</ref>);

             attribute DOMString        bottom setraises(<ref>DOMException</ref>);

             attribute DOMString        captionSide setraises(<ref>DOMException</ref>);

             attribute DOMString        clear setraises(<ref>DOMException</ref>);

             attribute DOMString        clip setraises(<ref>DOMException</ref>);

             attribute DOMString        color setraises(<ref>DOMException</ref>);

             attribute DOMString        content setraises(<ref>DOMException</ref>);

             attribute DOMString        counterIncrement setraises(<ref>DOMException</ref>);

             attribute DOMString        counterReset setraises(<ref>DOMException</ref>);

             attribute DOMString        cue setraises(<ref>DOMException</ref>);

             attribute DOMString        cueAfter setraises(<ref>DOMException</ref>);

             attribute DOMString        cueBefore setraises(<ref>DOMException</ref>);

             attribute DOMString        cursor setraises(<ref>DOMException</ref>);

             attribute DOMString        direction setraises(<ref>DOMException</ref>);

             attribute DOMString        display setraises(<ref>DOMException</ref>);

             attribute DOMString        elevation setraises(<ref>DOMException</ref>);

             attribute DOMString        emptyCells setraises(<ref>DOMException</ref>);

             attribute DOMString        cssFloat setraises(<ref>DOMException</ref>);

             attribute DOMString        font setraises(<ref>DOMException</ref>);

             attribute DOMString        fontFamily setraises(<ref>DOMException</ref>);

             attribute DOMString        fontSize setraises(<ref>DOMException</ref>);

             attribute DOMString        fontSizeAdjust setraises(<ref>DOMException</ref>);

             attribute DOMString        fontStretch setraises(<ref>DOMException</ref>);

             attribute DOMString        fontStyle setraises(<ref>DOMException</ref>);

             attribute DOMString        fontVariant setraises(<ref>DOMException</ref>);

             attribute DOMString        fontWeight setraises(<ref>DOMException</ref>);

             attribute DOMString        height setraises(<ref>DOMException</ref>);

             attribute DOMString        left setraises(<ref>DOMException</ref>);

             attribute DOMString        letterSpacing setraises(<ref>DOMException</ref>);

             attribute DOMString        lineHeight setraises(<ref>DOMException</ref>);

             attribute DOMString        listStyle setraises(<ref>DOMException</ref>);

             attribute DOMString        listStyleImage setraises(<ref>DOMException</ref>);

             attribute DOMString        listStylePosition setraises(<ref>DOMException</ref>);

             attribute DOMString        listStyleType setraises(<ref>DOMException</ref>);

             attribute DOMString        margin setraises(<ref>DOMException</ref>);

             attribute DOMString        marginTop setraises(<ref>DOMException</ref>);

             attribute DOMString        marginRight setraises(<ref>DOMException</ref>);

             attribute DOMString        marginBottom setraises(<ref>DOMException</ref>);

             attribute DOMString        marginLeft setraises(<ref>DOMException</ref>);

             attribute DOMString        markerOffset setraises(<ref>DOMException</ref>);

             attribute DOMString        marks setraises(<ref>DOMException</ref>);

             attribute DOMString        maxHeight setraises(<ref>DOMException</ref>);

             attribute DOMString        maxWidth setraises(<ref>DOMException</ref>);

             attribute DOMString        minHeight setraises(<ref>DOMException</ref>);

             attribute DOMString        minWidth setraises(<ref>DOMException</ref>);

             attribute DOMString        orphans setraises(<ref>DOMException</ref>);

             attribute DOMString        outline setraises(<ref>DOMException</ref>);

             attribute DOMString        outlineColor setraises(<ref>DOMException</ref>);

             attribute DOMString        outlineStyle setraises(<ref>DOMException</ref>);

             attribute DOMString        outlineWidth setraises(<ref>DOMException</ref>);

             attribute DOMString        overflow setraises(<ref>DOMException</ref>);

             attribute DOMString        padding setraises(<ref>DOMException</ref>);

             attribute DOMString        paddingTop setraises(<ref>DOMException</ref>);

             attribute DOMString        paddingRight setraises(<ref>DOMException</ref>);

             attribute DOMString        paddingBottom setraises(<ref>DOMException</ref>);

             attribute DOMString        paddingLeft setraises(<ref>DOMException</ref>);

             attribute DOMString        page setraises(<ref>DOMException</ref>);

             attribute DOMString        pageBreakAfter setraises(<ref>DOMException</ref>);

             attribute DOMString        pageBreakBefore setraises(<ref>DOMException</ref>);

             attribute DOMString        pageBreakInside setraises(<ref>DOMException</ref>);

             attribute DOMString        pause setraises(<ref>DOMException</ref>);

             attribute DOMString        pauseAfter setraises(<ref>DOMException</ref>);

             attribute DOMString        pauseBefore setraises(<ref>DOMException</ref>);

             attribute DOMString        pitch setraises(<ref>DOMException</ref>);

             attribute DOMString        pitchRange setraises(<ref>DOMException</ref>);

             attribute DOMString        playDuring setraises(<ref>DOMException</ref>);

             attribute DOMString        position setraises(<ref>DOMException</ref>);

             attribute DOMString        quotes setraises(<ref>DOMException</ref>);

             attribute DOMString        richness setraises(<ref>DOMException</ref>);

             attribute DOMString        right setraises(<ref>DOMException</ref>);

             attribute DOMString        size setraises(<ref>DOMException</ref>);

             attribute DOMString        speak setraises(<ref>DOMException</ref>);

             attribute DOMString        speakHeader setraises(<ref>DOMException</ref>);

             attribute DOMString        speakNumeral setraises(<ref>DOMException</ref>);

             attribute DOMString        speakPunctuation setraises(<ref>DOMException</ref>);

             attribute DOMString        speechRate setraises(<ref>DOMException</ref>);

             attribute DOMString        stress setraises(<ref>DOMException</ref>);

             attribute DOMString        tableLayout setraises(<ref>DOMException</ref>);

             attribute DOMString        textAlign setraises(<ref>DOMException</ref>);

             attribute DOMString        textDecoration setraises(<ref>DOMException</ref>);

             attribute DOMString        textIndent setraises(<ref>DOMException</ref>);

             attribute DOMString        textShadow setraises(<ref>DOMException</ref>);

             attribute DOMString        textTransform setraises(<ref>DOMException</ref>);

             attribute DOMString        top setraises(<ref>DOMException</ref>);

             attribute DOMString        unicodeBidi setraises(<ref>DOMException</ref>);

             attribute DOMString        verticalAlign setraises(<ref>DOMException</ref>);

             attribute DOMString        visibility setraises(<ref>DOMException</ref>);

             attribute DOMString        voiceFamily setraises(<ref>DOMException</ref>);

             attribute DOMString        volume setraises(<ref>DOMException</ref>);

             attribute DOMString        whiteSpace setraises(<ref>DOMException</ref>);

             attribute DOMString        widows setraises(<ref>DOMException</ref>);

             attribute DOMString        width setraises(<ref>DOMException</ref>);

             attribute DOMString        wordSpacing setraises(<ref>DOMException</ref>);

             attribute DOMString        zIndex setraises(<ref>DOMException</ref>);

  };</webidl>
      <Attribute name="azimuth" id="::css::CSS2Properties::azimuth">
        <webidl>             attribute DOMString        azimuth setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="background" id="::css::CSS2Properties::background">
        <webidl>             attribute DOMString        background setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="backgroundAttachment" id="::css::CSS2Properties::backgroundAttachment">
        <webidl>             attribute DOMString        backgroundAttachment setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="backgroundColor" id="::css::CSS2Properties::backgroundColor">
        <webidl>             attribute DOMString        backgroundColor setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="backgroundImage" id="::css::CSS2Properties::backgroundImage">
        <webidl>             attribute DOMString        backgroundImage setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="backgroundPosition" id="::css::CSS2Properties::backgroundPosition">
        <webidl>             attribute DOMString        backgroundPosition setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="backgroundRepeat" id="::css::CSS2Properties::backgroundRepeat">
        <webidl>             attribute DOMString        backgroundRepeat setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="border" id="::css::CSS2Properties::border">
        <webidl>             attribute DOMString        border setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="borderCollapse" id="::css::CSS2Properties::borderCollapse">
        <webidl>             attribute DOMString        borderCollapse setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="borderColor" id="::css::CSS2Properties::borderColor">
        <webidl>             attribute DOMString        borderColor setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="borderSpacing" id="::css::CSS2Properties::borderSpacing">
        <webidl>             attribute DOMString        borderSpacing setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="borderStyle" id="::css::CSS2Properties::borderStyle">
        <webidl>             attribute DOMString        borderStyle setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="borderTop" id="::css::CSS2Properties::borderTop">
        <webidl>             attribute DOMString        borderTop setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="borderRight" id="::css::CSS2Properties::borderRight">
        <webidl>             attribute DOMString        borderRight setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="borderBottom" id="::css::CSS2Properties::borderBottom">
        <webidl>             attribute DOMString        borderBottom setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="borderLeft" id="::css::CSS2Properties::borderLeft">
        <webidl>             attribute DOMString        borderLeft setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="borderTopColor" id="::css::CSS2Properties::borderTopColor">
        <webidl>             attribute DOMString        borderTopColor setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="borderRightColor" id="::css::CSS2Properties::borderRightColor">
        <webidl>             attribute DOMString        borderRightColor setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="borderBottomColor" id="::css::CSS2Properties::borderBottomColor">
        <webidl>             attribute DOMString        borderBottomColor setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="borderLeftColor" id="::css::CSS2Properties::borderLeftColor">
        <webidl>             attribute DOMString        borderLeftColor setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="borderTopStyle" id="::css::CSS2Properties::borderTopStyle">
        <webidl>             attribute DOMString        borderTopStyle setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="borderRightStyle" id="::css::CSS2Properties::borderRightStyle">
        <webidl>             attribute DOMString        borderRightStyle setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="borderBottomStyle" id="::css::CSS2Properties::borderBottomStyle">
        <webidl>             attribute DOMString        borderBottomStyle setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="borderLeftStyle" id="::css::CSS2Properties::borderLeftStyle">
        <webidl>             attribute DOMString        borderLeftStyle setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="borderTopWidth" id="::css::CSS2Properties::borderTopWidth">
        <webidl>             attribute DOMString        borderTopWidth setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="borderRightWidth" id="::css::CSS2Properties::borderRightWidth">
        <webidl>             attribute DOMString        borderRightWidth setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="borderBottomWidth" id="::css::CSS2Properties::borderBottomWidth">
        <webidl>             attribute DOMString        borderBottomWidth setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="borderLeftWidth" id="::css::CSS2Properties::borderLeftWidth">
        <webidl>             attribute DOMString        borderLeftWidth setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="borderWidth" id="::css::CSS2Properties::borderWidth">
        <webidl>             attribute DOMString        borderWidth setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="bottom" id="::css::CSS2Properties::bottom">
        <webidl>             attribute DOMString        bottom setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="captionSide" id="::css::CSS2Properties::captionSide">
        <webidl>             attribute DOMString        captionSide setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="clear" id="::css::CSS2Properties::clear">
        <webidl>             attribute DOMString        clear setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="clip" id="::css::CSS2Properties::clip">
        <webidl>             attribute DOMString        clip setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="color" id="::css::CSS2Properties::color">
        <webidl>             attribute DOMString        color setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="content" id="::css::CSS2Properties::content">
        <webidl>             attribute DOMString        content setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="counterIncrement" id="::css::CSS2Properties::counterIncrement">
        <webidl>             attribute DOMString        counterIncrement setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="counterReset" id="::css::CSS2Properties::counterReset">
        <webidl>             attribute DOMString        counterReset setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="cue" id="::css::CSS2Properties::cue">
        <webidl>             attribute DOMString        cue setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="cueAfter" id="::css::CSS2Properties::cueAfter">
        <webidl>             attribute DOMString        cueAfter setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="cueBefore" id="::css::CSS2Properties::cueBefore">
        <webidl>             attribute DOMString        cueBefore setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="cursor" id="::css::CSS2Properties::cursor">
        <webidl>             attribute DOMString        cursor setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="direction" id="::css::CSS2Properties::direction">
        <webidl>             attribute DOMString        direction setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="display" id="::css::CSS2Properties::display">
        <webidl>             attribute DOMString        display setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="elevation" id="::css::CSS2Properties::elevation">
        <webidl>             attribute DOMString        elevation setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="emptyCells" id="::css::CSS2Properties::emptyCells">
        <webidl>             attribute DOMString        emptyCells setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="cssFloat" id="::css::CSS2Properties::cssFloat">
        <webidl>             attribute DOMString        cssFloat setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="font" id="::css::CSS2Properties::font">
        <webidl>             attribute DOMString        font setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="fontFamily" id="::css::CSS2Properties::fontFamily">
        <webidl>             attribute DOMString        fontFamily setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="fontSize" id="::css::CSS2Properties::fontSize">
        <webidl>             attribute DOMString        fontSize setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="fontSizeAdjust" id="::css::CSS2Properties::fontSizeAdjust">
        <webidl>             attribute DOMString        fontSizeAdjust setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="fontStretch" id="::css::CSS2Properties::fontStretch">
        <webidl>             attribute DOMString        fontStretch setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="fontStyle" id="::css::CSS2Properties::fontStyle">
        <webidl>             attribute DOMString        fontStyle setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="fontVariant" id="::css::CSS2Properties::fontVariant">
        <webidl>             attribute DOMString        fontVariant setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="fontWeight" id="::css::CSS2Properties::fontWeight">
        <webidl>             attribute DOMString        fontWeight setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="height" id="::css::CSS2Properties::height">
        <webidl>             attribute DOMString        height setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="left" id="::css::CSS2Properties::left">
        <webidl>             attribute DOMString        left setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="letterSpacing" id="::css::CSS2Properties::letterSpacing">
        <webidl>             attribute DOMString        letterSpacing setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="lineHeight" id="::css::CSS2Properties::lineHeight">
        <webidl>             attribute DOMString        lineHeight setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="listStyle" id="::css::CSS2Properties::listStyle">
        <webidl>             attribute DOMString        listStyle setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="listStyleImage" id="::css::CSS2Properties::listStyleImage">
        <webidl>             attribute DOMString        listStyleImage setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="listStylePosition" id="::css::CSS2Properties::listStylePosition">
        <webidl>             attribute DOMString        listStylePosition setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="listStyleType" id="::css::CSS2Properties::listStyleType">
        <webidl>             attribute DOMString        listStyleType setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="margin" id="::css::CSS2Properties::margin">
        <webidl>             attribute DOMString        margin setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="marginTop" id="::css::CSS2Properties::marginTop">
        <webidl>             attribute DOMString        marginTop setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="marginRight" id="::css::CSS2Properties::marginRight">
        <webidl>             attribute DOMString        marginRight setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="marginBottom" id="::css::CSS2Properties::marginBottom">
        <webidl>             attribute DOMString        marginBottom setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="marginLeft" id="::css::CSS2Properties::marginLeft">
        <webidl>             attribute DOMString        marginLeft setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="markerOffset" id="::css::CSS2Properties::markerOffset">
        <webidl>             attribute DOMString        markerOffset setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="marks" id="::css::CSS2Properties::marks">
        <webidl>             attribute DOMString        marks setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="maxHeight" id="::css::CSS2Properties::maxHeight">
        <webidl>             attribute DOMString        maxHeight setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="maxWidth" id="::css::CSS2Properties::maxWidth">
        <webidl>             attribute DOMString        maxWidth setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="minHeight" id="::css::CSS2Properties::minHeight">
        <webidl>             attribute DOMString        minHeight setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="minWidth" id="::css::CSS2Properties::minWidth">
        <webidl>             attribute DOMString        minWidth setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="orphans" id="::css::CSS2Properties::orphans">
        <webidl>             attribute DOMString        orphans setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="outline" id="::css::CSS2Properties::outline">
        <webidl>             attribute DOMString        outline setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="outlineColor" id="::css::CSS2Properties::outlineColor">
        <webidl>             attribute DOMString        outlineColor setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="outlineStyle" id="::css::CSS2Properties::outlineStyle">
        <webidl>             attribute DOMString        outlineStyle setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="outlineWidth" id="::css::CSS2Properties::outlineWidth">
        <webidl>             attribute DOMString        outlineWidth setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="overflow" id="::css::CSS2Properties::overflow">
        <webidl>             attribute DOMString        overflow setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="padding" id="::css::CSS2Properties::padding">
        <webidl>             attribute DOMString        padding setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="paddingTop" id="::css::CSS2Properties::paddingTop">
        <webidl>             attribute DOMString        paddingTop setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="paddingRight" id="::css::CSS2Properties::paddingRight">
        <webidl>             attribute DOMString        paddingRight setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="paddingBottom" id="::css::CSS2Properties::paddingBottom">
        <webidl>             attribute DOMString        paddingBottom setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="paddingLeft" id="::css::CSS2Properties::paddingLeft">
        <webidl>             attribute DOMString        paddingLeft setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="page" id="::css::CSS2Properties::page">
        <webidl>             attribute DOMString        page setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="pageBreakAfter" id="::css::CSS2Properties::pageBreakAfter">
        <webidl>             attribute DOMString        pageBreakAfter setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="pageBreakBefore" id="::css::CSS2Properties::pageBreakBefore">
        <webidl>             attribute DOMString        pageBreakBefore setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="pageBreakInside" id="::css::CSS2Properties::pageBreakInside">
        <webidl>             attribute DOMString        pageBreakInside setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="pause" id="::css::CSS2Properties::pause">
        <webidl>             attribute DOMString        pause setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="pauseAfter" id="::css::CSS2Properties::pauseAfter">
        <webidl>             attribute DOMString        pauseAfter setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="pauseBefore" id="::css::CSS2Properties::pauseBefore">
        <webidl>             attribute DOMString        pauseBefore setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="pitch" id="::css::CSS2Properties::pitch">
        <webidl>             attribute DOMString        pitch setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="pitchRange" id="::css::CSS2Properties::pitchRange">
        <webidl>             attribute DOMString        pitchRange setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="playDuring" id="::css::CSS2Properties::playDuring">
        <webidl>             attribute DOMString        playDuring setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="position" id="::css::CSS2Properties::position">
        <webidl>             attribute DOMString        position setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="quotes" id="::css::CSS2Properties::quotes">
        <webidl>             attribute DOMString        quotes setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="richness" id="::css::CSS2Properties::richness">
        <webidl>             attribute DOMString        richness setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="right" id="::css::CSS2Properties::right">
        <webidl>             attribute DOMString        right setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="size" id="::css::CSS2Properties::size">
        <webidl>             attribute DOMString        size setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="speak" id="::css::CSS2Properties::speak">
        <webidl>             attribute DOMString        speak setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="speakHeader" id="::css::CSS2Properties::speakHeader">
        <webidl>             attribute DOMString        speakHeader setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="speakNumeral" id="::css::CSS2Properties::speakNumeral">
        <webidl>             attribute DOMString        speakNumeral setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="speakPunctuation" id="::css::CSS2Properties::speakPunctuation">
        <webidl>             attribute DOMString        speakPunctuation setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="speechRate" id="::css::CSS2Properties::speechRate">
        <webidl>             attribute DOMString        speechRate setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="stress" id="::css::CSS2Properties::stress">
        <webidl>             attribute DOMString        stress setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="tableLayout" id="::css::CSS2Properties::tableLayout">
        <webidl>             attribute DOMString        tableLayout setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="textAlign" id="::css::CSS2Properties::textAlign">
        <webidl>             attribute DOMString        textAlign setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="textDecoration" id="::css::CSS2Properties::textDecoration">
        <webidl>             attribute DOMString        textDecoration setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="textIndent" id="::css::CSS2Properties::textIndent">
        <webidl>             attribute DOMString        textIndent setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="textShadow" id="::css::CSS2Properties::textShadow">
        <webidl>             attribute DOMString        textShadow setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="textTransform" id="::css::CSS2Properties::textTransform">
        <webidl>             attribute DOMString        textTransform setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="top" id="::css::CSS2Properties::top">
        <webidl>             attribute DOMString        top setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="unicodeBidi" id="::css::CSS2Properties::unicodeBidi">
        <webidl>             attribute DOMString        unicodeBidi setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="verticalAlign" id="::css::CSS2Properties::verticalAlign">
        <webidl>             attribute DOMString        verticalAlign setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="visibility" id="::css::CSS2Properties::visibility">
        <webidl>             attribute DOMString        visibility setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="voiceFamily" id="::css::CSS2Properties::voiceFamily">
        <webidl>             attribute DOMString        voiceFamily setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="volume" id="::css::CSS2Properties::volume">
        <webidl>             attribute DOMString        volume setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="whiteSpace" id="::css::CSS2Properties::whiteSpace">
        <webidl>             attribute DOMString        whiteSpace setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="widows" id="::css::CSS2Properties::widows">
        <webidl>             attribute DOMString        widows setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="width" id="::css::CSS2Properties::width">
        <webidl>             attribute DOMString        width setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="wordSpacing" id="::css::CSS2Properties::wordSpacing">
        <webidl>             attribute DOMString        wordSpacing setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="zIndex" id="::css::CSS2Properties::zIndex">
        <webidl>             attribute DOMString        zIndex setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
    </Interface>
    <Interface name="CSSStyleSheet" id="::css::CSSStyleSheet">
      <webidl>  interface CSSStyleSheet : <ref>stylesheets::StyleSheet</ref> {
    readonly attribute <ref>CSSRule</ref>          ownerRule;
    readonly attribute <ref>CSSRuleList</ref>      cssRules;
    unsigned long      insertRule(in DOMString rule, 
                                  in unsigned long index)
                                        raises(<ref>DOMException</ref>);
    void               deleteRule(in unsigned long index)
                                        raises(<ref>DOMException</ref>);
  };</webidl>
      <InterfaceInheritance>
        <Name name="stylesheetsStyleSheet"/>
      </InterfaceInheritance>
      <Attribute readonly="readonly" name="ownerRule" id="::css::CSSStyleSheet::ownerRule">
        <webidl>    readonly attribute <ref>CSSRule</ref>          ownerRule;</webidl>
        <Type name="CSSRule"/>
      </Attribute>
      <Attribute readonly="readonly" name="cssRules" id="::css::CSSStyleSheet::cssRules">
        <webidl>    readonly attribute <ref>CSSRuleList</ref>      cssRules;</webidl>
        <Type name="CSSRuleList"/>
      </Attribute>
      <Operation name="insertRule" id="::css::CSSStyleSheet::insertRule">
        <webidl>    unsigned long      insertRule(in DOMString rule, 
                                  in unsigned long index)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="unsigned long"/>
        <ArgumentList>
          <Argument in="in" name="rule">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="index">
            <Type type="unsigned long"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="deleteRule" id="::css::CSSStyleSheet::deleteRule">
        <webidl>    void               deleteRule(in unsigned long index)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="index">
            <Type type="unsigned long"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
    </Interface>
    <Interface name="ViewCSS" id="::css::ViewCSS">
      <webidl>  interface ViewCSS  {
    <ref>CSSStyleDeclaration</ref> getComputedStyle(in <ref>Element</ref> elt, 
                                         in DOMString? pseudoElt);
  };</webidl>
      <Operation name="getComputedStyle" id="::css::ViewCSS::getComputedStyle">
        <webidl>    <ref>CSSStyleDeclaration</ref> getComputedStyle(in <ref>Element</ref> elt, 
                                         in DOMString? pseudoElt);</webidl>
        <Type name="CSSStyleDeclaration"/>
        <ArgumentList>
          <Argument in="in" name="elt">
            <Type name="Element"/>
          </Argument>
          <Argument in="in" name="pseudoElt">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
        </ArgumentList>
      </Operation>
    </Interface>
    <Implements name1="AbstractView" name2="ViewCSS">
      <webidl>  <ref>AbstractView</ref> implements <ref>ViewCSS</ref>;</webidl>
    </Implements>
    <Interface name="DocumentCSS" id="::css::DocumentCSS">
      <webidl>  interface DocumentCSS  {
    <ref>CSSStyleDeclaration</ref> getOverrideStyle(in <ref>Element</ref> elt, 
                                         in DOMString? pseudoElt);
  };</webidl>
      <Operation name="getOverrideStyle" id="::css::DocumentCSS::getOverrideStyle">
        <webidl>    <ref>CSSStyleDeclaration</ref> getOverrideStyle(in <ref>Element</ref> elt, 
                                         in DOMString? pseudoElt);</webidl>
        <Type name="CSSStyleDeclaration"/>
        <ArgumentList>
          <Argument in="in" name="elt">
            <Type name="Element"/>
          </Argument>
          <Argument in="in" name="pseudoElt">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
        </ArgumentList>
      </Operation>
    </Interface>
    <Implements name1="Document" name2="DocumentCSS">
      <webidl>  <ref>Document</ref> implements <ref>DocumentCSS</ref>;</webidl>
    </Implements>
    <Interface name="DOMImplementationCSS" id="::css::DOMImplementationCSS">
      <webidl>  interface DOMImplementationCSS  {
    <ref>CSSStyleSheet</ref>      createCSSStyleSheet(in DOMString title, 
                                           in DOMString media)
                                        raises(<ref>DOMException</ref>);
  };</webidl>
      <Operation name="createCSSStyleSheet" id="::css::DOMImplementationCSS::createCSSStyleSheet">
        <webidl>    <ref>CSSStyleSheet</ref>      createCSSStyleSheet(in DOMString title, 
                                           in DOMString media)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="CSSStyleSheet"/>
        <ArgumentList>
          <Argument in="in" name="title">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="media">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
    </Interface>
    <Implements name1="DOMImplementation" name2="DOMImplementationCSS">
      <webidl>  <ref>DOMImplementation</ref> implements <ref>DOMImplementationCSS</ref>;</webidl>
    </Implements>
  </Module>
</Definitions>
<Definitions>
  <Module name="events" id="::events">
    <webidl>module events {

  typedef <ref>dom::DOMTimeStamp</ref> DOMTimeStamp;
  typedef <ref>dom::Node</ref> Node;
  typedef <ref>dom::DOMException</ref> DOMException;

  exception EventException {
    const unsigned short      UNSPECIFIED_EVENT_TYPE_ERR     = 0;

    unsigned short   code;
  };


  interface EventTarget {
    void               addEventListener(in DOMString type, 
                                        in <ref>EventListener</ref> listener, 
                                        in boolean useCapture);
    void               removeEventListener(in DOMString type, 
                                           in <ref>EventListener</ref> listener, 
                                           in boolean useCapture);
    boolean            dispatchEvent(in <ref>Event</ref> evt)
                                        raises(<ref>EventException</ref>);
  };

  <ref>Node</ref> implements <ref>EventTarget</ref>;

  [Callback]
  interface EventListener {
    void               handleEvent(in <ref>Event</ref> evt);
  };

  [PrototypeRoot]
  interface Event {

    const unsigned short      CAPTURING_PHASE                = 1;
    const unsigned short      AT_TARGET                      = 2;
    const unsigned short      BUBBLING_PHASE                 = 3;

    readonly attribute DOMString        type;
    readonly attribute <ref>EventTarget</ref>      target;
    readonly attribute <ref>EventTarget</ref>      currentTarget;
    readonly attribute unsigned short   eventPhase;
    readonly attribute boolean          bubbles;
    readonly attribute boolean          cancelable;
    readonly attribute <ref>DOMTimeStamp</ref>     timeStamp;
    void               stopPropagation();
    void               preventDefault();
    void               initEvent(in DOMString eventTypeArg, 
                                 in boolean canBubbleArg, 
                                 in boolean cancelableArg);
  };

  interface DocumentEvent {
    <ref>Event</ref>              createEvent(in DOMString eventType)
                                        raises(<ref>DOMException</ref>);
  };

  <ref>Document</ref> implements <ref>DocumentEvent</ref>;

  interface UIEvent : <ref>Event</ref> {
    readonly attribute <ref>views::AbstractView</ref>  view;
    readonly attribute long             detail;
    void               initUIEvent(in DOMString typeArg, 
                                   in boolean canBubbleArg, 
                                   in boolean cancelableArg, 
                                   in <ref>views::AbstractView</ref> viewArg, 
                                   in long detailArg);
  };

  interface MouseEvent : <ref>UIEvent</ref> {
    readonly attribute long             screenX;
    readonly attribute long             screenY;
    readonly attribute long             clientX;
    readonly attribute long             clientY;
    readonly attribute boolean          ctrlKey;
    readonly attribute boolean          shiftKey;
    readonly attribute boolean          altKey;
    readonly attribute boolean          metaKey;
    readonly attribute unsigned short   button;
    readonly attribute <ref>EventTarget</ref>      relatedTarget;
    void               initMouseEvent(in DOMString typeArg, 
                                      in boolean canBubbleArg, 
                                      in boolean cancelableArg, 
                                      in <ref>views::AbstractView</ref> viewArg, 
                                      in long detailArg, 
                                      in long screenXArg, 
                                      in long screenYArg, 
                                      in long clientXArg, 
                                      in long clientYArg, 
                                      in boolean ctrlKeyArg, 
                                      in boolean altKeyArg, 
                                      in boolean shiftKeyArg, 
                                      in boolean metaKeyArg, 
                                      in unsigned short buttonArg, 
                                      in <ref>EventTarget</ref> relatedTargetArg);
  };

  interface MutationEvent : <ref>Event</ref> {

    const unsigned short      MODIFICATION                   = 1;
    const unsigned short      ADDITION                       = 2;
    const unsigned short      REMOVAL                        = 3;

    readonly attribute <ref>Node</ref>             relatedNode;
    readonly attribute DOMString?       prevValue;
    readonly attribute DOMString?       newValue;
    readonly attribute DOMString?       attrName;
    readonly attribute unsigned short   attrChange;
    void               initMutationEvent(in DOMString typeArg, 
                                         in boolean canBubbleArg, 
                                         in boolean cancelableArg, 
                                         in <ref>Node</ref> relatedNodeArg, 
                                         in DOMString? prevValueArg, 
                                         in DOMString? newValueArg, 
                                         in DOMString? attrNameArg, 
                                         in unsigned short attrChangeArg);
  };
};</webidl>
    <Typedef name="DOMTimeStamp" id="::events::DOMTimeStamp">
      <webidl>  typedef <ref>dom::DOMTimeStamp</ref> DOMTimeStamp;</webidl>
      <Type name="domDOMTimeStamp"/>
    </Typedef>
    <Typedef name="Node" id="::events::Node">
      <webidl>  typedef <ref>dom::Node</ref> Node;</webidl>
      <Type name="domNode"/>
    </Typedef>
    <Typedef name="DOMException" id="::events::DOMException">
      <webidl>  typedef <ref>dom::DOMException</ref> DOMException;</webidl>
      <Type name="domDOMException"/>
    </Typedef>
    <Exception name="EventException" id="::events::EventException">
      <webidl>  exception EventException {
    const unsigned short      UNSPECIFIED_EVENT_TYPE_ERR     = 0;

    unsigned short   code;
  };</webidl>
      <Const name="UNSPECIFIED_EVENT_TYPE_ERR" value="0" id="::events::EventException::UNSPECIFIED_EVENT_TYPE_ERR">
        <Type type="unsigned short"/>
      </Const>
      <ExceptionField name="code" id="::events::EventException::code">
        <Type type="unsigned short"/>
      </ExceptionField>
    </Exception>
    <Interface name="EventTarget" id="::events::EventTarget">
      <webidl>  interface EventTarget {
    void               addEventListener(in DOMString type, 
                                        in <ref>EventListener</ref> listener, 
                                        in boolean useCapture);
    void               removeEventListener(in DOMString type, 
                                           in <ref>EventListener</ref> listener, 
                                           in boolean useCapture);
    boolean            dispatchEvent(in <ref>Event</ref> evt)
                                        raises(<ref>EventException</ref>);
  };</webidl>
      <Operation name="addEventListener" id="::events::EventTarget::addEventListener">
        <webidl>    void               addEventListener(in DOMString type, 
                                        in <ref>EventListener</ref> listener, 
                                        in boolean useCapture);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="type">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="listener">
            <Type name="EventListener"/>
          </Argument>
          <Argument in="in" name="useCapture">
            <Type type="boolean"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="removeEventListener" id="::events::EventTarget::removeEventListener">
        <webidl>    void               removeEventListener(in DOMString type, 
                                           in <ref>EventListener</ref> listener, 
                                           in boolean useCapture);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="type">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="listener">
            <Type name="EventListener"/>
          </Argument>
          <Argument in="in" name="useCapture">
            <Type type="boolean"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="dispatchEvent" id="::events::EventTarget::dispatchEvent">
        <webidl>    boolean            dispatchEvent(in <ref>Event</ref> evt)
                                        raises(<ref>EventException</ref>);</webidl>
        <Type type="boolean"/>
        <ArgumentList>
          <Argument in="in" name="evt">
            <Type name="Event"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="EventException"/>
        </Raises>
      </Operation>
    </Interface>
    <Implements name1="Node" name2="EventTarget">
      <webidl>  <ref>Node</ref> implements <ref>EventTarget</ref>;</webidl>
    </Implements>
    <Interface name="EventListener" id="::events::EventListener">
      <webidl>  [Callback]
  interface EventListener {
    void               handleEvent(in <ref>Event</ref> evt);
  };</webidl>
      <ExtendedAttributeList>
        <ExtendedAttribute name="Callback"/>
      </ExtendedAttributeList>
      <Operation name="handleEvent" id="::events::EventListener::handleEvent">
        <webidl>    void               handleEvent(in <ref>Event</ref> evt);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="evt">
            <Type name="Event"/>
          </Argument>
        </ArgumentList>
      </Operation>
    </Interface>
    <Interface name="Event" id="::events::Event">
      <webidl>  [PrototypeRoot]
  interface Event {

    const unsigned short      CAPTURING_PHASE                = 1;
    const unsigned short      AT_TARGET                      = 2;
    const unsigned short      BUBBLING_PHASE                 = 3;

    readonly attribute DOMString        type;
    readonly attribute <ref>EventTarget</ref>      target;
    readonly attribute <ref>EventTarget</ref>      currentTarget;
    readonly attribute unsigned short   eventPhase;
    readonly attribute boolean          bubbles;
    readonly attribute boolean          cancelable;
    readonly attribute <ref>DOMTimeStamp</ref>     timeStamp;
    void               stopPropagation();
    void               preventDefault();
    void               initEvent(in DOMString eventTypeArg, 
                                 in boolean canBubbleArg, 
                                 in boolean cancelableArg);
  };</webidl>
      <ExtendedAttributeList>
        <ExtendedAttribute name="PrototypeRoot"/>
      </ExtendedAttributeList>
      <Const name="CAPTURING_PHASE" value="1" id="::events::Event::CAPTURING_PHASE">
        <webidl>    const unsigned short      CAPTURING_PHASE                = 1;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="AT_TARGET" value="2" id="::events::Event::AT_TARGET">
        <webidl>    const unsigned short      AT_TARGET                      = 2;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="BUBBLING_PHASE" value="3" id="::events::Event::BUBBLING_PHASE">
        <webidl>    const unsigned short      BUBBLING_PHASE                 = 3;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Attribute readonly="readonly" name="type" id="::events::Event::type">
        <webidl>    readonly attribute DOMString        type;</webidl>
        <Type type="DOMString"/>
      </Attribute>
      <Attribute readonly="readonly" name="target" id="::events::Event::target">
        <webidl>    readonly attribute <ref>EventTarget</ref>      target;</webidl>
        <Type name="EventTarget"/>
      </Attribute>
      <Attribute readonly="readonly" name="currentTarget" id="::events::Event::currentTarget">
        <webidl>    readonly attribute <ref>EventTarget</ref>      currentTarget;</webidl>
        <Type name="EventTarget"/>
      </Attribute>
      <Attribute readonly="readonly" name="eventPhase" id="::events::Event::eventPhase">
        <webidl>    readonly attribute unsigned short   eventPhase;</webidl>
        <Type type="unsigned short"/>
      </Attribute>
      <Attribute readonly="readonly" name="bubbles" id="::events::Event::bubbles">
        <webidl>    readonly attribute boolean          bubbles;</webidl>
        <Type type="boolean"/>
      </Attribute>
      <Attribute readonly="readonly" name="cancelable" id="::events::Event::cancelable">
        <webidl>    readonly attribute boolean          cancelable;</webidl>
        <Type type="boolean"/>
      </Attribute>
      <Attribute readonly="readonly" name="timeStamp" id="::events::Event::timeStamp">
        <webidl>    readonly attribute <ref>DOMTimeStamp</ref>     timeStamp;</webidl>
        <Type name="DOMTimeStamp"/>
      </Attribute>
      <Operation name="stopPropagation" id="::events::Event::stopPropagation">
        <webidl>    void               stopPropagation();</webidl>
        <Type type="void"/>
        <ArgumentList/>
      </Operation>
      <Operation name="preventDefault" id="::events::Event::preventDefault">
        <webidl>    void               preventDefault();</webidl>
        <Type type="void"/>
        <ArgumentList/>
      </Operation>
      <Operation name="initEvent" id="::events::Event::initEvent">
        <webidl>    void               initEvent(in DOMString eventTypeArg, 
                                 in boolean canBubbleArg, 
                                 in boolean cancelableArg);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="eventTypeArg">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="canBubbleArg">
            <Type type="boolean"/>
          </Argument>
          <Argument in="in" name="cancelableArg">
            <Type type="boolean"/>
          </Argument>
        </ArgumentList>
      </Operation>
    </Interface>
    <Interface name="DocumentEvent" id="::events::DocumentEvent">
      <webidl>  interface DocumentEvent {
    <ref>Event</ref>              createEvent(in DOMString eventType)
                                        raises(<ref>DOMException</ref>);
  };</webidl>
      <Operation name="createEvent" id="::events::DocumentEvent::createEvent">
        <webidl>    <ref>Event</ref>              createEvent(in DOMString eventType)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Event"/>
        <ArgumentList>
          <Argument in="in" name="eventType">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
    </Interface>
    <Implements name1="Document" name2="DocumentEvent">
      <webidl>  <ref>Document</ref> implements <ref>DocumentEvent</ref>;</webidl>
    </Implements>
    <Interface name="UIEvent" id="::events::UIEvent">
      <webidl>  interface UIEvent : <ref>Event</ref> {
    readonly attribute <ref>views::AbstractView</ref>  view;
    readonly attribute long             detail;
    void               initUIEvent(in DOMString typeArg, 
                                   in boolean canBubbleArg, 
                                   in boolean cancelableArg, 
                                   in <ref>views::AbstractView</ref> viewArg, 
                                   in long detailArg);
  };</webidl>
      <InterfaceInheritance>
        <Name name="Event"/>
      </InterfaceInheritance>
      <Attribute readonly="readonly" name="view" id="::events::UIEvent::view">
        <webidl>    readonly attribute <ref>views::AbstractView</ref>  view;</webidl>
        <Type name="viewsAbstractView"/>
      </Attribute>
      <Attribute readonly="readonly" name="detail" id="::events::UIEvent::detail">
        <webidl>    readonly attribute long             detail;</webidl>
        <Type type="long"/>
      </Attribute>
      <Operation name="initUIEvent" id="::events::UIEvent::initUIEvent">
        <webidl>    void               initUIEvent(in DOMString typeArg, 
                                   in boolean canBubbleArg, 
                                   in boolean cancelableArg, 
                                   in <ref>views::AbstractView</ref> viewArg, 
                                   in long detailArg);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="typeArg">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="canBubbleArg">
            <Type type="boolean"/>
          </Argument>
          <Argument in="in" name="cancelableArg">
            <Type type="boolean"/>
          </Argument>
          <Argument in="in" name="viewArg">
            <Type name="viewsAbstractView"/>
          </Argument>
          <Argument in="in" name="detailArg">
            <Type type="long"/>
          </Argument>
        </ArgumentList>
      </Operation>
    </Interface>
    <Interface name="MouseEvent" id="::events::MouseEvent">
      <webidl>  interface MouseEvent : <ref>UIEvent</ref> {
    readonly attribute long             screenX;
    readonly attribute long             screenY;
    readonly attribute long             clientX;
    readonly attribute long             clientY;
    readonly attribute boolean          ctrlKey;
    readonly attribute boolean          shiftKey;
    readonly attribute boolean          altKey;
    readonly attribute boolean          metaKey;
    readonly attribute unsigned short   button;
    readonly attribute <ref>EventTarget</ref>      relatedTarget;
    void               initMouseEvent(in DOMString typeArg, 
                                      in boolean canBubbleArg, 
                                      in boolean cancelableArg, 
                                      in <ref>views::AbstractView</ref> viewArg, 
                                      in long detailArg, 
                                      in long screenXArg, 
                                      in long screenYArg, 
                                      in long clientXArg, 
                                      in long clientYArg, 
                                      in boolean ctrlKeyArg, 
                                      in boolean altKeyArg, 
                                      in boolean shiftKeyArg, 
                                      in boolean metaKeyArg, 
                                      in unsigned short buttonArg, 
                                      in <ref>EventTarget</ref> relatedTargetArg);
  };</webidl>
      <InterfaceInheritance>
        <Name name="UIEvent"/>
      </InterfaceInheritance>
      <Attribute readonly="readonly" name="screenX" id="::events::MouseEvent::screenX">
        <webidl>    readonly attribute long             screenX;</webidl>
        <Type type="long"/>
      </Attribute>
      <Attribute readonly="readonly" name="screenY" id="::events::MouseEvent::screenY">
        <webidl>    readonly attribute long             screenY;</webidl>
        <Type type="long"/>
      </Attribute>
      <Attribute readonly="readonly" name="clientX" id="::events::MouseEvent::clientX">
        <webidl>    readonly attribute long             clientX;</webidl>
        <Type type="long"/>
      </Attribute>
      <Attribute readonly="readonly" name="clientY" id="::events::MouseEvent::clientY">
        <webidl>    readonly attribute long             clientY;</webidl>
        <Type type="long"/>
      </Attribute>
      <Attribute readonly="readonly" name="ctrlKey" id="::events::MouseEvent::ctrlKey">
        <webidl>    readonly attribute boolean          ctrlKey;</webidl>
        <Type type="boolean"/>
      </Attribute>
      <Attribute readonly="readonly" name="shiftKey" id="::events::MouseEvent::shiftKey">
        <webidl>    readonly attribute boolean          shiftKey;</webidl>
        <Type type="boolean"/>
      </Attribute>
      <Attribute readonly="readonly" name="altKey" id="::events::MouseEvent::altKey">
        <webidl>    readonly attribute boolean          altKey;</webidl>
        <Type type="boolean"/>
      </Attribute>
      <Attribute readonly="readonly" name="metaKey" id="::events::MouseEvent::metaKey">
        <webidl>    readonly attribute boolean          metaKey;</webidl>
        <Type type="boolean"/>
      </Attribute>
      <Attribute readonly="readonly" name="button" id="::events::MouseEvent::button">
        <webidl>    readonly attribute unsigned short   button;</webidl>
        <Type type="unsigned short"/>
      </Attribute>
      <Attribute readonly="readonly" name="relatedTarget" id="::events::MouseEvent::relatedTarget">
        <webidl>    readonly attribute <ref>EventTarget</ref>      relatedTarget;</webidl>
        <Type name="EventTarget"/>
      </Attribute>
      <Operation name="initMouseEvent" id="::events::MouseEvent::initMouseEvent">
        <webidl>    void               initMouseEvent(in DOMString typeArg, 
                                      in boolean canBubbleArg, 
                                      in boolean cancelableArg, 
                                      in <ref>views::AbstractView</ref> viewArg, 
                                      in long detailArg, 
                                      in long screenXArg, 
                                      in long screenYArg, 
                                      in long clientXArg, 
                                      in long clientYArg, 
                                      in boolean ctrlKeyArg, 
                                      in boolean altKeyArg, 
                                      in boolean shiftKeyArg, 
                                      in boolean metaKeyArg, 
                                      in unsigned short buttonArg, 
                                      in <ref>EventTarget</ref> relatedTargetArg);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="typeArg">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="canBubbleArg">
            <Type type="boolean"/>
          </Argument>
          <Argument in="in" name="cancelableArg">
            <Type type="boolean"/>
          </Argument>
          <Argument in="in" name="viewArg">
            <Type name="viewsAbstractView"/>
          </Argument>
          <Argument in="in" name="detailArg">
            <Type type="long"/>
          </Argument>
          <Argument in="in" name="screenXArg">
            <Type type="long"/>
          </Argument>
          <Argument in="in" name="screenYArg">
            <Type type="long"/>
          </Argument>
          <Argument in="in" name="clientXArg">
            <Type type="long"/>
          </Argument>
          <Argument in="in" name="clientYArg">
            <Type type="long"/>
          </Argument>
          <Argument in="in" name="ctrlKeyArg">
            <Type type="boolean"/>
          </Argument>
          <Argument in="in" name="altKeyArg">
            <Type type="boolean"/>
          </Argument>
          <Argument in="in" name="shiftKeyArg">
            <Type type="boolean"/>
          </Argument>
          <Argument in="in" name="metaKeyArg">
            <Type type="boolean"/>
          </Argument>
          <Argument in="in" name="buttonArg">
            <Type type="unsigned short"/>
          </Argument>
          <Argument in="in" name="relatedTargetArg">
            <Type name="EventTarget"/>
          </Argument>
        </ArgumentList>
      </Operation>
    </Interface>
    <Interface name="MutationEvent" id="::events::MutationEvent">
      <webidl>  interface MutationEvent : <ref>Event</ref> {

    const unsigned short      MODIFICATION                   = 1;
    const unsigned short      ADDITION                       = 2;
    const unsigned short      REMOVAL                        = 3;

    readonly attribute <ref>Node</ref>             relatedNode;
    readonly attribute DOMString?       prevValue;
    readonly attribute DOMString?       newValue;
    readonly attribute DOMString?       attrName;
    readonly attribute unsigned short   attrChange;
    void               initMutationEvent(in DOMString typeArg, 
                                         in boolean canBubbleArg, 
                                         in boolean cancelableArg, 
                                         in <ref>Node</ref> relatedNodeArg, 
                                         in DOMString? prevValueArg, 
                                         in DOMString? newValueArg, 
                                         in DOMString? attrNameArg, 
                                         in unsigned short attrChangeArg);
  };</webidl>
      <InterfaceInheritance>
        <Name name="Event"/>
      </InterfaceInheritance>
      <Const name="MODIFICATION" value="1" id="::events::MutationEvent::MODIFICATION">
        <webidl>    const unsigned short      MODIFICATION                   = 1;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="ADDITION" value="2" id="::events::MutationEvent::ADDITION">
        <webidl>    const unsigned short      ADDITION                       = 2;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="REMOVAL" value="3" id="::events::MutationEvent::REMOVAL">
        <webidl>    const unsigned short      REMOVAL                        = 3;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Attribute readonly="readonly" name="relatedNode" id="::events::MutationEvent::relatedNode">
        <webidl>    readonly attribute <ref>Node</ref>             relatedNode;</webidl>
        <Type name="Node"/>
      </Attribute>
      <Attribute readonly="readonly" name="prevValue" id="::events::MutationEvent::prevValue">
        <webidl>    readonly attribute DOMString?       prevValue;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute readonly="readonly" name="newValue" id="::events::MutationEvent::newValue">
        <webidl>    readonly attribute DOMString?       newValue;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute readonly="readonly" name="attrName" id="::events::MutationEvent::attrName">
        <webidl>    readonly attribute DOMString?       attrName;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute readonly="readonly" name="attrChange" id="::events::MutationEvent::attrChange">
        <webidl>    readonly attribute unsigned short   attrChange;</webidl>
        <Type type="unsigned short"/>
      </Attribute>
      <Operation name="initMutationEvent" id="::events::MutationEvent::initMutationEvent">
        <webidl>    void               initMutationEvent(in DOMString typeArg, 
                                         in boolean canBubbleArg, 
                                         in boolean cancelableArg, 
                                         in <ref>Node</ref> relatedNodeArg, 
                                         in DOMString? prevValueArg, 
                                         in DOMString? newValueArg, 
                                         in DOMString? attrNameArg, 
                                         in unsigned short attrChangeArg);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="typeArg">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="canBubbleArg">
            <Type type="boolean"/>
          </Argument>
          <Argument in="in" name="cancelableArg">
            <Type type="boolean"/>
          </Argument>
          <Argument in="in" name="relatedNodeArg">
            <Type name="Node"/>
          </Argument>
          <Argument in="in" name="prevValueArg">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="newValueArg">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="attrNameArg">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="attrChangeArg">
            <Type type="unsigned short"/>
          </Argument>
        </ArgumentList>
      </Operation>
    </Interface>
  </Module>
</Definitions>
<Definitions>
  <Module name="ranges" id="::ranges">
    <webidl>module ranges {

  typedef <ref>dom::Node</ref> Node;
  typedef <ref>dom::Document</ref> Document;
  typedef <ref>dom::DOMException</ref> DOMException;
  typedef <ref>dom::DocumentFragment</ref> DocumentFragment;

  exception RangeException {
    const unsigned short      BAD_BOUNDARYPOINTS_ERR         = 1;
    const unsigned short      INVALID_NODE_TYPE_ERR          = 2;

    unsigned short   code;
  };

  interface Range {
    readonly attribute <ref>Node</ref>             startContainer getraises(<ref>DOMException</ref>);

    readonly attribute long             startOffset getraises(<ref>DOMException</ref>);

    readonly attribute <ref>Node</ref>             endContainer getraises(<ref>DOMException</ref>);

    readonly attribute long             endOffset getraises(<ref>DOMException</ref>);

    readonly attribute boolean          collapsed getraises(<ref>DOMException</ref>);

    readonly attribute <ref>Node</ref>             commonAncestorContainer getraises(<ref>DOMException</ref>);

    void               setStart(in <ref>Node</ref> refNode, 
                                in long offset)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);
    void               setEnd(in <ref>Node</ref> refNode, 
                              in long offset)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);
    void               setStartBefore(in <ref>Node</ref> refNode)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);
    void               setStartAfter(in <ref>Node</ref> refNode)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);
    void               setEndBefore(in <ref>Node</ref> refNode)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);
    void               setEndAfter(in <ref>Node</ref> refNode)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);
    void               collapse(in boolean toStart)
                                        raises(<ref>DOMException</ref>);
    void               selectNode(in <ref>Node</ref> refNode)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);
    void               selectNodeContents(in <ref>Node</ref> refNode)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);

    const unsigned short      START_TO_START                 = 0;
    const unsigned short      START_TO_END                   = 1;
    const unsigned short      END_TO_END                     = 2;
    const unsigned short      END_TO_START                   = 3;

    short              compareBoundaryPoints(in unsigned short how, 
                                             in <ref>Range</ref> sourceRange)
                                        raises(<ref>DOMException</ref>);
    void               deleteContents()
                                        raises(<ref>DOMException</ref>);
    <ref>DocumentFragment</ref>   extractContents()
                                        raises(<ref>DOMException</ref>);
    <ref>DocumentFragment</ref>   cloneContents()
                                        raises(<ref>DOMException</ref>);
    void               insertNode(in <ref>Node</ref> newNode)
                                        raises(<ref>DOMException</ref>, 
                                               <ref>RangeException</ref>);
    void               surroundContents(in <ref>Node</ref> newParent)
                                        raises(<ref>DOMException</ref>, 
                                               <ref>RangeException</ref>);
    <ref>Range</ref>              cloneRange()
                                        raises(<ref>DOMException</ref>);
    DOMString          toString()
                                        raises(<ref>DOMException</ref>);
    void               detach()
                                        raises(<ref>DOMException</ref>);
  };

  interface DocumentRange {
    <ref>Range</ref>              createRange();
  };

  <ref>Document</ref> implements <ref>DocumentRange</ref>;
};</webidl>
    <Typedef name="Node" id="::ranges::Node">
      <webidl>  typedef <ref>dom::Node</ref> Node;</webidl>
      <Type name="domNode"/>
    </Typedef>
    <Typedef name="Document" id="::ranges::Document">
      <webidl>  typedef <ref>dom::Document</ref> Document;</webidl>
      <Type name="domDocument"/>
    </Typedef>
    <Typedef name="DOMException" id="::ranges::DOMException">
      <webidl>  typedef <ref>dom::DOMException</ref> DOMException;</webidl>
      <Type name="domDOMException"/>
    </Typedef>
    <Typedef name="DocumentFragment" id="::ranges::DocumentFragment">
      <webidl>  typedef <ref>dom::DocumentFragment</ref> DocumentFragment;</webidl>
      <Type name="domDocumentFragment"/>
    </Typedef>
    <Exception name="RangeException" id="::ranges::RangeException">
      <webidl>  exception RangeException {
    const unsigned short      BAD_BOUNDARYPOINTS_ERR         = 1;
    const unsigned short      INVALID_NODE_TYPE_ERR          = 2;

    unsigned short   code;
  };</webidl>
      <Const name="BAD_BOUNDARYPOINTS_ERR" value="1" id="::ranges::RangeException::BAD_BOUNDARYPOINTS_ERR">
        <Type type="unsigned short"/>
      </Const>
      <Const name="INVALID_NODE_TYPE_ERR" value="2" id="::ranges::RangeException::INVALID_NODE_TYPE_ERR">
        <Type type="unsigned short"/>
      </Const>
      <ExceptionField name="code" id="::ranges::RangeException::code">
        <Type type="unsigned short"/>
      </ExceptionField>
    </Exception>
    <Interface name="Range" id="::ranges::Range">
      <webidl>  interface Range {
    readonly attribute <ref>Node</ref>             startContainer getraises(<ref>DOMException</ref>);

    readonly attribute long             startOffset getraises(<ref>DOMException</ref>);

    readonly attribute <ref>Node</ref>             endContainer getraises(<ref>DOMException</ref>);

    readonly attribute long             endOffset getraises(<ref>DOMException</ref>);

    readonly attribute boolean          collapsed getraises(<ref>DOMException</ref>);

    readonly attribute <ref>Node</ref>             commonAncestorContainer getraises(<ref>DOMException</ref>);

    void               setStart(in <ref>Node</ref> refNode, 
                                in long offset)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);
    void               setEnd(in <ref>Node</ref> refNode, 
                              in long offset)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);
    void               setStartBefore(in <ref>Node</ref> refNode)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);
    void               setStartAfter(in <ref>Node</ref> refNode)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);
    void               setEndBefore(in <ref>Node</ref> refNode)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);
    void               setEndAfter(in <ref>Node</ref> refNode)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);
    void               collapse(in boolean toStart)
                                        raises(<ref>DOMException</ref>);
    void               selectNode(in <ref>Node</ref> refNode)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);
    void               selectNodeContents(in <ref>Node</ref> refNode)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);

    const unsigned short      START_TO_START                 = 0;
    const unsigned short      START_TO_END                   = 1;
    const unsigned short      END_TO_END                     = 2;
    const unsigned short      END_TO_START                   = 3;

    short              compareBoundaryPoints(in unsigned short how, 
                                             in <ref>Range</ref> sourceRange)
                                        raises(<ref>DOMException</ref>);
    void               deleteContents()
                                        raises(<ref>DOMException</ref>);
    <ref>DocumentFragment</ref>   extractContents()
                                        raises(<ref>DOMException</ref>);
    <ref>DocumentFragment</ref>   cloneContents()
                                        raises(<ref>DOMException</ref>);
    void               insertNode(in <ref>Node</ref> newNode)
                                        raises(<ref>DOMException</ref>, 
                                               <ref>RangeException</ref>);
    void               surroundContents(in <ref>Node</ref> newParent)
                                        raises(<ref>DOMException</ref>, 
                                               <ref>RangeException</ref>);
    <ref>Range</ref>              cloneRange()
                                        raises(<ref>DOMException</ref>);
    DOMString          toString()
                                        raises(<ref>DOMException</ref>);
    void               detach()
                                        raises(<ref>DOMException</ref>);
  };</webidl>
      <Attribute readonly="readonly" name="startContainer" id="::ranges::Range::startContainer">
        <webidl>    readonly attribute <ref>Node</ref>             startContainer getraises(<ref>DOMException</ref>);</webidl>
        <Type name="Node"/>
        <GetRaises>
          <RaiseException name="DOMException"/>
        </GetRaises>
      </Attribute>
      <Attribute readonly="readonly" name="startOffset" id="::ranges::Range::startOffset">
        <webidl>    readonly attribute long             startOffset getraises(<ref>DOMException</ref>);</webidl>
        <Type type="long"/>
        <GetRaises>
          <RaiseException name="DOMException"/>
        </GetRaises>
      </Attribute>
      <Attribute readonly="readonly" name="endContainer" id="::ranges::Range::endContainer">
        <webidl>    readonly attribute <ref>Node</ref>             endContainer getraises(<ref>DOMException</ref>);</webidl>
        <Type name="Node"/>
        <GetRaises>
          <RaiseException name="DOMException"/>
        </GetRaises>
      </Attribute>
      <Attribute readonly="readonly" name="endOffset" id="::ranges::Range::endOffset">
        <webidl>    readonly attribute long             endOffset getraises(<ref>DOMException</ref>);</webidl>
        <Type type="long"/>
        <GetRaises>
          <RaiseException name="DOMException"/>
        </GetRaises>
      </Attribute>
      <Attribute readonly="readonly" name="collapsed" id="::ranges::Range::collapsed">
        <webidl>    readonly attribute boolean          collapsed getraises(<ref>DOMException</ref>);</webidl>
        <Type type="boolean"/>
        <GetRaises>
          <RaiseException name="DOMException"/>
        </GetRaises>
      </Attribute>
      <Attribute readonly="readonly" name="commonAncestorContainer" id="::ranges::Range::commonAncestorContainer">
        <webidl>    readonly attribute <ref>Node</ref>             commonAncestorContainer getraises(<ref>DOMException</ref>);</webidl>
        <Type name="Node"/>
        <GetRaises>
          <RaiseException name="DOMException"/>
        </GetRaises>
      </Attribute>
      <Operation name="setStart" id="::ranges::Range::setStart">
        <webidl>    void               setStart(in <ref>Node</ref> refNode, 
                                in long offset)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="refNode">
            <Type name="Node"/>
          </Argument>
          <Argument in="in" name="offset">
            <Type type="long"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="RangeException"/>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="setEnd" id="::ranges::Range::setEnd">
        <webidl>    void               setEnd(in <ref>Node</ref> refNode, 
                              in long offset)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="refNode">
            <Type name="Node"/>
          </Argument>
          <Argument in="in" name="offset">
            <Type type="long"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="RangeException"/>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="setStartBefore" id="::ranges::Range::setStartBefore">
        <webidl>    void               setStartBefore(in <ref>Node</ref> refNode)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="refNode">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="RangeException"/>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="setStartAfter" id="::ranges::Range::setStartAfter">
        <webidl>    void               setStartAfter(in <ref>Node</ref> refNode)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="refNode">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="RangeException"/>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="setEndBefore" id="::ranges::Range::setEndBefore">
        <webidl>    void               setEndBefore(in <ref>Node</ref> refNode)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="refNode">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="RangeException"/>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="setEndAfter" id="::ranges::Range::setEndAfter">
        <webidl>    void               setEndAfter(in <ref>Node</ref> refNode)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="refNode">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="RangeException"/>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="collapse" id="::ranges::Range::collapse">
        <webidl>    void               collapse(in boolean toStart)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="toStart">
            <Type type="boolean"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="selectNode" id="::ranges::Range::selectNode">
        <webidl>    void               selectNode(in <ref>Node</ref> refNode)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="refNode">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="RangeException"/>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="selectNodeContents" id="::ranges::Range::selectNodeContents">
        <webidl>    void               selectNodeContents(in <ref>Node</ref> refNode)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="refNode">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="RangeException"/>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Const name="START_TO_START" value="0" id="::ranges::Range::START_TO_START">
        <webidl>    const unsigned short      START_TO_START                 = 0;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="START_TO_END" value="1" id="::ranges::Range::START_TO_END">
        <webidl>    const unsigned short      START_TO_END                   = 1;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="END_TO_END" value="2" id="::ranges::Range::END_TO_END">
        <webidl>    const unsigned short      END_TO_END                     = 2;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="END_TO_START" value="3" id="::ranges::Range::END_TO_START">
        <webidl>    const unsigned short      END_TO_START                   = 3;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Operation name="compareBoundaryPoints" id="::ranges::Range::compareBoundaryPoints">
        <webidl>    short              compareBoundaryPoints(in unsigned short how, 
                                             in <ref>Range</ref> sourceRange)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="short"/>
        <ArgumentList>
          <Argument in="in" name="how">
            <Type type="unsigned short"/>
          </Argument>
          <Argument in="in" name="sourceRange">
            <Type name="Range"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="deleteContents" id="::ranges::Range::deleteContents">
        <webidl>    void               deleteContents()
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList/>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="extractContents" id="::ranges::Range::extractContents">
        <webidl>    <ref>DocumentFragment</ref>   extractContents()
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="DocumentFragment"/>
        <ArgumentList/>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="cloneContents" id="::ranges::Range::cloneContents">
        <webidl>    <ref>DocumentFragment</ref>   cloneContents()
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="DocumentFragment"/>
        <ArgumentList/>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="insertNode" id="::ranges::Range::insertNode">
        <webidl>    void               insertNode(in <ref>Node</ref> newNode)
                                        raises(<ref>DOMException</ref>, 
                                               <ref>RangeException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="newNode">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
          <RaiseException name="RangeException"/>
        </Raises>
      </Operation>
      <Operation name="surroundContents" id="::ranges::Range::surroundContents">
        <webidl>    void               surroundContents(in <ref>Node</ref> newParent)
                                        raises(<ref>DOMException</ref>, 
                                               <ref>RangeException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="newParent">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
          <RaiseException name="RangeException"/>
        </Raises>
      </Operation>
      <Operation name="cloneRange" id="::ranges::Range::cloneRange">
        <webidl>    <ref>Range</ref>              cloneRange()
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Range"/>
        <ArgumentList/>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="toString" id="::ranges::Range::toString">
        <webidl>    DOMString          toString()
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <ArgumentList/>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="detach" id="::ranges::Range::detach">
        <webidl>    void               detach()
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList/>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
    </Interface>
    <Interface name="DocumentRange" id="::ranges::DocumentRange">
      <webidl>  interface DocumentRange {
    <ref>Range</ref>              createRange();
  };</webidl>
      <Operation name="createRange" id="::ranges::DocumentRange::createRange">
        <webidl>    <ref>Range</ref>              createRange();</webidl>
        <Type name="Range"/>
        <ArgumentList/>
      </Operation>
    </Interface>
    <Implements name1="Document" name2="DocumentRange">
      <webidl>  <ref>Document</ref> implements <ref>DocumentRange</ref>;</webidl>
    </Implements>
  </Module>
</Definitions>
<Definitions>
  <Module name="stylesheets" id="::stylesheets">
    <webidl>module stylesheets {

  typedef <ref>dom::Node</ref> Node;
  typedef <ref>dom::Document</ref> Document;
  typedef <ref>dom::ProcessingInstruction</ref> ProcessingInstruction;
  typedef <ref>dom::DOMException</ref> DOMException;

  [PrototypeRoot]
  interface StyleSheet {
    readonly attribute DOMString        type;
             attribute boolean          disabled;
    readonly attribute <ref>Node</ref>             ownerNode;
    readonly attribute <ref>StyleSheet</ref>       parentStyleSheet;
    readonly attribute DOMString?       href;
    readonly attribute DOMString        title;
    readonly attribute <ref>MediaList</ref>        media;
  };

  interface StyleSheetList {
    readonly attribute unsigned long length;
    getter <ref>StyleSheet</ref> item(in unsigned long index);
  };

  interface MediaList {
             attribute DOMString        mediaText setraises(<ref>DOMException</ref>);

    readonly attribute unsigned long    length;
    getter DOMString? item(in unsigned long index);
    void               deleteMedium(in DOMString oldMedium)
                                        raises(<ref>DOMException</ref>);
    void               appendMedium(in DOMString newMedium)
                                        raises(<ref>DOMException</ref>);
  };

  interface LinkStyle {
    readonly attribute <ref>StyleSheet</ref>       sheet;
  };

  <ref>ProcessingInstruction</ref> implements <ref>LinkStyle</ref>;

  interface DocumentStyle {
    readonly attribute <ref>StyleSheetList</ref>   styleSheets;
  };

  <ref>Document</ref> implements <ref>DocumentStyle</ref>;
};</webidl>
    <Typedef name="Node" id="::stylesheets::Node">
      <webidl>  typedef <ref>dom::Node</ref> Node;</webidl>
      <Type name="domNode"/>
    </Typedef>
    <Typedef name="Document" id="::stylesheets::Document">
      <webidl>  typedef <ref>dom::Document</ref> Document;</webidl>
      <Type name="domDocument"/>
    </Typedef>
    <Typedef name="ProcessingInstruction" id="::stylesheets::ProcessingInstruction">
      <webidl>  typedef <ref>dom::ProcessingInstruction</ref> ProcessingInstruction;</webidl>
      <Type name="domProcessingInstruction"/>
    </Typedef>
    <Typedef name="DOMException" id="::stylesheets::DOMException">
      <webidl>  typedef <ref>dom::DOMException</ref> DOMException;</webidl>
      <Type name="domDOMException"/>
    </Typedef>
    <Interface name="StyleSheet" id="::stylesheets::StyleSheet">
      <webidl>  [PrototypeRoot]
  interface StyleSheet {
    readonly attribute DOMString        type;
             attribute boolean          disabled;
    readonly attribute <ref>Node</ref>             ownerNode;
    readonly attribute <ref>StyleSheet</ref>       parentStyleSheet;
    readonly attribute DOMString?       href;
    readonly attribute DOMString        title;
    readonly attribute <ref>MediaList</ref>        media;
  };</webidl>
      <ExtendedAttributeList>
        <ExtendedAttribute name="PrototypeRoot"/>
      </ExtendedAttributeList>
      <Attribute readonly="readonly" name="type" id="::stylesheets::StyleSheet::type">
        <webidl>    readonly attribute DOMString        type;</webidl>
        <Type type="DOMString"/>
      </Attribute>
      <Attribute name="disabled" id="::stylesheets::StyleSheet::disabled">
        <webidl>             attribute boolean          disabled;</webidl>
        <Type type="boolean"/>
      </Attribute>
      <Attribute readonly="readonly" name="ownerNode" id="::stylesheets::StyleSheet::ownerNode">
        <webidl>    readonly attribute <ref>Node</ref>             ownerNode;</webidl>
        <Type name="Node"/>
      </Attribute>
      <Attribute readonly="readonly" name="parentStyleSheet" id="::stylesheets::StyleSheet::parentStyleSheet">
        <webidl>    readonly attribute <ref>StyleSheet</ref>       parentStyleSheet;</webidl>
        <Type name="StyleSheet"/>
      </Attribute>
      <Attribute readonly="readonly" name="href" id="::stylesheets::StyleSheet::href">
        <webidl>    readonly attribute DOMString?       href;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute readonly="readonly" name="title" id="::stylesheets::StyleSheet::title">
        <webidl>    readonly attribute DOMString        title;</webidl>
        <Type type="DOMString"/>
      </Attribute>
      <Attribute readonly="readonly" name="media" id="::stylesheets::StyleSheet::media">
        <webidl>    readonly attribute <ref>MediaList</ref>        media;</webidl>
        <Type name="MediaList"/>
      </Attribute>
    </Interface>
    <Interface name="StyleSheetList" id="::stylesheets::StyleSheetList">
      <webidl>  interface StyleSheetList {
    readonly attribute unsigned long length;
    getter <ref>StyleSheet</ref> item(in unsigned long index);
  };</webidl>
      <Attribute readonly="readonly" name="length" id="::stylesheets::StyleSheetList::length">
        <webidl>    readonly attribute unsigned long length;</webidl>
        <Type type="unsigned long"/>
      </Attribute>
      <Operation getter="getter" name="item" id="::stylesheets::StyleSheetList::item">
        <webidl>    getter <ref>StyleSheet</ref> item(in unsigned long index);</webidl>
        <Type name="StyleSheet"/>
        <ArgumentList>
          <Argument in="in" name="index">
            <Type type="unsigned long"/>
          </Argument>
        </ArgumentList>
      </Operation>
    </Interface>
    <Interface name="MediaList" id="::stylesheets::MediaList">
      <webidl>  interface MediaList {
             attribute DOMString        mediaText setraises(<ref>DOMException</ref>);

    readonly attribute unsigned long    length;
    getter DOMString? item(in unsigned long index);
    void               deleteMedium(in DOMString oldMedium)
                                        raises(<ref>DOMException</ref>);
    void               appendMedium(in DOMString newMedium)
                                        raises(<ref>DOMException</ref>);
  };</webidl>
      <Attribute name="mediaText" id="::stylesheets::MediaList::mediaText">
        <webidl>             attribute DOMString        mediaText setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute readonly="readonly" name="length" id="::stylesheets::MediaList::length">
        <webidl>    readonly attribute unsigned long    length;</webidl>
        <Type type="unsigned long"/>
      </Attribute>
      <Operation getter="getter" name="item" id="::stylesheets::MediaList::item">
        <webidl>    getter DOMString? item(in unsigned long index);</webidl>
        <Type type="DOMString" nullable="nullable"/>
        <ArgumentList>
          <Argument in="in" name="index">
            <Type type="unsigned long"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="deleteMedium" id="::stylesheets::MediaList::deleteMedium">
        <webidl>    void               deleteMedium(in DOMString oldMedium)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="oldMedium">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="appendMedium" id="::stylesheets::MediaList::appendMedium">
        <webidl>    void               appendMedium(in DOMString newMedium)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="newMedium">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
    </Interface>
    <Interface name="LinkStyle" id="::stylesheets::LinkStyle">
      <webidl>  interface LinkStyle {
    readonly attribute <ref>StyleSheet</ref>       sheet;
  };</webidl>
      <Attribute readonly="readonly" name="sheet" id="::stylesheets::LinkStyle::sheet">
        <webidl>    readonly attribute <ref>StyleSheet</ref>       sheet;</webidl>
        <Type name="StyleSheet"/>
      </Attribute>
    </Interface>
    <Implements name1="ProcessingInstruction" name2="LinkStyle">
      <webidl>  <ref>ProcessingInstruction</ref> implements <ref>LinkStyle</ref>;</webidl>
    </Implements>
    <Interface name="DocumentStyle" id="::stylesheets::DocumentStyle">
      <webidl>  interface DocumentStyle {
    readonly attribute <ref>StyleSheetList</ref>   styleSheets;
  };</webidl>
      <Attribute readonly="readonly" name="styleSheets" id="::stylesheets::DocumentStyle::styleSheets">
        <webidl>    readonly attribute <ref>StyleSheetList</ref>   styleSheets;</webidl>
        <Type name="StyleSheetList"/>
      </Attribute>
    </Interface>
    <Implements name1="Document" name2="DocumentStyle">
      <webidl>  <ref>Document</ref> implements <ref>DocumentStyle</ref>;</webidl>
    </Implements>
  </Module>
</Definitions>
<Definitions>
  <Module name="traversal" id="::traversal">
    <webidl>module traversal {

  typedef <ref>dom::Node</ref> Node;
  typedef <ref>dom::DOMException</ref> DOMException;

  interface NodeFilter {};

  interface NodeIterator {
    readonly attribute <ref>Node</ref>             root;
    readonly attribute unsigned long    whatToShow;
    readonly attribute <ref>NodeFilter</ref>       filter;
    readonly attribute boolean          expandEntityReferences;
    <ref>Node</ref>               nextNode()
                                        raises(<ref>DOMException</ref>);
    <ref>Node</ref>               previousNode()
                                        raises(<ref>DOMException</ref>);
    void               detach();
  };

  [Callback]
  interface NodeFilter {

    const short               FILTER_ACCEPT                  = 1;
    const short               FILTER_REJECT                  = 2;
    const short               FILTER_SKIP                    = 3;


    const unsigned long       SHOW_ALL                       = 0xFFFFFFFF;
    const unsigned long       SHOW_ELEMENT                   = 0x00000001;
    const unsigned long       SHOW_ATTRIBUTE                 = 0x00000002;
    const unsigned long       SHOW_TEXT                      = 0x00000004;
    const unsigned long       SHOW_CDATA_SECTION             = 0x00000008;
    const unsigned long       SHOW_ENTITY_REFERENCE          = 0x00000010;
    const unsigned long       SHOW_ENTITY                    = 0x00000020;
    const unsigned long       SHOW_PROCESSING_INSTRUCTION    = 0x00000040;
    const unsigned long       SHOW_COMMENT                   = 0x00000080;
    const unsigned long       SHOW_DOCUMENT                  = 0x00000100;
    const unsigned long       SHOW_DOCUMENT_TYPE             = 0x00000200;
    const unsigned long       SHOW_DOCUMENT_FRAGMENT         = 0x00000400;
    const unsigned long       SHOW_NOTATION                  = 0x00000800;

    short              acceptNode(in <ref>Node</ref> n);
  };

  interface TreeWalker {
    readonly attribute <ref>Node</ref>             root;
    readonly attribute unsigned long    whatToShow;
    readonly attribute <ref>NodeFilter</ref>       filter;
    readonly attribute boolean          expandEntityReferences;
             attribute <ref>Node</ref>             currentNode setraises(<ref>DOMException</ref>);

    <ref>Node</ref>               parentNode();
    <ref>Node</ref>               firstChild();
    <ref>Node</ref>               lastChild();
    <ref>Node</ref>               previousSibling();
    <ref>Node</ref>               nextSibling();
    <ref>Node</ref>               previousNode();
    <ref>Node</ref>               nextNode();
  };

  interface DocumentTraversal {
    <ref>NodeIterator</ref>       createNodeIterator(in <ref>Node</ref> root, 
                                          in unsigned long whatToShow, 
                                          in <ref>NodeFilter</ref> filter, 
                                          in boolean entityReferenceExpansion)
                                        raises(<ref>DOMException</ref>);
    <ref>TreeWalker</ref>         createTreeWalker(in <ref>Node</ref> root, 
                                        in unsigned long whatToShow, 
                                        in <ref>NodeFilter</ref> filter, 
                                        in boolean entityReferenceExpansion)
                                        raises(<ref>DOMException</ref>);
  };

  <ref>Document</ref> implements <ref>DocumentTraversal</ref>;
};</webidl>
    <Typedef name="Node" id="::traversal::Node">
      <webidl>  typedef <ref>dom::Node</ref> Node;</webidl>
      <Type name="domNode"/>
    </Typedef>
    <Typedef name="DOMException" id="::traversal::DOMException">
      <webidl>  typedef <ref>dom::DOMException</ref> DOMException;</webidl>
      <Type name="domDOMException"/>
    </Typedef>
    <Interface name="NodeFilter" id="::traversal::NodeFilter">
      <webidl>  interface NodeFilter {};</webidl>
    </Interface>
    <Interface name="NodeIterator" id="::traversal::NodeIterator">
      <webidl>  interface NodeIterator {
    readonly attribute <ref>Node</ref>             root;
    readonly attribute unsigned long    whatToShow;
    readonly attribute <ref>NodeFilter</ref>       filter;
    readonly attribute boolean          expandEntityReferences;
    <ref>Node</ref>               nextNode()
                                        raises(<ref>DOMException</ref>);
    <ref>Node</ref>               previousNode()
                                        raises(<ref>DOMException</ref>);
    void               detach();
  };</webidl>
      <Attribute readonly="readonly" name="root" id="::traversal::NodeIterator::root">
        <webidl>    readonly attribute <ref>Node</ref>             root;</webidl>
        <Type name="Node"/>
      </Attribute>
      <Attribute readonly="readonly" name="whatToShow" id="::traversal::NodeIterator::whatToShow">
        <webidl>    readonly attribute unsigned long    whatToShow;</webidl>
        <Type type="unsigned long"/>
      </Attribute>
      <Attribute readonly="readonly" name="filter" id="::traversal::NodeIterator::filter">
        <webidl>    readonly attribute <ref>NodeFilter</ref>       filter;</webidl>
        <Type name="NodeFilter"/>
      </Attribute>
      <Attribute readonly="readonly" name="expandEntityReferences" id="::traversal::NodeIterator::expandEntityReferences">
        <webidl>    readonly attribute boolean          expandEntityReferences;</webidl>
        <Type type="boolean"/>
      </Attribute>
      <Operation name="nextNode" id="::traversal::NodeIterator::nextNode">
        <webidl>    <ref>Node</ref>               nextNode()
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Node"/>
        <ArgumentList/>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="previousNode" id="::traversal::NodeIterator::previousNode">
        <webidl>    <ref>Node</ref>               previousNode()
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Node"/>
        <ArgumentList/>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="detach" id="::traversal::NodeIterator::detach">
        <webidl>    void               detach();</webidl>
        <Type type="void"/>
        <ArgumentList/>
      </Operation>
    </Interface>
    <Interface name="NodeFilter" id="::traversal::NodeFilter">
      <webidl>  [Callback]
  interface NodeFilter {

    const short               FILTER_ACCEPT                  = 1;
    const short               FILTER_REJECT                  = 2;
    const short               FILTER_SKIP                    = 3;


    const unsigned long       SHOW_ALL                       = 0xFFFFFFFF;
    const unsigned long       SHOW_ELEMENT                   = 0x00000001;
    const unsigned long       SHOW_ATTRIBUTE                 = 0x00000002;
    const unsigned long       SHOW_TEXT                      = 0x00000004;
    const unsigned long       SHOW_CDATA_SECTION             = 0x00000008;
    const unsigned long       SHOW_ENTITY_REFERENCE          = 0x00000010;
    const unsigned long       SHOW_ENTITY                    = 0x00000020;
    const unsigned long       SHOW_PROCESSING_INSTRUCTION    = 0x00000040;
    const unsigned long       SHOW_COMMENT                   = 0x00000080;
    const unsigned long       SHOW_DOCUMENT                  = 0x00000100;
    const unsigned long       SHOW_DOCUMENT_TYPE             = 0x00000200;
    const unsigned long       SHOW_DOCUMENT_FRAGMENT         = 0x00000400;
    const unsigned long       SHOW_NOTATION                  = 0x00000800;

    short              acceptNode(in <ref>Node</ref> n);
  };</webidl>
      <ExtendedAttributeList>
        <ExtendedAttribute name="Callback"/>
      </ExtendedAttributeList>
      <Const name="FILTER_ACCEPT" value="1" id="::traversal::NodeFilter::FILTER_ACCEPT">
        <webidl>    const short               FILTER_ACCEPT                  = 1;</webidl>
        <Type type="short"/>
      </Const>
      <Const name="FILTER_REJECT" value="2" id="::traversal::NodeFilter::FILTER_REJECT">
        <webidl>    const short               FILTER_REJECT                  = 2;</webidl>
        <Type type="short"/>
      </Const>
      <Const name="FILTER_SKIP" value="3" id="::traversal::NodeFilter::FILTER_SKIP">
        <webidl>    const short               FILTER_SKIP                    = 3;</webidl>
        <Type type="short"/>
      </Const>
      <Const name="SHOW_ALL" value="0xFFFFFFFF" id="::traversal::NodeFilter::SHOW_ALL">
        <webidl>    const unsigned long       SHOW_ALL                       = 0xFFFFFFFF;</webidl>
        <Type type="unsigned long"/>
      </Const>
      <Const name="SHOW_ELEMENT" value="0x00000001" id="::traversal::NodeFilter::SHOW_ELEMENT">
        <webidl>    const unsigned long       SHOW_ELEMENT                   = 0x00000001;</webidl>
        <Type type="unsigned long"/>
      </Const>
      <Const name="SHOW_ATTRIBUTE" value="0x00000002" id="::traversal::NodeFilter::SHOW_ATTRIBUTE">
        <webidl>    const unsigned long       SHOW_ATTRIBUTE                 = 0x00000002;</webidl>
        <Type type="unsigned long"/>
      </Const>
      <Const name="SHOW_TEXT" value="0x00000004" id="::traversal::NodeFilter::SHOW_TEXT">
        <webidl>    const unsigned long       SHOW_TEXT                      = 0x00000004;</webidl>
        <Type type="unsigned long"/>
      </Const>
      <Const name="SHOW_CDATA_SECTION" value="0x00000008" id="::traversal::NodeFilter::SHOW_CDATA_SECTION">
        <webidl>    const unsigned long       SHOW_CDATA_SECTION             = 0x00000008;</webidl>
        <Type type="unsigned long"/>
      </Const>
      <Const name="SHOW_ENTITY_REFERENCE" value="0x00000010" id="::traversal::NodeFilter::SHOW_ENTITY_REFERENCE">
        <webidl>    const unsigned long       SHOW_ENTITY_REFERENCE          = 0x00000010;</webidl>
        <Type type="unsigned long"/>
      </Const>
      <Const name="SHOW_ENTITY" value="0x00000020" id="::traversal::NodeFilter::SHOW_ENTITY">
        <webidl>    const unsigned long       SHOW_ENTITY                    = 0x00000020;</webidl>
        <Type type="unsigned long"/>
      </Const>
      <Const name="SHOW_PROCESSING_INSTRUCTION" value="0x00000040" id="::traversal::NodeFilter::SHOW_PROCESSING_INSTRUCTION">
        <webidl>    const unsigned long       SHOW_PROCESSING_INSTRUCTION    = 0x00000040;</webidl>
        <Type type="unsigned long"/>
      </Const>
      <Const name="SHOW_COMMENT" value="0x00000080" id="::traversal::NodeFilter::SHOW_COMMENT">
        <webidl>    const unsigned long       SHOW_COMMENT                   = 0x00000080;</webidl>
        <Type type="unsigned long"/>
      </Const>
      <Const name="SHOW_DOCUMENT" value="0x00000100" id="::traversal::NodeFilter::SHOW_DOCUMENT">
        <webidl>    const unsigned long       SHOW_DOCUMENT                  = 0x00000100;</webidl>
        <Type type="unsigned long"/>
      </Const>
      <Const name="SHOW_DOCUMENT_TYPE" value="0x00000200" id="::traversal::NodeFilter::SHOW_DOCUMENT_TYPE">
        <webidl>    const unsigned long       SHOW_DOCUMENT_TYPE             = 0x00000200;</webidl>
        <Type type="unsigned long"/>
      </Const>
      <Const name="SHOW_DOCUMENT_FRAGMENT" value="0x00000400" id="::traversal::NodeFilter::SHOW_DOCUMENT_FRAGMENT">
        <webidl>    const unsigned long       SHOW_DOCUMENT_FRAGMENT         = 0x00000400;</webidl>
        <Type type="unsigned long"/>
      </Const>
      <Const name="SHOW_NOTATION" value="0x00000800" id="::traversal::NodeFilter::SHOW_NOTATION">
        <webidl>    const unsigned long       SHOW_NOTATION                  = 0x00000800;</webidl>
        <Type type="unsigned long"/>
      </Const>
      <Operation name="acceptNode" id="::traversal::NodeFilter::acceptNode">
        <webidl>    short              acceptNode(in <ref>Node</ref> n);</webidl>
        <Type type="short"/>
        <ArgumentList>
          <Argument in="in" name="n">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
      </Operation>
    </Interface>
    <Interface name="TreeWalker" id="::traversal::TreeWalker">
      <webidl>  interface TreeWalker {
    readonly attribute <ref>Node</ref>             root;
    readonly attribute unsigned long    whatToShow;
    readonly attribute <ref>NodeFilter</ref>       filter;
    readonly attribute boolean          expandEntityReferences;
             attribute <ref>Node</ref>             currentNode setraises(<ref>DOMException</ref>);

    <ref>Node</ref>               parentNode();
    <ref>Node</ref>               firstChild();
    <ref>Node</ref>               lastChild();
    <ref>Node</ref>               previousSibling();
    <ref>Node</ref>               nextSibling();
    <ref>Node</ref>               previousNode();
    <ref>Node</ref>               nextNode();
  };</webidl>
      <Attribute readonly="readonly" name="root" id="::traversal::TreeWalker::root">
        <webidl>    readonly attribute <ref>Node</ref>             root;</webidl>
        <Type name="Node"/>
      </Attribute>
      <Attribute readonly="readonly" name="whatToShow" id="::traversal::TreeWalker::whatToShow">
        <webidl>    readonly attribute unsigned long    whatToShow;</webidl>
        <Type type="unsigned long"/>
      </Attribute>
      <Attribute readonly="readonly" name="filter" id="::traversal::TreeWalker::filter">
        <webidl>    readonly attribute <ref>NodeFilter</ref>       filter;</webidl>
        <Type name="NodeFilter"/>
      </Attribute>
      <Attribute readonly="readonly" name="expandEntityReferences" id="::traversal::TreeWalker::expandEntityReferences">
        <webidl>    readonly attribute boolean          expandEntityReferences;</webidl>
        <Type type="boolean"/>
      </Attribute>
      <Attribute name="currentNode" id="::traversal::TreeWalker::currentNode">
        <webidl>             attribute <ref>Node</ref>             currentNode setraises(<ref>DOMException</ref>);</webidl>
        <Type name="Node"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Operation name="parentNode" id="::traversal::TreeWalker::parentNode">
        <webidl>    <ref>Node</ref>               parentNode();</webidl>
        <Type name="Node"/>
        <ArgumentList/>
      </Operation>
      <Operation name="firstChild" id="::traversal::TreeWalker::firstChild">
        <webidl>    <ref>Node</ref>               firstChild();</webidl>
        <Type name="Node"/>
        <ArgumentList/>
      </Operation>
      <Operation name="lastChild" id="::traversal::TreeWalker::lastChild">
        <webidl>    <ref>Node</ref>               lastChild();</webidl>
        <Type name="Node"/>
        <ArgumentList/>
      </Operation>
      <Operation name="previousSibling" id="::traversal::TreeWalker::previousSibling">
        <webidl>    <ref>Node</ref>               previousSibling();</webidl>
        <Type name="Node"/>
        <ArgumentList/>
      </Operation>
      <Operation name="nextSibling" id="::traversal::TreeWalker::nextSibling">
        <webidl>    <ref>Node</ref>               nextSibling();</webidl>
        <Type name="Node"/>
        <ArgumentList/>
      </Operation>
      <Operation name="previousNode" id="::traversal::TreeWalker::previousNode">
        <webidl>    <ref>Node</ref>               previousNode();</webidl>
        <Type name="Node"/>
        <ArgumentList/>
      </Operation>
      <Operation name="nextNode" id="::traversal::TreeWalker::nextNode">
        <webidl>    <ref>Node</ref>               nextNode();</webidl>
        <Type name="Node"/>
        <ArgumentList/>
      </Operation>
    </Interface>
    <Interface name="DocumentTraversal" id="::traversal::DocumentTraversal">
      <webidl>  interface DocumentTraversal {
    <ref>NodeIterator</ref>       createNodeIterator(in <ref>Node</ref> root, 
                                          in unsigned long whatToShow, 
                                          in <ref>NodeFilter</ref> filter, 
                                          in boolean entityReferenceExpansion)
                                        raises(<ref>DOMException</ref>);
    <ref>TreeWalker</ref>         createTreeWalker(in <ref>Node</ref> root, 
                                        in unsigned long whatToShow, 
                                        in <ref>NodeFilter</ref> filter, 
                                        in boolean entityReferenceExpansion)
                                        raises(<ref>DOMException</ref>);
  };</webidl>
      <Operation name="createNodeIterator" id="::traversal::DocumentTraversal::createNodeIterator">
        <webidl>    <ref>NodeIterator</ref>       createNodeIterator(in <ref>Node</ref> root, 
                                          in unsigned long whatToShow, 
                                          in <ref>NodeFilter</ref> filter, 
                                          in boolean entityReferenceExpansion)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="NodeIterator"/>
        <ArgumentList>
          <Argument in="in" name="root">
            <Type name="Node"/>
          </Argument>
          <Argument in="in" name="whatToShow">
            <Type type="unsigned long"/>
          </Argument>
          <Argument in="in" name="filter">
            <Type name="NodeFilter"/>
          </Argument>
          <Argument in="in" name="entityReferenceExpansion">
            <Type type="boolean"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="createTreeWalker" id="::traversal::DocumentTraversal::createTreeWalker">
        <webidl>    <ref>TreeWalker</ref>         createTreeWalker(in <ref>Node</ref> root, 
                                        in unsigned long whatToShow, 
                                        in <ref>NodeFilter</ref> filter, 
                                        in boolean entityReferenceExpansion)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="TreeWalker"/>
        <ArgumentList>
          <Argument in="in" name="root">
            <Type name="Node"/>
          </Argument>
          <Argument in="in" name="whatToShow">
            <Type type="unsigned long"/>
          </Argument>
          <Argument in="in" name="filter">
            <Type name="NodeFilter"/>
          </Argument>
          <Argument in="in" name="entityReferenceExpansion">
            <Type type="boolean"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
    </Interface>
    <Implements name1="Document" name2="DocumentTraversal">
      <webidl>  <ref>Document</ref> implements <ref>DocumentTraversal</ref>;</webidl>
    </Implements>
  </Module>
</Definitions>
<Definitions>
  <Module name="views" id="::views">
    <webidl>module views {

  typedef <ref>dom::Document</ref> Document;

  [PrototypeRoot]
  interface AbstractView {
    readonly attribute <ref>DocumentView</ref>     document;
  };

  interface DocumentView {
    readonly attribute <ref>AbstractView</ref>     defaultView;
  };

  <ref>Document</ref> implements <ref>DocumentView</ref>;
};</webidl>
    <Typedef name="Document" id="::views::Document">
      <webidl>  typedef <ref>dom::Document</ref> Document;</webidl>
      <Type name="domDocument"/>
    </Typedef>
    <Interface name="AbstractView" id="::views::AbstractView">
      <webidl>  [PrototypeRoot]
  interface AbstractView {
    readonly attribute <ref>DocumentView</ref>     document;
  };</webidl>
      <ExtendedAttributeList>
        <ExtendedAttribute name="PrototypeRoot"/>
      </ExtendedAttributeList>
      <Attribute readonly="readonly" name="document" id="::views::AbstractView::document">
        <webidl>    readonly attribute <ref>DocumentView</ref>     document;</webidl>
        <Type name="DocumentView"/>
      </Attribute>
    </Interface>
    <Interface name="DocumentView" id="::views::DocumentView">
      <webidl>  interface DocumentView {
    readonly attribute <ref>AbstractView</ref>     defaultView;
  };</webidl>
      <Attribute readonly="readonly" name="defaultView" id="::views::DocumentView::defaultView">
        <webidl>    readonly attribute <ref>AbstractView</ref>     defaultView;</webidl>
        <Type name="AbstractView"/>
      </Attribute>
    </Interface>
    <Implements name1="Document" name2="DocumentView">
      <webidl>  <ref>Document</ref> implements <ref>DocumentView</ref>;</webidl>
    </Implements>
  </Module>
</Definitions>
<Definitions>
  <Module name="dom" id="::dom">
    <webidl>module dom {

  typedef   unsigned long long DOMTimeStamp;

  typedef   any DOMUserData;

  typedef   object DOMObject;

  exception DOMException {

    const unsigned short INDEX_SIZE_ERR              = 1;
    const unsigned short DOMSTRING_SIZE_ERR          = 2;
    const unsigned short HIERARCHY_REQUEST_ERR       = 3;
    const unsigned short WRONG_DOCUMENT_ERR          = 4;
    const unsigned short INVALID_CHARACTER_ERR       = 5;
    const unsigned short NO_DATA_ALLOWED_ERR         = 6;
    const unsigned short NO_MODIFICATION_ALLOWED_ERR = 7;
    const unsigned short NOT_FOUND_ERR               = 8;
    const unsigned short NOT_SUPPORTED_ERR           = 9;
    const unsigned short INUSE_ATTRIBUTE_ERR         = 10;
    const unsigned short INVALID_STATE_ERR           = 11;
    const unsigned short SYNTAX_ERR                  = 12;
    const unsigned short INVALID_MODIFICATION_ERR    = 13;
    const unsigned short NAMESPACE_ERR               = 14;
    const unsigned short INVALID_ACCESS_ERR          = 15;
    const unsigned short VALIDATION_ERR              = 16;
    const unsigned short TYPE_MISMATCH_ERR           = 17;

    unsigned short code;
  };

  interface DOMStringList {
    getter DOMString? item(in unsigned long index);
    readonly attribute unsigned long length;
    boolean contains(in DOMString? str);
  };

  interface NameList {
    DOMString?          getName(in unsigned long index);
    DOMString?          getNamespaceURI(in unsigned long index);
    readonly attribute unsigned long   length;
    boolean            contains(in DOMString? str);
    boolean            containsNS(in DOMString? namespaceURI, 
                                  in DOMString? name);
  };

  interface DOMImplementationList {
    getter <ref>DOMImplementation</ref> item(in unsigned long index);
    readonly attribute unsigned long length;
  };

  interface DOMImplementationSource {
    <ref>DOMImplementation</ref>  getDOMImplementation(in DOMString features);
    <ref>DOMImplementationList</ref> getDOMImplementationList(in DOMString features);
  };

  interface DOMImplementation {
    boolean            hasFeature(in DOMString feature, 
                                  in DOMString version);
    <ref>DocumentType</ref>       createDocumentType(in DOMString qualifiedName, 
                                          in DOMString? publicId, 
                                          in DOMString? systemId)
                                        raises(<ref>DOMException</ref>);
    <ref>Document</ref>           createDocument(in DOMString? namespaceURI, 
                                      in DOMString? qualifiedName, 
                                      in <ref>DocumentType</ref> doctype)
                                        raises(<ref>DOMException</ref>);
    <ref>DOMObject</ref>          getFeature(in DOMString feature, 
                                  in DOMString version);
  };

  [PrototypeRoot]
  interface Node {

    const unsigned short ELEMENT_NODE                   = 1;
    const unsigned short ATTRIBUTE_NODE                 = 2;
    const unsigned short TEXT_NODE                      = 3;
    const unsigned short CDATA_SECTION_NODE             = 4;
    const unsigned short ENTITY_REFERENCE_NODE          = 5;
    const unsigned short ENTITY_NODE                    = 6;
    const unsigned short PROCESSING_INSTRUCTION_NODE    = 7;
    const unsigned short COMMENT_NODE                   = 8;
    const unsigned short DOCUMENT_NODE                  = 9;
    const unsigned short DOCUMENT_TYPE_NODE             = 10;
    const unsigned short DOCUMENT_FRAGMENT_NODE         = 11;
    const unsigned short NOTATION_NODE                  = 12;

    readonly attribute DOMString       nodeName;
             attribute DOMString?      nodeValue getraises(<ref>DOMException</ref>) setraises(<ref>DOMException</ref>);

    readonly attribute unsigned short  nodeType;
    readonly attribute <ref>Node</ref>            parentNode;
    readonly attribute <ref>NodeList</ref>        childNodes;
    readonly attribute <ref>Node</ref>            firstChild;
    readonly attribute <ref>Node</ref>            lastChild;
    readonly attribute <ref>Node</ref>            previousSibling;
    readonly attribute <ref>Node</ref>            nextSibling;
    readonly attribute <ref>NamedNodeMap</ref>    attributes;
    readonly attribute <ref>Document</ref>        ownerDocument;
    <ref>Node</ref>               insertBefore(in <ref>Node</ref> newChild, 
                                    in <ref>Node</ref> refChild)
                                        raises(<ref>DOMException</ref>);
    <ref>Node</ref>               replaceChild(in <ref>Node</ref> newChild, 
                                    in <ref>Node</ref> oldChild)
                                        raises(<ref>DOMException</ref>);
    <ref>Node</ref>               removeChild(in <ref>Node</ref> oldChild)
                                        raises(<ref>DOMException</ref>);
    <ref>Node</ref>               appendChild(in <ref>Node</ref> newChild)
                                        raises(<ref>DOMException</ref>);
    boolean            hasChildNodes();
    <ref>Node</ref>               cloneNode(in boolean deep);
    void               normalize();
    boolean            isSupported(in DOMString feature, 
                                   in DOMString version);
    readonly attribute DOMString?      namespaceURI;
             attribute DOMString?      prefix setraises(<ref>DOMException</ref>);

    readonly attribute DOMString?      localName;
    boolean            hasAttributes();
    readonly attribute DOMString?      baseURI;

    const unsigned short      DOCUMENT_POSITION_DISCONNECTED = 0x01;
    const unsigned short      DOCUMENT_POSITION_PRECEDING    = 0x02;
    const unsigned short      DOCUMENT_POSITION_FOLLOWING    = 0x04;
    const unsigned short      DOCUMENT_POSITION_CONTAINS     = 0x08;
    const unsigned short      DOCUMENT_POSITION_CONTAINED_BY = 0x10;
    const unsigned short      DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 0x20;

    unsigned short     compareDocumentPosition(in <ref>Node</ref> other)
                                        raises(<ref>DOMException</ref>);
             attribute DOMString?      textContent getraises(<ref>DOMException</ref>) setraises(<ref>DOMException</ref>);

    boolean            isSameNode(in <ref>Node</ref> other);
    DOMString?         lookupPrefix(in DOMString? namespaceURI);
    boolean            isDefaultNamespace(in DOMString? namespaceURI);
    DOMString?         lookupNamespaceURI(in DOMString? prefix);
    boolean            isEqualNode(in <ref>Node</ref> arg);
    <ref>DOMObject</ref>          getFeature(in DOMString feature, 
                                  in DOMString version);
    <ref>DOMUserData</ref>        setUserData(in DOMString key, 
                                   in <ref>DOMUserData</ref> data, 
                                   in <ref>UserDataHandler</ref> handler);
    <ref>DOMUserData</ref>        getUserData(in DOMString key);
  };

  interface NodeList {
    getter <ref>Node</ref> item(in unsigned long index);
    readonly attribute unsigned long length;
  };

  interface NamedNodeMap {
    <ref>Node</ref>               getNamedItem(in DOMString name);
    <ref>Node</ref>               setNamedItem(in <ref>Node</ref> arg)
                                        raises(<ref>DOMException</ref>);
    <ref>Node</ref>               removeNamedItem(in DOMString name)
                                        raises(<ref>DOMException</ref>);
    getter <ref>Node</ref>        item(in unsigned long index);
    readonly attribute unsigned long   length;
    <ref>Node</ref>               getNamedItemNS(in DOMString? namespaceURI, 
                                      in DOMString? localName)
                                        raises(<ref>DOMException</ref>);
    <ref>Node</ref>               setNamedItemNS(in <ref>Node</ref> arg)
                                        raises(<ref>DOMException</ref>);
    <ref>Node</ref>               removeNamedItemNS(in DOMString? namespaceURI, 
                                         in DOMString? localName)
                                        raises(<ref>DOMException</ref>);
  };

  interface CharacterData : <ref>Node</ref> {
             attribute DOMString       data getraises(<ref>DOMException</ref>) setraises(<ref>DOMException</ref>);

    readonly attribute unsigned long   length;
    DOMString          substringData(in unsigned long offset, 
                                     in unsigned long count)
                                        raises(<ref>DOMException</ref>);
    void               appendData(in DOMString arg)
                                        raises(<ref>DOMException</ref>);
    void               insertData(in unsigned long offset, 
                                  in DOMString arg)
                                        raises(<ref>DOMException</ref>);
    void               deleteData(in unsigned long offset, 
                                  in unsigned long count)
                                        raises(<ref>DOMException</ref>);
    void               replaceData(in unsigned long offset, 
                                   in unsigned long count, 
                                   in DOMString arg)
                                        raises(<ref>DOMException</ref>);
  };

  interface Attr : <ref>Node</ref> {
    readonly attribute DOMString       name;
    readonly attribute boolean         specified;
             attribute DOMString       value setraises(<ref>DOMException</ref>);

    readonly attribute <ref>Element</ref>         ownerElement;
    readonly attribute <ref>TypeInfo</ref>        schemaTypeInfo;
    readonly attribute boolean         isId;
  };

  interface Element : <ref>Node</ref> {
    readonly attribute DOMString       tagName;
    DOMString          getAttribute(in DOMString name);
    void               setAttribute(in DOMString name, 
                                    in DOMString value)
                                        raises(<ref>DOMException</ref>);
    void               removeAttribute(in DOMString name)
                                        raises(<ref>DOMException</ref>);
    <ref>Attr</ref>               getAttributeNode(in DOMString name);
    <ref>Attr</ref>               setAttributeNode(in <ref>Attr</ref> newAttr)
                                        raises(<ref>DOMException</ref>);
    <ref>Attr</ref>               removeAttributeNode(in <ref>Attr</ref> oldAttr)
                                        raises(<ref>DOMException</ref>);
    <ref>NodeList</ref>           getElementsByTagName(in DOMString name);
    DOMString          getAttributeNS(in DOMString? namespaceURI, 
                                      in DOMString localName)
                                        raises(<ref>DOMException</ref>);
    void               setAttributeNS(in DOMString? namespaceURI, 
                                      in DOMString qualifiedName, 
                                      in DOMString value)
                                        raises(<ref>DOMException</ref>);
    void               removeAttributeNS(in DOMString? namespaceURI, 
                                         in DOMString localName)
                                        raises(<ref>DOMException</ref>);
    <ref>Attr</ref>               getAttributeNodeNS(in DOMString? namespaceURI, 
                                          in DOMString localName)
                                        raises(<ref>DOMException</ref>);
    <ref>Attr</ref>               setAttributeNodeNS(in <ref>Attr</ref> newAttr)
                                        raises(<ref>DOMException</ref>);
    <ref>NodeList</ref>           getElementsByTagNameNS(in DOMString? namespaceURI, 
                                              in DOMString localName)
                                        raises(<ref>DOMException</ref>);
    boolean            hasAttribute(in DOMString name);
    boolean            hasAttributeNS(in DOMString? namespaceURI, 
                                      in DOMString localName)
                                        raises(<ref>DOMException</ref>);
    readonly attribute <ref>TypeInfo</ref>        schemaTypeInfo;
    void               setIdAttribute(in DOMString name, 
                                      in boolean isId)
                                        raises(<ref>DOMException</ref>);
    void               setIdAttributeNS(in DOMString? namespaceURI, 
                                        in DOMString localName, 
                                        in boolean isId)
                                        raises(<ref>DOMException</ref>);
    void               setIdAttributeNode(in <ref>Attr</ref> idAttr, 
                                          in boolean isId)
                                        raises(<ref>DOMException</ref>);
  };

  interface Text : <ref>CharacterData</ref> {
    <ref>Text</ref>               splitText(in unsigned long offset)
                                        raises(<ref>DOMException</ref>);
    readonly attribute boolean         isElementContentWhitespace;
    readonly attribute DOMString       wholeText;
    <ref>Text</ref>               replaceWholeText(in DOMString content)
                                        raises(<ref>DOMException</ref>);
  };

  interface Comment : <ref>CharacterData</ref> {
  };

  interface TypeInfo {
    readonly attribute DOMString?      typeName;
    readonly attribute DOMString?      typeNamespace;

    const unsigned long       DERIVATION_RESTRICTION         = 0x00000001;
    const unsigned long       DERIVATION_EXTENSION           = 0x00000002;
    const unsigned long       DERIVATION_UNION               = 0x00000004;
    const unsigned long       DERIVATION_LIST                = 0x00000008;

    boolean            isDerivedFrom(in DOMString? typeNamespaceArg, 
                                     in DOMString typeNameArg, 
                                     in unsigned long derivationMethod);
  };

  [Callback]
  interface UserDataHandler {

    const unsigned short      NODE_CLONED                    = 1;
    const unsigned short      NODE_IMPORTED                  = 2;
    const unsigned short      NODE_DELETED                   = 3;
    const unsigned short      NODE_RENAMED                   = 4;
    const unsigned short      NODE_ADOPTED                   = 5;

    void               handle(in unsigned short operation, 
                              in DOMString key, 
                              in <ref>DOMUserData</ref> data, 
                              in <ref>Node</ref> src, 
                              in <ref>Node</ref> dst);
  };

  interface DOMError {

    const unsigned short      SEVERITY_WARNING               = 1;
    const unsigned short      SEVERITY_ERROR                 = 2;
    const unsigned short      SEVERITY_FATAL_ERROR           = 3;

    readonly attribute unsigned short  severity;
    readonly attribute DOMString       message;
    readonly attribute DOMString       type;
    readonly attribute <ref>DOMObject</ref>       relatedException;
    readonly attribute <ref>DOMObject</ref>       relatedData;
    readonly attribute <ref>DOMLocator</ref>      location;
  };

  interface DOMErrorHandler {
    boolean            handleError(in <ref>DOMError</ref> error);
  };

  interface DOMLocator {
    readonly attribute long            lineNumber;
    readonly attribute long            columnNumber;
    readonly attribute long            byteOffset;
    readonly attribute long            utf16Offset;
    readonly attribute <ref>Node</ref>            relatedNode;
    readonly attribute DOMString?      uri;
  };

  interface DOMConfiguration {
    void               setParameter(in DOMString name, 
                                    in <ref>DOMUserData</ref> value)
                                        raises(<ref>DOMException</ref>);
    <ref>DOMUserData</ref>        getParameter(in DOMString name)
                                        raises(<ref>DOMException</ref>);
    boolean            canSetParameter(in DOMString name, 
                                       in <ref>DOMUserData</ref> value);
    readonly attribute <ref>DOMStringList</ref>   parameterNames;
  };

  interface CDATASection : <ref>Text</ref> {
  };

  interface DocumentType : <ref>Node</ref> {
    readonly attribute DOMString       name;
    readonly attribute <ref>NamedNodeMap</ref>    entities;
    readonly attribute <ref>NamedNodeMap</ref>    notations;
    readonly attribute DOMString?      publicId;
    readonly attribute DOMString?      systemId;
    readonly attribute DOMString?      internalSubset;
  };

  interface Notation : <ref>Node</ref> {
    readonly attribute DOMString?      publicId;
    readonly attribute DOMString?      systemId;
  };

  interface Entity : <ref>Node</ref> {
    readonly attribute DOMString?      publicId;
    readonly attribute DOMString?      systemId;
    readonly attribute DOMString?      notationName;
    readonly attribute DOMString?      inputEncoding;
    readonly attribute DOMString?      xmlEncoding;
    readonly attribute DOMString?      xmlVersion;
  };

  interface EntityReference : <ref>Node</ref> {
  };

  interface ProcessingInstruction : <ref>Node</ref> {
    readonly attribute DOMString       target;
             attribute DOMString       data setraises(<ref>DOMException</ref>);

  };

  interface DocumentFragment : <ref>Node</ref> {
  };

  interface Document : <ref>Node</ref> {
    readonly attribute <ref>DocumentType</ref>    doctype;
    readonly attribute <ref>DOMImplementation</ref> implementation;
    readonly attribute <ref>Element</ref>         documentElement;
    <ref>Element</ref>            createElement(in DOMString tagName)
                                        raises(<ref>DOMException</ref>);
    <ref>DocumentFragment</ref>   createDocumentFragment();
    <ref>Text</ref>               createTextNode(in DOMString data);
    <ref>Comment</ref>            createComment(in DOMString data);
    <ref>CDATASection</ref>       createCDATASection(in DOMString data)
                                        raises(<ref>DOMException</ref>);
    <ref>ProcessingInstruction</ref> createProcessingInstruction(in DOMString target, 
                                                      in DOMString data)
                                        raises(<ref>DOMException</ref>);
    <ref>Attr</ref>               createAttribute(in DOMString name)
                                        raises(<ref>DOMException</ref>);
    <ref>EntityReference</ref>    createEntityReference(in DOMString name)
                                        raises(<ref>DOMException</ref>);
    <ref>NodeList</ref>           getElementsByTagName(in DOMString tagname);
    <ref>Node</ref>               importNode(in <ref>Node</ref> importedNode, 
                                  in boolean deep)
                                        raises(<ref>DOMException</ref>);
    <ref>Element</ref>            createElementNS(in DOMString? namespaceURI, 
                                       in DOMString qualifiedName)
                                        raises(<ref>DOMException</ref>);
    <ref>Attr</ref>               createAttributeNS(in DOMString? namespaceURI, 
                                         in DOMString qualifiedName)
                                        raises(<ref>DOMException</ref>);
    <ref>NodeList</ref>           getElementsByTagNameNS(in DOMString? namespaceURI, 
                                              in DOMString localName);
    <ref>Element</ref>            getElementById(in DOMString elementId);
    readonly attribute DOMString?      inputEncoding;
    readonly attribute DOMString?      xmlEncoding;
             attribute boolean         xmlStandalone setraises(<ref>DOMException</ref>);

             attribute DOMString?      xmlVersion setraises(<ref>DOMException</ref>);

             attribute boolean         strictErrorChecking;
             attribute DOMString?      documentURI;
    <ref>Node</ref>               adoptNode(in <ref>Node</ref> source)
                                        raises(<ref>DOMException</ref>);
    readonly attribute <ref>DOMConfiguration</ref> domConfig;
    void               normalizeDocument();
    <ref>Node</ref>               renameNode(in <ref>Node</ref> n, 
                                  in DOMString? namespaceURI, 
                                  in DOMString qualifiedName)
                                        raises(<ref>DOMException</ref>);
  };
};</webidl>
    <Typedef name="DOMTimeStamp" id="::dom::DOMTimeStamp">
      <webidl>  typedef   unsigned long long DOMTimeStamp;</webidl>
      <Type type="unsigned long long"/>
    </Typedef>
    <Typedef name="DOMUserData" id="::dom::DOMUserData">
      <webidl>  typedef   any DOMUserData;</webidl>
      <Type type="any"/>
    </Typedef>
    <Typedef name="DOMObject" id="::dom::DOMObject">
      <webidl>  typedef   object DOMObject;</webidl>
      <Type type="object"/>
    </Typedef>
    <Exception name="DOMException" id="::dom::DOMException">
      <webidl>  exception DOMException {

    const unsigned short INDEX_SIZE_ERR              = 1;
    const unsigned short DOMSTRING_SIZE_ERR          = 2;
    const unsigned short HIERARCHY_REQUEST_ERR       = 3;
    const unsigned short WRONG_DOCUMENT_ERR          = 4;
    const unsigned short INVALID_CHARACTER_ERR       = 5;
    const unsigned short NO_DATA_ALLOWED_ERR         = 6;
    const unsigned short NO_MODIFICATION_ALLOWED_ERR = 7;
    const unsigned short NOT_FOUND_ERR               = 8;
    const unsigned short NOT_SUPPORTED_ERR           = 9;
    const unsigned short INUSE_ATTRIBUTE_ERR         = 10;
    const unsigned short INVALID_STATE_ERR           = 11;
    const unsigned short SYNTAX_ERR                  = 12;
    const unsigned short INVALID_MODIFICATION_ERR    = 13;
    const unsigned short NAMESPACE_ERR               = 14;
    const unsigned short INVALID_ACCESS_ERR          = 15;
    const unsigned short VALIDATION_ERR              = 16;
    const unsigned short TYPE_MISMATCH_ERR           = 17;

    unsigned short code;
  };</webidl>
      <Const name="INDEX_SIZE_ERR" value="1" id="::dom::DOMException::INDEX_SIZE_ERR">
        <Type type="unsigned short"/>
      </Const>
      <Const name="DOMSTRING_SIZE_ERR" value="2" id="::dom::DOMException::DOMSTRING_SIZE_ERR">
        <Type type="unsigned short"/>
      </Const>
      <Const name="HIERARCHY_REQUEST_ERR" value="3" id="::dom::DOMException::HIERARCHY_REQUEST_ERR">
        <Type type="unsigned short"/>
      </Const>
      <Const name="WRONG_DOCUMENT_ERR" value="4" id="::dom::DOMException::WRONG_DOCUMENT_ERR">
        <Type type="unsigned short"/>
      </Const>
      <Const name="INVALID_CHARACTER_ERR" value="5" id="::dom::DOMException::INVALID_CHARACTER_ERR">
        <Type type="unsigned short"/>
      </Const>
      <Const name="NO_DATA_ALLOWED_ERR" value="6" id="::dom::DOMException::NO_DATA_ALLOWED_ERR">
        <Type type="unsigned short"/>
      </Const>
      <Const name="NO_MODIFICATION_ALLOWED_ERR" value="7" id="::dom::DOMException::NO_MODIFICATION_ALLOWED_ERR">
        <Type type="unsigned short"/>
      </Const>
      <Const name="NOT_FOUND_ERR" value="8" id="::dom::DOMException::NOT_FOUND_ERR">
        <Type type="unsigned short"/>
      </Const>
      <Const name="NOT_SUPPORTED_ERR" value="9" id="::dom::DOMException::NOT_SUPPORTED_ERR">
        <Type type="unsigned short"/>
      </Const>
      <Const name="INUSE_ATTRIBUTE_ERR" value="10" id="::dom::DOMException::INUSE_ATTRIBUTE_ERR">
        <Type type="unsigned short"/>
      </Const>
      <Const name="INVALID_STATE_ERR" value="11" id="::dom::DOMException::INVALID_STATE_ERR">
        <Type type="unsigned short"/>
      </Const>
      <Const name="SYNTAX_ERR" value="12" id="::dom::DOMException::SYNTAX_ERR">
        <Type type="unsigned short"/>
      </Const>
      <Const name="INVALID_MODIFICATION_ERR" value="13" id="::dom::DOMException::INVALID_MODIFICATION_ERR">
        <Type type="unsigned short"/>
      </Const>
      <Const name="NAMESPACE_ERR" value="14" id="::dom::DOMException::NAMESPACE_ERR">
        <Type type="unsigned short"/>
      </Const>
      <Const name="INVALID_ACCESS_ERR" value="15" id="::dom::DOMException::INVALID_ACCESS_ERR">
        <Type type="unsigned short"/>
      </Const>
      <Const name="VALIDATION_ERR" value="16" id="::dom::DOMException::VALIDATION_ERR">
        <Type type="unsigned short"/>
      </Const>
      <Const name="TYPE_MISMATCH_ERR" value="17" id="::dom::DOMException::TYPE_MISMATCH_ERR">
        <Type type="unsigned short"/>
      </Const>
      <ExceptionField name="code" id="::dom::DOMException::code">
        <Type type="unsigned short"/>
      </ExceptionField>
    </Exception>
    <Interface name="DOMStringList" id="::dom::DOMStringList">
      <webidl>  interface DOMStringList {
    getter DOMString? item(in unsigned long index);
    readonly attribute unsigned long length;
    boolean contains(in DOMString? str);
  };</webidl>
      <Operation getter="getter" name="item" id="::dom::DOMStringList::item">
        <webidl>    getter DOMString? item(in unsigned long index);</webidl>
        <Type type="DOMString" nullable="nullable"/>
        <ArgumentList>
          <Argument in="in" name="index">
            <Type type="unsigned long"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Attribute readonly="readonly" name="length" id="::dom::DOMStringList::length">
        <webidl>    readonly attribute unsigned long length;</webidl>
        <Type type="unsigned long"/>
      </Attribute>
      <Operation name="contains" id="::dom::DOMStringList::contains">
        <webidl>    boolean contains(in DOMString? str);</webidl>
        <Type type="boolean"/>
        <ArgumentList>
          <Argument in="in" name="str">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
        </ArgumentList>
      </Operation>
    </Interface>
    <Interface name="NameList" id="::dom::NameList">
      <webidl>  interface NameList {
    DOMString?          getName(in unsigned long index);
    DOMString?          getNamespaceURI(in unsigned long index);
    readonly attribute unsigned long   length;
    boolean            contains(in DOMString? str);
    boolean            containsNS(in DOMString? namespaceURI, 
                                  in DOMString? name);
  };</webidl>
      <Operation name="getName" id="::dom::NameList::getName">
        <webidl>    DOMString?          getName(in unsigned long index);</webidl>
        <Type type="DOMString" nullable="nullable"/>
        <ArgumentList>
          <Argument in="in" name="index">
            <Type type="unsigned long"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="getNamespaceURI" id="::dom::NameList::getNamespaceURI">
        <webidl>    DOMString?          getNamespaceURI(in unsigned long index);</webidl>
        <Type type="DOMString" nullable="nullable"/>
        <ArgumentList>
          <Argument in="in" name="index">
            <Type type="unsigned long"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Attribute readonly="readonly" name="length" id="::dom::NameList::length">
        <webidl>    readonly attribute unsigned long   length;</webidl>
        <Type type="unsigned long"/>
      </Attribute>
      <Operation name="contains" id="::dom::NameList::contains">
        <webidl>    boolean            contains(in DOMString? str);</webidl>
        <Type type="boolean"/>
        <ArgumentList>
          <Argument in="in" name="str">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="containsNS" id="::dom::NameList::containsNS">
        <webidl>    boolean            containsNS(in DOMString? namespaceURI, 
                                  in DOMString? name);</webidl>
        <Type type="boolean"/>
        <ArgumentList>
          <Argument in="in" name="namespaceURI">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="name">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
        </ArgumentList>
      </Operation>
    </Interface>
    <Interface name="DOMImplementationList" id="::dom::DOMImplementationList">
      <webidl>  interface DOMImplementationList {
    getter <ref>DOMImplementation</ref> item(in unsigned long index);
    readonly attribute unsigned long length;
  };</webidl>
      <Operation getter="getter" name="item" id="::dom::DOMImplementationList::item">
        <webidl>    getter <ref>DOMImplementation</ref> item(in unsigned long index);</webidl>
        <Type name="DOMImplementation"/>
        <ArgumentList>
          <Argument in="in" name="index">
            <Type type="unsigned long"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Attribute readonly="readonly" name="length" id="::dom::DOMImplementationList::length">
        <webidl>    readonly attribute unsigned long length;</webidl>
        <Type type="unsigned long"/>
      </Attribute>
    </Interface>
    <Interface name="DOMImplementationSource" id="::dom::DOMImplementationSource">
      <webidl>  interface DOMImplementationSource {
    <ref>DOMImplementation</ref>  getDOMImplementation(in DOMString features);
    <ref>DOMImplementationList</ref> getDOMImplementationList(in DOMString features);
  };</webidl>
      <Operation name="getDOMImplementation" id="::dom::DOMImplementationSource::getDOMImplementation">
        <webidl>    <ref>DOMImplementation</ref>  getDOMImplementation(in DOMString features);</webidl>
        <Type name="DOMImplementation"/>
        <ArgumentList>
          <Argument in="in" name="features">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="getDOMImplementationList" id="::dom::DOMImplementationSource::getDOMImplementationList">
        <webidl>    <ref>DOMImplementationList</ref> getDOMImplementationList(in DOMString features);</webidl>
        <Type name="DOMImplementationList"/>
        <ArgumentList>
          <Argument in="in" name="features">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
    </Interface>
    <Interface name="DOMImplementation" id="::dom::DOMImplementation">
      <webidl>  interface DOMImplementation {
    boolean            hasFeature(in DOMString feature, 
                                  in DOMString version);
    <ref>DocumentType</ref>       createDocumentType(in DOMString qualifiedName, 
                                          in DOMString? publicId, 
                                          in DOMString? systemId)
                                        raises(<ref>DOMException</ref>);
    <ref>Document</ref>           createDocument(in DOMString? namespaceURI, 
                                      in DOMString? qualifiedName, 
                                      in <ref>DocumentType</ref> doctype)
                                        raises(<ref>DOMException</ref>);
    <ref>DOMObject</ref>          getFeature(in DOMString feature, 
                                  in DOMString version);
  };</webidl>
      <Operation name="hasFeature" id="::dom::DOMImplementation::hasFeature">
        <webidl>    boolean            hasFeature(in DOMString feature, 
                                  in DOMString version);</webidl>
        <Type type="boolean"/>
        <ArgumentList>
          <Argument in="in" name="feature">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="version">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="createDocumentType" id="::dom::DOMImplementation::createDocumentType">
        <webidl>    <ref>DocumentType</ref>       createDocumentType(in DOMString qualifiedName, 
                                          in DOMString? publicId, 
                                          in DOMString? systemId)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="DocumentType"/>
        <ArgumentList>
          <Argument in="in" name="qualifiedName">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="publicId">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="systemId">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="createDocument" id="::dom::DOMImplementation::createDocument">
        <webidl>    <ref>Document</ref>           createDocument(in DOMString? namespaceURI, 
                                      in DOMString? qualifiedName, 
                                      in <ref>DocumentType</ref> doctype)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Document"/>
        <ArgumentList>
          <Argument in="in" name="namespaceURI">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="qualifiedName">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="doctype">
            <Type name="DocumentType"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="getFeature" id="::dom::DOMImplementation::getFeature">
        <webidl>    <ref>DOMObject</ref>          getFeature(in DOMString feature, 
                                  in DOMString version);</webidl>
        <Type name="DOMObject"/>
        <ArgumentList>
          <Argument in="in" name="feature">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="version">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
    </Interface>
    <Interface name="Node" id="::dom::Node">
      <webidl>  [PrototypeRoot]
  interface Node {

    const unsigned short ELEMENT_NODE                   = 1;
    const unsigned short ATTRIBUTE_NODE                 = 2;
    const unsigned short TEXT_NODE                      = 3;
    const unsigned short CDATA_SECTION_NODE             = 4;
    const unsigned short ENTITY_REFERENCE_NODE          = 5;
    const unsigned short ENTITY_NODE                    = 6;
    const unsigned short PROCESSING_INSTRUCTION_NODE    = 7;
    const unsigned short COMMENT_NODE                   = 8;
    const unsigned short DOCUMENT_NODE                  = 9;
    const unsigned short DOCUMENT_TYPE_NODE             = 10;
    const unsigned short DOCUMENT_FRAGMENT_NODE         = 11;
    const unsigned short NOTATION_NODE                  = 12;

    readonly attribute DOMString       nodeName;
             attribute DOMString?      nodeValue getraises(<ref>DOMException</ref>) setraises(<ref>DOMException</ref>);

    readonly attribute unsigned short  nodeType;
    readonly attribute <ref>Node</ref>            parentNode;
    readonly attribute <ref>NodeList</ref>        childNodes;
    readonly attribute <ref>Node</ref>            firstChild;
    readonly attribute <ref>Node</ref>            lastChild;
    readonly attribute <ref>Node</ref>            previousSibling;
    readonly attribute <ref>Node</ref>            nextSibling;
    readonly attribute <ref>NamedNodeMap</ref>    attributes;
    readonly attribute <ref>Document</ref>        ownerDocument;
    <ref>Node</ref>               insertBefore(in <ref>Node</ref> newChild, 
                                    in <ref>Node</ref> refChild)
                                        raises(<ref>DOMException</ref>);
    <ref>Node</ref>               replaceChild(in <ref>Node</ref> newChild, 
                                    in <ref>Node</ref> oldChild)
                                        raises(<ref>DOMException</ref>);
    <ref>Node</ref>               removeChild(in <ref>Node</ref> oldChild)
                                        raises(<ref>DOMException</ref>);
    <ref>Node</ref>               appendChild(in <ref>Node</ref> newChild)
                                        raises(<ref>DOMException</ref>);
    boolean            hasChildNodes();
    <ref>Node</ref>               cloneNode(in boolean deep);
    void               normalize();
    boolean            isSupported(in DOMString feature, 
                                   in DOMString version);
    readonly attribute DOMString?      namespaceURI;
             attribute DOMString?      prefix setraises(<ref>DOMException</ref>);

    readonly attribute DOMString?      localName;
    boolean            hasAttributes();
    readonly attribute DOMString?      baseURI;

    const unsigned short      DOCUMENT_POSITION_DISCONNECTED = 0x01;
    const unsigned short      DOCUMENT_POSITION_PRECEDING    = 0x02;
    const unsigned short      DOCUMENT_POSITION_FOLLOWING    = 0x04;
    const unsigned short      DOCUMENT_POSITION_CONTAINS     = 0x08;
    const unsigned short      DOCUMENT_POSITION_CONTAINED_BY = 0x10;
    const unsigned short      DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 0x20;

    unsigned short     compareDocumentPosition(in <ref>Node</ref> other)
                                        raises(<ref>DOMException</ref>);
             attribute DOMString?      textContent getraises(<ref>DOMException</ref>) setraises(<ref>DOMException</ref>);

    boolean            isSameNode(in <ref>Node</ref> other);
    DOMString?         lookupPrefix(in DOMString? namespaceURI);
    boolean            isDefaultNamespace(in DOMString? namespaceURI);
    DOMString?         lookupNamespaceURI(in DOMString? prefix);
    boolean            isEqualNode(in <ref>Node</ref> arg);
    <ref>DOMObject</ref>          getFeature(in DOMString feature, 
                                  in DOMString version);
    <ref>DOMUserData</ref>        setUserData(in DOMString key, 
                                   in <ref>DOMUserData</ref> data, 
                                   in <ref>UserDataHandler</ref> handler);
    <ref>DOMUserData</ref>        getUserData(in DOMString key);
  };</webidl>
      <ExtendedAttributeList>
        <ExtendedAttribute name="PrototypeRoot"/>
      </ExtendedAttributeList>
      <Const name="ELEMENT_NODE" value="1" id="::dom::Node::ELEMENT_NODE">
        <webidl>    const unsigned short ELEMENT_NODE                   = 1;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="ATTRIBUTE_NODE" value="2" id="::dom::Node::ATTRIBUTE_NODE">
        <webidl>    const unsigned short ATTRIBUTE_NODE                 = 2;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="TEXT_NODE" value="3" id="::dom::Node::TEXT_NODE">
        <webidl>    const unsigned short TEXT_NODE                      = 3;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CDATA_SECTION_NODE" value="4" id="::dom::Node::CDATA_SECTION_NODE">
        <webidl>    const unsigned short CDATA_SECTION_NODE             = 4;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="ENTITY_REFERENCE_NODE" value="5" id="::dom::Node::ENTITY_REFERENCE_NODE">
        <webidl>    const unsigned short ENTITY_REFERENCE_NODE          = 5;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="ENTITY_NODE" value="6" id="::dom::Node::ENTITY_NODE">
        <webidl>    const unsigned short ENTITY_NODE                    = 6;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="PROCESSING_INSTRUCTION_NODE" value="7" id="::dom::Node::PROCESSING_INSTRUCTION_NODE">
        <webidl>    const unsigned short PROCESSING_INSTRUCTION_NODE    = 7;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="COMMENT_NODE" value="8" id="::dom::Node::COMMENT_NODE">
        <webidl>    const unsigned short COMMENT_NODE                   = 8;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="DOCUMENT_NODE" value="9" id="::dom::Node::DOCUMENT_NODE">
        <webidl>    const unsigned short DOCUMENT_NODE                  = 9;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="DOCUMENT_TYPE_NODE" value="10" id="::dom::Node::DOCUMENT_TYPE_NODE">
        <webidl>    const unsigned short DOCUMENT_TYPE_NODE             = 10;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="DOCUMENT_FRAGMENT_NODE" value="11" id="::dom::Node::DOCUMENT_FRAGMENT_NODE">
        <webidl>    const unsigned short DOCUMENT_FRAGMENT_NODE         = 11;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="NOTATION_NODE" value="12" id="::dom::Node::NOTATION_NODE">
        <webidl>    const unsigned short NOTATION_NODE                  = 12;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Attribute readonly="readonly" name="nodeName" id="::dom::Node::nodeName">
        <webidl>    readonly attribute DOMString       nodeName;</webidl>
        <Type type="DOMString"/>
      </Attribute>
      <Attribute name="nodeValue" id="::dom::Node::nodeValue">
        <webidl>             attribute DOMString?      nodeValue getraises(<ref>DOMException</ref>) setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString" nullable="nullable"/>
        <GetRaises>
          <RaiseException name="DOMException"/>
        </GetRaises>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute readonly="readonly" name="nodeType" id="::dom::Node::nodeType">
        <webidl>    readonly attribute unsigned short  nodeType;</webidl>
        <Type type="unsigned short"/>
      </Attribute>
      <Attribute readonly="readonly" name="parentNode" id="::dom::Node::parentNode">
        <webidl>    readonly attribute <ref>Node</ref>            parentNode;</webidl>
        <Type name="Node"/>
      </Attribute>
      <Attribute readonly="readonly" name="childNodes" id="::dom::Node::childNodes">
        <webidl>    readonly attribute <ref>NodeList</ref>        childNodes;</webidl>
        <Type name="NodeList"/>
      </Attribute>
      <Attribute readonly="readonly" name="firstChild" id="::dom::Node::firstChild">
        <webidl>    readonly attribute <ref>Node</ref>            firstChild;</webidl>
        <Type name="Node"/>
      </Attribute>
      <Attribute readonly="readonly" name="lastChild" id="::dom::Node::lastChild">
        <webidl>    readonly attribute <ref>Node</ref>            lastChild;</webidl>
        <Type name="Node"/>
      </Attribute>
      <Attribute readonly="readonly" name="previousSibling" id="::dom::Node::previousSibling">
        <webidl>    readonly attribute <ref>Node</ref>            previousSibling;</webidl>
        <Type name="Node"/>
      </Attribute>
      <Attribute readonly="readonly" name="nextSibling" id="::dom::Node::nextSibling">
        <webidl>    readonly attribute <ref>Node</ref>            nextSibling;</webidl>
        <Type name="Node"/>
      </Attribute>
      <Attribute readonly="readonly" name="attributes" id="::dom::Node::attributes">
        <webidl>    readonly attribute <ref>NamedNodeMap</ref>    attributes;</webidl>
        <Type name="NamedNodeMap"/>
      </Attribute>
      <Attribute readonly="readonly" name="ownerDocument" id="::dom::Node::ownerDocument">
        <webidl>    readonly attribute <ref>Document</ref>        ownerDocument;</webidl>
        <Type name="Document"/>
      </Attribute>
      <Operation name="insertBefore" id="::dom::Node::insertBefore">
        <webidl>    <ref>Node</ref>               insertBefore(in <ref>Node</ref> newChild, 
                                    in <ref>Node</ref> refChild)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Node"/>
        <ArgumentList>
          <Argument in="in" name="newChild">
            <Type name="Node"/>
          </Argument>
          <Argument in="in" name="refChild">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="replaceChild" id="::dom::Node::replaceChild">
        <webidl>    <ref>Node</ref>               replaceChild(in <ref>Node</ref> newChild, 
                                    in <ref>Node</ref> oldChild)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Node"/>
        <ArgumentList>
          <Argument in="in" name="newChild">
            <Type name="Node"/>
          </Argument>
          <Argument in="in" name="oldChild">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="removeChild" id="::dom::Node::removeChild">
        <webidl>    <ref>Node</ref>               removeChild(in <ref>Node</ref> oldChild)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Node"/>
        <ArgumentList>
          <Argument in="in" name="oldChild">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="appendChild" id="::dom::Node::appendChild">
        <webidl>    <ref>Node</ref>               appendChild(in <ref>Node</ref> newChild)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Node"/>
        <ArgumentList>
          <Argument in="in" name="newChild">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="hasChildNodes" id="::dom::Node::hasChildNodes">
        <webidl>    boolean            hasChildNodes();</webidl>
        <Type type="boolean"/>
        <ArgumentList/>
      </Operation>
      <Operation name="cloneNode" id="::dom::Node::cloneNode">
        <webidl>    <ref>Node</ref>               cloneNode(in boolean deep);</webidl>
        <Type name="Node"/>
        <ArgumentList>
          <Argument in="in" name="deep">
            <Type type="boolean"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="normalize" id="::dom::Node::normalize">
        <webidl>    void               normalize();</webidl>
        <Type type="void"/>
        <ArgumentList/>
      </Operation>
      <Operation name="isSupported" id="::dom::Node::isSupported">
        <webidl>    boolean            isSupported(in DOMString feature, 
                                   in DOMString version);</webidl>
        <Type type="boolean"/>
        <ArgumentList>
          <Argument in="in" name="feature">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="version">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Attribute readonly="readonly" name="namespaceURI" id="::dom::Node::namespaceURI">
        <webidl>    readonly attribute DOMString?      namespaceURI;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute name="prefix" id="::dom::Node::prefix">
        <webidl>             attribute DOMString?      prefix setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString" nullable="nullable"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute readonly="readonly" name="localName" id="::dom::Node::localName">
        <webidl>    readonly attribute DOMString?      localName;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Operation name="hasAttributes" id="::dom::Node::hasAttributes">
        <webidl>    boolean            hasAttributes();</webidl>
        <Type type="boolean"/>
        <ArgumentList/>
      </Operation>
      <Attribute readonly="readonly" name="baseURI" id="::dom::Node::baseURI">
        <webidl>    readonly attribute DOMString?      baseURI;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Const name="DOCUMENT_POSITION_DISCONNECTED" value="0x01" id="::dom::Node::DOCUMENT_POSITION_DISCONNECTED">
        <webidl>    const unsigned short      DOCUMENT_POSITION_DISCONNECTED = 0x01;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="DOCUMENT_POSITION_PRECEDING" value="0x02" id="::dom::Node::DOCUMENT_POSITION_PRECEDING">
        <webidl>    const unsigned short      DOCUMENT_POSITION_PRECEDING    = 0x02;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="DOCUMENT_POSITION_FOLLOWING" value="0x04" id="::dom::Node::DOCUMENT_POSITION_FOLLOWING">
        <webidl>    const unsigned short      DOCUMENT_POSITION_FOLLOWING    = 0x04;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="DOCUMENT_POSITION_CONTAINS" value="0x08" id="::dom::Node::DOCUMENT_POSITION_CONTAINS">
        <webidl>    const unsigned short      DOCUMENT_POSITION_CONTAINS     = 0x08;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="DOCUMENT_POSITION_CONTAINED_BY" value="0x10" id="::dom::Node::DOCUMENT_POSITION_CONTAINED_BY">
        <webidl>    const unsigned short      DOCUMENT_POSITION_CONTAINED_BY = 0x10;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC" value="0x20" id="::dom::Node::DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC">
        <webidl>    const unsigned short      DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 0x20;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Operation name="compareDocumentPosition" id="::dom::Node::compareDocumentPosition">
        <webidl>    unsigned short     compareDocumentPosition(in <ref>Node</ref> other)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="unsigned short"/>
        <ArgumentList>
          <Argument in="in" name="other">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Attribute name="textContent" id="::dom::Node::textContent">
        <webidl>             attribute DOMString?      textContent getraises(<ref>DOMException</ref>) setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString" nullable="nullable"/>
        <GetRaises>
          <RaiseException name="DOMException"/>
        </GetRaises>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Operation name="isSameNode" id="::dom::Node::isSameNode">
        <webidl>    boolean            isSameNode(in <ref>Node</ref> other);</webidl>
        <Type type="boolean"/>
        <ArgumentList>
          <Argument in="in" name="other">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="lookupPrefix" id="::dom::Node::lookupPrefix">
        <webidl>    DOMString?         lookupPrefix(in DOMString? namespaceURI);</webidl>
        <Type type="DOMString" nullable="nullable"/>
        <ArgumentList>
          <Argument in="in" name="namespaceURI">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="isDefaultNamespace" id="::dom::Node::isDefaultNamespace">
        <webidl>    boolean            isDefaultNamespace(in DOMString? namespaceURI);</webidl>
        <Type type="boolean"/>
        <ArgumentList>
          <Argument in="in" name="namespaceURI">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="lookupNamespaceURI" id="::dom::Node::lookupNamespaceURI">
        <webidl>    DOMString?         lookupNamespaceURI(in DOMString? prefix);</webidl>
        <Type type="DOMString" nullable="nullable"/>
        <ArgumentList>
          <Argument in="in" name="prefix">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="isEqualNode" id="::dom::Node::isEqualNode">
        <webidl>    boolean            isEqualNode(in <ref>Node</ref> arg);</webidl>
        <Type type="boolean"/>
        <ArgumentList>
          <Argument in="in" name="arg">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="getFeature" id="::dom::Node::getFeature">
        <webidl>    <ref>DOMObject</ref>          getFeature(in DOMString feature, 
                                  in DOMString version);</webidl>
        <Type name="DOMObject"/>
        <ArgumentList>
          <Argument in="in" name="feature">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="version">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="setUserData" id="::dom::Node::setUserData">
        <webidl>    <ref>DOMUserData</ref>        setUserData(in DOMString key, 
                                   in <ref>DOMUserData</ref> data, 
                                   in <ref>UserDataHandler</ref> handler);</webidl>
        <Type name="DOMUserData"/>
        <ArgumentList>
          <Argument in="in" name="key">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="data">
            <Type name="DOMUserData"/>
          </Argument>
          <Argument in="in" name="handler">
            <Type name="UserDataHandler"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="getUserData" id="::dom::Node::getUserData">
        <webidl>    <ref>DOMUserData</ref>        getUserData(in DOMString key);</webidl>
        <Type name="DOMUserData"/>
        <ArgumentList>
          <Argument in="in" name="key">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
    </Interface>
    <Interface name="NodeList" id="::dom::NodeList">
      <webidl>  interface NodeList {
    getter <ref>Node</ref> item(in unsigned long index);
    readonly attribute unsigned long length;
  };</webidl>
      <Operation getter="getter" name="item" id="::dom::NodeList::item">
        <webidl>    getter <ref>Node</ref> item(in unsigned long index);</webidl>
        <Type name="Node"/>
        <ArgumentList>
          <Argument in="in" name="index">
            <Type type="unsigned long"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Attribute readonly="readonly" name="length" id="::dom::NodeList::length">
        <webidl>    readonly attribute unsigned long length;</webidl>
        <Type type="unsigned long"/>
      </Attribute>
    </Interface>
    <Interface name="NamedNodeMap" id="::dom::NamedNodeMap">
      <webidl>  interface NamedNodeMap {
    <ref>Node</ref>               getNamedItem(in DOMString name);
    <ref>Node</ref>               setNamedItem(in <ref>Node</ref> arg)
                                        raises(<ref>DOMException</ref>);
    <ref>Node</ref>               removeNamedItem(in DOMString name)
                                        raises(<ref>DOMException</ref>);
    getter <ref>Node</ref>        item(in unsigned long index);
    readonly attribute unsigned long   length;
    <ref>Node</ref>               getNamedItemNS(in DOMString? namespaceURI, 
                                      in DOMString? localName)
                                        raises(<ref>DOMException</ref>);
    <ref>Node</ref>               setNamedItemNS(in <ref>Node</ref> arg)
                                        raises(<ref>DOMException</ref>);
    <ref>Node</ref>               removeNamedItemNS(in DOMString? namespaceURI, 
                                         in DOMString? localName)
                                        raises(<ref>DOMException</ref>);
  };</webidl>
      <Operation name="getNamedItem" id="::dom::NamedNodeMap::getNamedItem">
        <webidl>    <ref>Node</ref>               getNamedItem(in DOMString name);</webidl>
        <Type name="Node"/>
        <ArgumentList>
          <Argument in="in" name="name">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="setNamedItem" id="::dom::NamedNodeMap::setNamedItem">
        <webidl>    <ref>Node</ref>               setNamedItem(in <ref>Node</ref> arg)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Node"/>
        <ArgumentList>
          <Argument in="in" name="arg">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="removeNamedItem" id="::dom::NamedNodeMap::removeNamedItem">
        <webidl>    <ref>Node</ref>               removeNamedItem(in DOMString name)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Node"/>
        <ArgumentList>
          <Argument in="in" name="name">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation getter="getter" name="item" id="::dom::NamedNodeMap::item">
        <webidl>    getter <ref>Node</ref>        item(in unsigned long index);</webidl>
        <Type name="Node"/>
        <ArgumentList>
          <Argument in="in" name="index">
            <Type type="unsigned long"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Attribute readonly="readonly" name="length" id="::dom::NamedNodeMap::length">
        <webidl>    readonly attribute unsigned long   length;</webidl>
        <Type type="unsigned long"/>
      </Attribute>
      <Operation name="getNamedItemNS" id="::dom::NamedNodeMap::getNamedItemNS">
        <webidl>    <ref>Node</ref>               getNamedItemNS(in DOMString? namespaceURI, 
                                      in DOMString? localName)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Node"/>
        <ArgumentList>
          <Argument in="in" name="namespaceURI">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="localName">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="setNamedItemNS" id="::dom::NamedNodeMap::setNamedItemNS">
        <webidl>    <ref>Node</ref>               setNamedItemNS(in <ref>Node</ref> arg)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Node"/>
        <ArgumentList>
          <Argument in="in" name="arg">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="removeNamedItemNS" id="::dom::NamedNodeMap::removeNamedItemNS">
        <webidl>    <ref>Node</ref>               removeNamedItemNS(in DOMString? namespaceURI, 
                                         in DOMString? localName)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Node"/>
        <ArgumentList>
          <Argument in="in" name="namespaceURI">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="localName">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
    </Interface>
    <Interface name="CharacterData" id="::dom::CharacterData">
      <webidl>  interface CharacterData : <ref>Node</ref> {
             attribute DOMString       data getraises(<ref>DOMException</ref>) setraises(<ref>DOMException</ref>);

    readonly attribute unsigned long   length;
    DOMString          substringData(in unsigned long offset, 
                                     in unsigned long count)
                                        raises(<ref>DOMException</ref>);
    void               appendData(in DOMString arg)
                                        raises(<ref>DOMException</ref>);
    void               insertData(in unsigned long offset, 
                                  in DOMString arg)
                                        raises(<ref>DOMException</ref>);
    void               deleteData(in unsigned long offset, 
                                  in unsigned long count)
                                        raises(<ref>DOMException</ref>);
    void               replaceData(in unsigned long offset, 
                                   in unsigned long count, 
                                   in DOMString arg)
                                        raises(<ref>DOMException</ref>);
  };</webidl>
      <InterfaceInheritance>
        <Name name="Node"/>
      </InterfaceInheritance>
      <Attribute name="data" id="::dom::CharacterData::data">
        <webidl>             attribute DOMString       data getraises(<ref>DOMException</ref>) setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <GetRaises>
          <RaiseException name="DOMException"/>
        </GetRaises>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute readonly="readonly" name="length" id="::dom::CharacterData::length">
        <webidl>    readonly attribute unsigned long   length;</webidl>
        <Type type="unsigned long"/>
      </Attribute>
      <Operation name="substringData" id="::dom::CharacterData::substringData">
        <webidl>    DOMString          substringData(in unsigned long offset, 
                                     in unsigned long count)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <ArgumentList>
          <Argument in="in" name="offset">
            <Type type="unsigned long"/>
          </Argument>
          <Argument in="in" name="count">
            <Type type="unsigned long"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="appendData" id="::dom::CharacterData::appendData">
        <webidl>    void               appendData(in DOMString arg)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="arg">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="insertData" id="::dom::CharacterData::insertData">
        <webidl>    void               insertData(in unsigned long offset, 
                                  in DOMString arg)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="offset">
            <Type type="unsigned long"/>
          </Argument>
          <Argument in="in" name="arg">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="deleteData" id="::dom::CharacterData::deleteData">
        <webidl>    void               deleteData(in unsigned long offset, 
                                  in unsigned long count)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="offset">
            <Type type="unsigned long"/>
          </Argument>
          <Argument in="in" name="count">
            <Type type="unsigned long"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="replaceData" id="::dom::CharacterData::replaceData">
        <webidl>    void               replaceData(in unsigned long offset, 
                                   in unsigned long count, 
                                   in DOMString arg)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="offset">
            <Type type="unsigned long"/>
          </Argument>
          <Argument in="in" name="count">
            <Type type="unsigned long"/>
          </Argument>
          <Argument in="in" name="arg">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
    </Interface>
    <Interface name="Attr" id="::dom::Attr">
      <webidl>  interface Attr : <ref>Node</ref> {
    readonly attribute DOMString       name;
    readonly attribute boolean         specified;
             attribute DOMString       value setraises(<ref>DOMException</ref>);

    readonly attribute <ref>Element</ref>         ownerElement;
    readonly attribute <ref>TypeInfo</ref>        schemaTypeInfo;
    readonly attribute boolean         isId;
  };</webidl>
      <InterfaceInheritance>
        <Name name="Node"/>
      </InterfaceInheritance>
      <Attribute readonly="readonly" name="name" id="::dom::Attr::name">
        <webidl>    readonly attribute DOMString       name;</webidl>
        <Type type="DOMString"/>
      </Attribute>
      <Attribute readonly="readonly" name="specified" id="::dom::Attr::specified">
        <webidl>    readonly attribute boolean         specified;</webidl>
        <Type type="boolean"/>
      </Attribute>
      <Attribute name="value" id="::dom::Attr::value">
        <webidl>             attribute DOMString       value setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute readonly="readonly" name="ownerElement" id="::dom::Attr::ownerElement">
        <webidl>    readonly attribute <ref>Element</ref>         ownerElement;</webidl>
        <Type name="Element"/>
      </Attribute>
      <Attribute readonly="readonly" name="schemaTypeInfo" id="::dom::Attr::schemaTypeInfo">
        <webidl>    readonly attribute <ref>TypeInfo</ref>        schemaTypeInfo;</webidl>
        <Type name="TypeInfo"/>
      </Attribute>
      <Attribute readonly="readonly" name="isId" id="::dom::Attr::isId">
        <webidl>    readonly attribute boolean         isId;</webidl>
        <Type type="boolean"/>
      </Attribute>
    </Interface>
    <Interface name="Element" id="::dom::Element">
      <webidl>  interface Element : <ref>Node</ref> {
    readonly attribute DOMString       tagName;
    DOMString          getAttribute(in DOMString name);
    void               setAttribute(in DOMString name, 
                                    in DOMString value)
                                        raises(<ref>DOMException</ref>);
    void               removeAttribute(in DOMString name)
                                        raises(<ref>DOMException</ref>);
    <ref>Attr</ref>               getAttributeNode(in DOMString name);
    <ref>Attr</ref>               setAttributeNode(in <ref>Attr</ref> newAttr)
                                        raises(<ref>DOMException</ref>);
    <ref>Attr</ref>               removeAttributeNode(in <ref>Attr</ref> oldAttr)
                                        raises(<ref>DOMException</ref>);
    <ref>NodeList</ref>           getElementsByTagName(in DOMString name);
    DOMString          getAttributeNS(in DOMString? namespaceURI, 
                                      in DOMString localName)
                                        raises(<ref>DOMException</ref>);
    void               setAttributeNS(in DOMString? namespaceURI, 
                                      in DOMString qualifiedName, 
                                      in DOMString value)
                                        raises(<ref>DOMException</ref>);
    void               removeAttributeNS(in DOMString? namespaceURI, 
                                         in DOMString localName)
                                        raises(<ref>DOMException</ref>);
    <ref>Attr</ref>               getAttributeNodeNS(in DOMString? namespaceURI, 
                                          in DOMString localName)
                                        raises(<ref>DOMException</ref>);
    <ref>Attr</ref>               setAttributeNodeNS(in <ref>Attr</ref> newAttr)
                                        raises(<ref>DOMException</ref>);
    <ref>NodeList</ref>           getElementsByTagNameNS(in DOMString? namespaceURI, 
                                              in DOMString localName)
                                        raises(<ref>DOMException</ref>);
    boolean            hasAttribute(in DOMString name);
    boolean            hasAttributeNS(in DOMString? namespaceURI, 
                                      in DOMString localName)
                                        raises(<ref>DOMException</ref>);
    readonly attribute <ref>TypeInfo</ref>        schemaTypeInfo;
    void               setIdAttribute(in DOMString name, 
                                      in boolean isId)
                                        raises(<ref>DOMException</ref>);
    void               setIdAttributeNS(in DOMString? namespaceURI, 
                                        in DOMString localName, 
                                        in boolean isId)
                                        raises(<ref>DOMException</ref>);
    void               setIdAttributeNode(in <ref>Attr</ref> idAttr, 
                                          in boolean isId)
                                        raises(<ref>DOMException</ref>);
  };</webidl>
      <InterfaceInheritance>
        <Name name="Node"/>
      </InterfaceInheritance>
      <Attribute readonly="readonly" name="tagName" id="::dom::Element::tagName">
        <webidl>    readonly attribute DOMString       tagName;</webidl>
        <Type type="DOMString"/>
      </Attribute>
      <Operation name="getAttribute" id="::dom::Element::getAttribute">
        <webidl>    DOMString          getAttribute(in DOMString name);</webidl>
        <Type type="DOMString"/>
        <ArgumentList>
          <Argument in="in" name="name">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="setAttribute" id="::dom::Element::setAttribute">
        <webidl>    void               setAttribute(in DOMString name, 
                                    in DOMString value)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="name">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="value">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="removeAttribute" id="::dom::Element::removeAttribute">
        <webidl>    void               removeAttribute(in DOMString name)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="name">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="getAttributeNode" id="::dom::Element::getAttributeNode">
        <webidl>    <ref>Attr</ref>               getAttributeNode(in DOMString name);</webidl>
        <Type name="Attr"/>
        <ArgumentList>
          <Argument in="in" name="name">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="setAttributeNode" id="::dom::Element::setAttributeNode">
        <webidl>    <ref>Attr</ref>               setAttributeNode(in <ref>Attr</ref> newAttr)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Attr"/>
        <ArgumentList>
          <Argument in="in" name="newAttr">
            <Type name="Attr"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="removeAttributeNode" id="::dom::Element::removeAttributeNode">
        <webidl>    <ref>Attr</ref>               removeAttributeNode(in <ref>Attr</ref> oldAttr)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Attr"/>
        <ArgumentList>
          <Argument in="in" name="oldAttr">
            <Type name="Attr"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="getElementsByTagName" id="::dom::Element::getElementsByTagName">
        <webidl>    <ref>NodeList</ref>           getElementsByTagName(in DOMString name);</webidl>
        <Type name="NodeList"/>
        <ArgumentList>
          <Argument in="in" name="name">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="getAttributeNS" id="::dom::Element::getAttributeNS">
        <webidl>    DOMString          getAttributeNS(in DOMString? namespaceURI, 
                                      in DOMString localName)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <ArgumentList>
          <Argument in="in" name="namespaceURI">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="localName">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="setAttributeNS" id="::dom::Element::setAttributeNS">
        <webidl>    void               setAttributeNS(in DOMString? namespaceURI, 
                                      in DOMString qualifiedName, 
                                      in DOMString value)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="namespaceURI">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="qualifiedName">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="value">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="removeAttributeNS" id="::dom::Element::removeAttributeNS">
        <webidl>    void               removeAttributeNS(in DOMString? namespaceURI, 
                                         in DOMString localName)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="namespaceURI">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="localName">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="getAttributeNodeNS" id="::dom::Element::getAttributeNodeNS">
        <webidl>    <ref>Attr</ref>               getAttributeNodeNS(in DOMString? namespaceURI, 
                                          in DOMString localName)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Attr"/>
        <ArgumentList>
          <Argument in="in" name="namespaceURI">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="localName">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="setAttributeNodeNS" id="::dom::Element::setAttributeNodeNS">
        <webidl>    <ref>Attr</ref>               setAttributeNodeNS(in <ref>Attr</ref> newAttr)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Attr"/>
        <ArgumentList>
          <Argument in="in" name="newAttr">
            <Type name="Attr"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="getElementsByTagNameNS" id="::dom::Element::getElementsByTagNameNS">
        <webidl>    <ref>NodeList</ref>           getElementsByTagNameNS(in DOMString? namespaceURI, 
                                              in DOMString localName)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="NodeList"/>
        <ArgumentList>
          <Argument in="in" name="namespaceURI">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="localName">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="hasAttribute" id="::dom::Element::hasAttribute">
        <webidl>    boolean            hasAttribute(in DOMString name);</webidl>
        <Type type="boolean"/>
        <ArgumentList>
          <Argument in="in" name="name">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="hasAttributeNS" id="::dom::Element::hasAttributeNS">
        <webidl>    boolean            hasAttributeNS(in DOMString? namespaceURI, 
                                      in DOMString localName)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="boolean"/>
        <ArgumentList>
          <Argument in="in" name="namespaceURI">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="localName">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Attribute readonly="readonly" name="schemaTypeInfo" id="::dom::Element::schemaTypeInfo">
        <webidl>    readonly attribute <ref>TypeInfo</ref>        schemaTypeInfo;</webidl>
        <Type name="TypeInfo"/>
      </Attribute>
      <Operation name="setIdAttribute" id="::dom::Element::setIdAttribute">
        <webidl>    void               setIdAttribute(in DOMString name, 
                                      in boolean isId)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="name">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="isId">
            <Type type="boolean"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="setIdAttributeNS" id="::dom::Element::setIdAttributeNS">
        <webidl>    void               setIdAttributeNS(in DOMString? namespaceURI, 
                                        in DOMString localName, 
                                        in boolean isId)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="namespaceURI">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="localName">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="isId">
            <Type type="boolean"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="setIdAttributeNode" id="::dom::Element::setIdAttributeNode">
        <webidl>    void               setIdAttributeNode(in <ref>Attr</ref> idAttr, 
                                          in boolean isId)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="idAttr">
            <Type name="Attr"/>
          </Argument>
          <Argument in="in" name="isId">
            <Type type="boolean"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
    </Interface>
    <Interface name="Text" id="::dom::Text">
      <webidl>  interface Text : <ref>CharacterData</ref> {
    <ref>Text</ref>               splitText(in unsigned long offset)
                                        raises(<ref>DOMException</ref>);
    readonly attribute boolean         isElementContentWhitespace;
    readonly attribute DOMString       wholeText;
    <ref>Text</ref>               replaceWholeText(in DOMString content)
                                        raises(<ref>DOMException</ref>);
  };</webidl>
      <InterfaceInheritance>
        <Name name="CharacterData"/>
      </InterfaceInheritance>
      <Operation name="splitText" id="::dom::Text::splitText">
        <webidl>    <ref>Text</ref>               splitText(in unsigned long offset)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Text"/>
        <ArgumentList>
          <Argument in="in" name="offset">
            <Type type="unsigned long"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Attribute readonly="readonly" name="isElementContentWhitespace" id="::dom::Text::isElementContentWhitespace">
        <webidl>    readonly attribute boolean         isElementContentWhitespace;</webidl>
        <Type type="boolean"/>
      </Attribute>
      <Attribute readonly="readonly" name="wholeText" id="::dom::Text::wholeText">
        <webidl>    readonly attribute DOMString       wholeText;</webidl>
        <Type type="DOMString"/>
      </Attribute>
      <Operation name="replaceWholeText" id="::dom::Text::replaceWholeText">
        <webidl>    <ref>Text</ref>               replaceWholeText(in DOMString content)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Text"/>
        <ArgumentList>
          <Argument in="in" name="content">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
    </Interface>
    <Interface name="Comment" id="::dom::Comment">
      <webidl>  interface Comment : <ref>CharacterData</ref> {
  };</webidl>
      <InterfaceInheritance>
        <Name name="CharacterData"/>
      </InterfaceInheritance>
    </Interface>
    <Interface name="TypeInfo" id="::dom::TypeInfo">
      <webidl>  interface TypeInfo {
    readonly attribute DOMString?      typeName;
    readonly attribute DOMString?      typeNamespace;

    const unsigned long       DERIVATION_RESTRICTION         = 0x00000001;
    const unsigned long       DERIVATION_EXTENSION           = 0x00000002;
    const unsigned long       DERIVATION_UNION               = 0x00000004;
    const unsigned long       DERIVATION_LIST                = 0x00000008;

    boolean            isDerivedFrom(in DOMString? typeNamespaceArg, 
                                     in DOMString typeNameArg, 
                                     in unsigned long derivationMethod);
  };</webidl>
      <Attribute readonly="readonly" name="typeName" id="::dom::TypeInfo::typeName">
        <webidl>    readonly attribute DOMString?      typeName;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute readonly="readonly" name="typeNamespace" id="::dom::TypeInfo::typeNamespace">
        <webidl>    readonly attribute DOMString?      typeNamespace;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Const name="DERIVATION_RESTRICTION" value="0x00000001" id="::dom::TypeInfo::DERIVATION_RESTRICTION">
        <webidl>    const unsigned long       DERIVATION_RESTRICTION         = 0x00000001;</webidl>
        <Type type="unsigned long"/>
      </Const>
      <Const name="DERIVATION_EXTENSION" value="0x00000002" id="::dom::TypeInfo::DERIVATION_EXTENSION">
        <webidl>    const unsigned long       DERIVATION_EXTENSION           = 0x00000002;</webidl>
        <Type type="unsigned long"/>
      </Const>
      <Const name="DERIVATION_UNION" value="0x00000004" id="::dom::TypeInfo::DERIVATION_UNION">
        <webidl>    const unsigned long       DERIVATION_UNION               = 0x00000004;</webidl>
        <Type type="unsigned long"/>
      </Const>
      <Const name="DERIVATION_LIST" value="0x00000008" id="::dom::TypeInfo::DERIVATION_LIST">
        <webidl>    const unsigned long       DERIVATION_LIST                = 0x00000008;</webidl>
        <Type type="unsigned long"/>
      </Const>
      <Operation name="isDerivedFrom" id="::dom::TypeInfo::isDerivedFrom">
        <webidl>    boolean            isDerivedFrom(in DOMString? typeNamespaceArg, 
                                     in DOMString typeNameArg, 
                                     in unsigned long derivationMethod);</webidl>
        <Type type="boolean"/>
        <ArgumentList>
          <Argument in="in" name="typeNamespaceArg">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="typeNameArg">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="derivationMethod">
            <Type type="unsigned long"/>
          </Argument>
        </ArgumentList>
      </Operation>
    </Interface>
    <Interface name="UserDataHandler" id="::dom::UserDataHandler">
      <webidl>  [Callback]
  interface UserDataHandler {

    const unsigned short      NODE_CLONED                    = 1;
    const unsigned short      NODE_IMPORTED                  = 2;
    const unsigned short      NODE_DELETED                   = 3;
    const unsigned short      NODE_RENAMED                   = 4;
    const unsigned short      NODE_ADOPTED                   = 5;

    void               handle(in unsigned short operation, 
                              in DOMString key, 
                              in <ref>DOMUserData</ref> data, 
                              in <ref>Node</ref> src, 
                              in <ref>Node</ref> dst);
  };</webidl>
      <ExtendedAttributeList>
        <ExtendedAttribute name="Callback"/>
      </ExtendedAttributeList>
      <Const name="NODE_CLONED" value="1" id="::dom::UserDataHandler::NODE_CLONED">
        <webidl>    const unsigned short      NODE_CLONED                    = 1;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="NODE_IMPORTED" value="2" id="::dom::UserDataHandler::NODE_IMPORTED">
        <webidl>    const unsigned short      NODE_IMPORTED                  = 2;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="NODE_DELETED" value="3" id="::dom::UserDataHandler::NODE_DELETED">
        <webidl>    const unsigned short      NODE_DELETED                   = 3;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="NODE_RENAMED" value="4" id="::dom::UserDataHandler::NODE_RENAMED">
        <webidl>    const unsigned short      NODE_RENAMED                   = 4;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="NODE_ADOPTED" value="5" id="::dom::UserDataHandler::NODE_ADOPTED">
        <webidl>    const unsigned short      NODE_ADOPTED                   = 5;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Operation name="handle" id="::dom::UserDataHandler::handle">
        <webidl>    void               handle(in unsigned short operation, 
                              in DOMString key, 
                              in <ref>DOMUserData</ref> data, 
                              in <ref>Node</ref> src, 
                              in <ref>Node</ref> dst);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="operation">
            <Type type="unsigned short"/>
          </Argument>
          <Argument in="in" name="key">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="data">
            <Type name="DOMUserData"/>
          </Argument>
          <Argument in="in" name="src">
            <Type name="Node"/>
          </Argument>
          <Argument in="in" name="dst">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
      </Operation>
    </Interface>
    <Interface name="DOMError" id="::dom::DOMError">
      <webidl>  interface DOMError {

    const unsigned short      SEVERITY_WARNING               = 1;
    const unsigned short      SEVERITY_ERROR                 = 2;
    const unsigned short      SEVERITY_FATAL_ERROR           = 3;

    readonly attribute unsigned short  severity;
    readonly attribute DOMString       message;
    readonly attribute DOMString       type;
    readonly attribute <ref>DOMObject</ref>       relatedException;
    readonly attribute <ref>DOMObject</ref>       relatedData;
    readonly attribute <ref>DOMLocator</ref>      location;
  };</webidl>
      <Const name="SEVERITY_WARNING" value="1" id="::dom::DOMError::SEVERITY_WARNING">
        <webidl>    const unsigned short      SEVERITY_WARNING               = 1;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="SEVERITY_ERROR" value="2" id="::dom::DOMError::SEVERITY_ERROR">
        <webidl>    const unsigned short      SEVERITY_ERROR                 = 2;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="SEVERITY_FATAL_ERROR" value="3" id="::dom::DOMError::SEVERITY_FATAL_ERROR">
        <webidl>    const unsigned short      SEVERITY_FATAL_ERROR           = 3;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Attribute readonly="readonly" name="severity" id="::dom::DOMError::severity">
        <webidl>    readonly attribute unsigned short  severity;</webidl>
        <Type type="unsigned short"/>
      </Attribute>
      <Attribute readonly="readonly" name="message" id="::dom::DOMError::message">
        <webidl>    readonly attribute DOMString       message;</webidl>
        <Type type="DOMString"/>
      </Attribute>
      <Attribute readonly="readonly" name="type" id="::dom::DOMError::type">
        <webidl>    readonly attribute DOMString       type;</webidl>
        <Type type="DOMString"/>
      </Attribute>
      <Attribute readonly="readonly" name="relatedException" id="::dom::DOMError::relatedException">
        <webidl>    readonly attribute <ref>DOMObject</ref>       relatedException;</webidl>
        <Type name="DOMObject"/>
      </Attribute>
      <Attribute readonly="readonly" name="relatedData" id="::dom::DOMError::relatedData">
        <webidl>    readonly attribute <ref>DOMObject</ref>       relatedData;</webidl>
        <Type name="DOMObject"/>
      </Attribute>
      <Attribute readonly="readonly" name="location" id="::dom::DOMError::location">
        <webidl>    readonly attribute <ref>DOMLocator</ref>      location;</webidl>
        <Type name="DOMLocator"/>
      </Attribute>
    </Interface>
    <Interface name="DOMErrorHandler" id="::dom::DOMErrorHandler">
      <webidl>  interface DOMErrorHandler {
    boolean            handleError(in <ref>DOMError</ref> error);
  };</webidl>
      <Operation name="handleError" id="::dom::DOMErrorHandler::handleError">
        <webidl>    boolean            handleError(in <ref>DOMError</ref> error);</webidl>
        <Type type="boolean"/>
        <ArgumentList>
          <Argument in="in" name="error">
            <Type name="DOMError"/>
          </Argument>
        </ArgumentList>
      </Operation>
    </Interface>
    <Interface name="DOMLocator" id="::dom::DOMLocator">
      <webidl>  interface DOMLocator {
    readonly attribute long            lineNumber;
    readonly attribute long            columnNumber;
    readonly attribute long            byteOffset;
    readonly attribute long            utf16Offset;
    readonly attribute <ref>Node</ref>            relatedNode;
    readonly attribute DOMString?      uri;
  };</webidl>
      <Attribute readonly="readonly" name="lineNumber" id="::dom::DOMLocator::lineNumber">
        <webidl>    readonly attribute long            lineNumber;</webidl>
        <Type type="long"/>
      </Attribute>
      <Attribute readonly="readonly" name="columnNumber" id="::dom::DOMLocator::columnNumber">
        <webidl>    readonly attribute long            columnNumber;</webidl>
        <Type type="long"/>
      </Attribute>
      <Attribute readonly="readonly" name="byteOffset" id="::dom::DOMLocator::byteOffset">
        <webidl>    readonly attribute long            byteOffset;</webidl>
        <Type type="long"/>
      </Attribute>
      <Attribute readonly="readonly" name="utf16Offset" id="::dom::DOMLocator::utf16Offset">
        <webidl>    readonly attribute long            utf16Offset;</webidl>
        <Type type="long"/>
      </Attribute>
      <Attribute readonly="readonly" name="relatedNode" id="::dom::DOMLocator::relatedNode">
        <webidl>    readonly attribute <ref>Node</ref>            relatedNode;</webidl>
        <Type name="Node"/>
      </Attribute>
      <Attribute readonly="readonly" name="uri" id="::dom::DOMLocator::uri">
        <webidl>    readonly attribute DOMString?      uri;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
    </Interface>
    <Interface name="DOMConfiguration" id="::dom::DOMConfiguration">
      <webidl>  interface DOMConfiguration {
    void               setParameter(in DOMString name, 
                                    in <ref>DOMUserData</ref> value)
                                        raises(<ref>DOMException</ref>);
    <ref>DOMUserData</ref>        getParameter(in DOMString name)
                                        raises(<ref>DOMException</ref>);
    boolean            canSetParameter(in DOMString name, 
                                       in <ref>DOMUserData</ref> value);
    readonly attribute <ref>DOMStringList</ref>   parameterNames;
  };</webidl>
      <Operation name="setParameter" id="::dom::DOMConfiguration::setParameter">
        <webidl>    void               setParameter(in DOMString name, 
                                    in <ref>DOMUserData</ref> value)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="name">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="value">
            <Type name="DOMUserData"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="getParameter" id="::dom::DOMConfiguration::getParameter">
        <webidl>    <ref>DOMUserData</ref>        getParameter(in DOMString name)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="DOMUserData"/>
        <ArgumentList>
          <Argument in="in" name="name">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="canSetParameter" id="::dom::DOMConfiguration::canSetParameter">
        <webidl>    boolean            canSetParameter(in DOMString name, 
                                       in <ref>DOMUserData</ref> value);</webidl>
        <Type type="boolean"/>
        <ArgumentList>
          <Argument in="in" name="name">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="value">
            <Type name="DOMUserData"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Attribute readonly="readonly" name="parameterNames" id="::dom::DOMConfiguration::parameterNames">
        <webidl>    readonly attribute <ref>DOMStringList</ref>   parameterNames;</webidl>
        <Type name="DOMStringList"/>
      </Attribute>
    </Interface>
    <Interface name="CDATASection" id="::dom::CDATASection">
      <webidl>  interface CDATASection : <ref>Text</ref> {
  };</webidl>
      <InterfaceInheritance>
        <Name name="Text"/>
      </InterfaceInheritance>
    </Interface>
    <Interface name="DocumentType" id="::dom::DocumentType">
      <webidl>  interface DocumentType : <ref>Node</ref> {
    readonly attribute DOMString       name;
    readonly attribute <ref>NamedNodeMap</ref>    entities;
    readonly attribute <ref>NamedNodeMap</ref>    notations;
    readonly attribute DOMString?      publicId;
    readonly attribute DOMString?      systemId;
    readonly attribute DOMString?      internalSubset;
  };</webidl>
      <InterfaceInheritance>
        <Name name="Node"/>
      </InterfaceInheritance>
      <Attribute readonly="readonly" name="name" id="::dom::DocumentType::name">
        <webidl>    readonly attribute DOMString       name;</webidl>
        <Type type="DOMString"/>
      </Attribute>
      <Attribute readonly="readonly" name="entities" id="::dom::DocumentType::entities">
        <webidl>    readonly attribute <ref>NamedNodeMap</ref>    entities;</webidl>
        <Type name="NamedNodeMap"/>
      </Attribute>
      <Attribute readonly="readonly" name="notations" id="::dom::DocumentType::notations">
        <webidl>    readonly attribute <ref>NamedNodeMap</ref>    notations;</webidl>
        <Type name="NamedNodeMap"/>
      </Attribute>
      <Attribute readonly="readonly" name="publicId" id="::dom::DocumentType::publicId">
        <webidl>    readonly attribute DOMString?      publicId;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute readonly="readonly" name="systemId" id="::dom::DocumentType::systemId">
        <webidl>    readonly attribute DOMString?      systemId;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute readonly="readonly" name="internalSubset" id="::dom::DocumentType::internalSubset">
        <webidl>    readonly attribute DOMString?      internalSubset;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
    </Interface>
    <Interface name="Notation" id="::dom::Notation">
      <webidl>  interface Notation : <ref>Node</ref> {
    readonly attribute DOMString?      publicId;
    readonly attribute DOMString?      systemId;
  };</webidl>
      <InterfaceInheritance>
        <Name name="Node"/>
      </InterfaceInheritance>
      <Attribute readonly="readonly" name="publicId" id="::dom::Notation::publicId">
        <webidl>    readonly attribute DOMString?      publicId;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute readonly="readonly" name="systemId" id="::dom::Notation::systemId">
        <webidl>    readonly attribute DOMString?      systemId;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
    </Interface>
    <Interface name="Entity" id="::dom::Entity">
      <webidl>  interface Entity : <ref>Node</ref> {
    readonly attribute DOMString?      publicId;
    readonly attribute DOMString?      systemId;
    readonly attribute DOMString?      notationName;
    readonly attribute DOMString?      inputEncoding;
    readonly attribute DOMString?      xmlEncoding;
    readonly attribute DOMString?      xmlVersion;
  };</webidl>
      <InterfaceInheritance>
        <Name name="Node"/>
      </InterfaceInheritance>
      <Attribute readonly="readonly" name="publicId" id="::dom::Entity::publicId">
        <webidl>    readonly attribute DOMString?      publicId;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute readonly="readonly" name="systemId" id="::dom::Entity::systemId">
        <webidl>    readonly attribute DOMString?      systemId;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute readonly="readonly" name="notationName" id="::dom::Entity::notationName">
        <webidl>    readonly attribute DOMString?      notationName;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute readonly="readonly" name="inputEncoding" id="::dom::Entity::inputEncoding">
        <webidl>    readonly attribute DOMString?      inputEncoding;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute readonly="readonly" name="xmlEncoding" id="::dom::Entity::xmlEncoding">
        <webidl>    readonly attribute DOMString?      xmlEncoding;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute readonly="readonly" name="xmlVersion" id="::dom::Entity::xmlVersion">
        <webidl>    readonly attribute DOMString?      xmlVersion;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
    </Interface>
    <Interface name="EntityReference" id="::dom::EntityReference">
      <webidl>  interface EntityReference : <ref>Node</ref> {
  };</webidl>
      <InterfaceInheritance>
        <Name name="Node"/>
      </InterfaceInheritance>
    </Interface>
    <Interface name="ProcessingInstruction" id="::dom::ProcessingInstruction">
      <webidl>  interface ProcessingInstruction : <ref>Node</ref> {
    readonly attribute DOMString       target;
             attribute DOMString       data setraises(<ref>DOMException</ref>);

  };</webidl>
      <InterfaceInheritance>
        <Name name="Node"/>
      </InterfaceInheritance>
      <Attribute readonly="readonly" name="target" id="::dom::ProcessingInstruction::target">
        <webidl>    readonly attribute DOMString       target;</webidl>
        <Type type="DOMString"/>
      </Attribute>
      <Attribute name="data" id="::dom::ProcessingInstruction::data">
        <webidl>             attribute DOMString       data setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
    </Interface>
    <Interface name="DocumentFragment" id="::dom::DocumentFragment">
      <webidl>  interface DocumentFragment : <ref>Node</ref> {
  };</webidl>
      <InterfaceInheritance>
        <Name name="Node"/>
      </InterfaceInheritance>
    </Interface>
    <Interface name="Document" id="::dom::Document">
      <webidl>  interface Document : <ref>Node</ref> {
    readonly attribute <ref>DocumentType</ref>    doctype;
    readonly attribute <ref>DOMImplementation</ref> implementation;
    readonly attribute <ref>Element</ref>         documentElement;
    <ref>Element</ref>            createElement(in DOMString tagName)
                                        raises(<ref>DOMException</ref>);
    <ref>DocumentFragment</ref>   createDocumentFragment();
    <ref>Text</ref>               createTextNode(in DOMString data);
    <ref>Comment</ref>            createComment(in DOMString data);
    <ref>CDATASection</ref>       createCDATASection(in DOMString data)
                                        raises(<ref>DOMException</ref>);
    <ref>ProcessingInstruction</ref> createProcessingInstruction(in DOMString target, 
                                                      in DOMString data)
                                        raises(<ref>DOMException</ref>);
    <ref>Attr</ref>               createAttribute(in DOMString name)
                                        raises(<ref>DOMException</ref>);
    <ref>EntityReference</ref>    createEntityReference(in DOMString name)
                                        raises(<ref>DOMException</ref>);
    <ref>NodeList</ref>           getElementsByTagName(in DOMString tagname);
    <ref>Node</ref>               importNode(in <ref>Node</ref> importedNode, 
                                  in boolean deep)
                                        raises(<ref>DOMException</ref>);
    <ref>Element</ref>            createElementNS(in DOMString? namespaceURI, 
                                       in DOMString qualifiedName)
                                        raises(<ref>DOMException</ref>);
    <ref>Attr</ref>               createAttributeNS(in DOMString? namespaceURI, 
                                         in DOMString qualifiedName)
                                        raises(<ref>DOMException</ref>);
    <ref>NodeList</ref>           getElementsByTagNameNS(in DOMString? namespaceURI, 
                                              in DOMString localName);
    <ref>Element</ref>            getElementById(in DOMString elementId);
    readonly attribute DOMString?      inputEncoding;
    readonly attribute DOMString?      xmlEncoding;
             attribute boolean         xmlStandalone setraises(<ref>DOMException</ref>);

             attribute DOMString?      xmlVersion setraises(<ref>DOMException</ref>);

             attribute boolean         strictErrorChecking;
             attribute DOMString?      documentURI;
    <ref>Node</ref>               adoptNode(in <ref>Node</ref> source)
                                        raises(<ref>DOMException</ref>);
    readonly attribute <ref>DOMConfiguration</ref> domConfig;
    void               normalizeDocument();
    <ref>Node</ref>               renameNode(in <ref>Node</ref> n, 
                                  in DOMString? namespaceURI, 
                                  in DOMString qualifiedName)
                                        raises(<ref>DOMException</ref>);
  };</webidl>
      <InterfaceInheritance>
        <Name name="Node"/>
      </InterfaceInheritance>
      <Attribute readonly="readonly" name="doctype" id="::dom::Document::doctype">
        <webidl>    readonly attribute <ref>DocumentType</ref>    doctype;</webidl>
        <Type name="DocumentType"/>
      </Attribute>
      <Attribute readonly="readonly" name="implementation" id="::dom::Document::implementation">
        <webidl>    readonly attribute <ref>DOMImplementation</ref> implementation;</webidl>
        <Type name="DOMImplementation"/>
      </Attribute>
      <Attribute readonly="readonly" name="documentElement" id="::dom::Document::documentElement">
        <webidl>    readonly attribute <ref>Element</ref>         documentElement;</webidl>
        <Type name="Element"/>
      </Attribute>
      <Operation name="createElement" id="::dom::Document::createElement">
        <webidl>    <ref>Element</ref>            createElement(in DOMString tagName)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Element"/>
        <ArgumentList>
          <Argument in="in" name="tagName">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="createDocumentFragment" id="::dom::Document::createDocumentFragment">
        <webidl>    <ref>DocumentFragment</ref>   createDocumentFragment();</webidl>
        <Type name="DocumentFragment"/>
        <ArgumentList/>
      </Operation>
      <Operation name="createTextNode" id="::dom::Document::createTextNode">
        <webidl>    <ref>Text</ref>               createTextNode(in DOMString data);</webidl>
        <Type name="Text"/>
        <ArgumentList>
          <Argument in="in" name="data">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="createComment" id="::dom::Document::createComment">
        <webidl>    <ref>Comment</ref>            createComment(in DOMString data);</webidl>
        <Type name="Comment"/>
        <ArgumentList>
          <Argument in="in" name="data">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="createCDATASection" id="::dom::Document::createCDATASection">
        <webidl>    <ref>CDATASection</ref>       createCDATASection(in DOMString data)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="CDATASection"/>
        <ArgumentList>
          <Argument in="in" name="data">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="createProcessingInstruction" id="::dom::Document::createProcessingInstruction">
        <webidl>    <ref>ProcessingInstruction</ref> createProcessingInstruction(in DOMString target, 
                                                      in DOMString data)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="ProcessingInstruction"/>
        <ArgumentList>
          <Argument in="in" name="target">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="data">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="createAttribute" id="::dom::Document::createAttribute">
        <webidl>    <ref>Attr</ref>               createAttribute(in DOMString name)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Attr"/>
        <ArgumentList>
          <Argument in="in" name="name">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="createEntityReference" id="::dom::Document::createEntityReference">
        <webidl>    <ref>EntityReference</ref>    createEntityReference(in DOMString name)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="EntityReference"/>
        <ArgumentList>
          <Argument in="in" name="name">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="getElementsByTagName" id="::dom::Document::getElementsByTagName">
        <webidl>    <ref>NodeList</ref>           getElementsByTagName(in DOMString tagname);</webidl>
        <Type name="NodeList"/>
        <ArgumentList>
          <Argument in="in" name="tagname">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="importNode" id="::dom::Document::importNode">
        <webidl>    <ref>Node</ref>               importNode(in <ref>Node</ref> importedNode, 
                                  in boolean deep)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Node"/>
        <ArgumentList>
          <Argument in="in" name="importedNode">
            <Type name="Node"/>
          </Argument>
          <Argument in="in" name="deep">
            <Type type="boolean"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="createElementNS" id="::dom::Document::createElementNS">
        <webidl>    <ref>Element</ref>            createElementNS(in DOMString? namespaceURI, 
                                       in DOMString qualifiedName)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Element"/>
        <ArgumentList>
          <Argument in="in" name="namespaceURI">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="qualifiedName">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="createAttributeNS" id="::dom::Document::createAttributeNS">
        <webidl>    <ref>Attr</ref>               createAttributeNS(in DOMString? namespaceURI, 
                                         in DOMString qualifiedName)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Attr"/>
        <ArgumentList>
          <Argument in="in" name="namespaceURI">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="qualifiedName">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="getElementsByTagNameNS" id="::dom::Document::getElementsByTagNameNS">
        <webidl>    <ref>NodeList</ref>           getElementsByTagNameNS(in DOMString? namespaceURI, 
                                              in DOMString localName);</webidl>
        <Type name="NodeList"/>
        <ArgumentList>
          <Argument in="in" name="namespaceURI">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="localName">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="getElementById" id="::dom::Document::getElementById">
        <webidl>    <ref>Element</ref>            getElementById(in DOMString elementId);</webidl>
        <Type name="Element"/>
        <ArgumentList>
          <Argument in="in" name="elementId">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Attribute readonly="readonly" name="inputEncoding" id="::dom::Document::inputEncoding">
        <webidl>    readonly attribute DOMString?      inputEncoding;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute readonly="readonly" name="xmlEncoding" id="::dom::Document::xmlEncoding">
        <webidl>    readonly attribute DOMString?      xmlEncoding;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute name="xmlStandalone" id="::dom::Document::xmlStandalone">
        <webidl>             attribute boolean         xmlStandalone setraises(<ref>DOMException</ref>);</webidl>
        <Type type="boolean"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="xmlVersion" id="::dom::Document::xmlVersion">
        <webidl>             attribute DOMString?      xmlVersion setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString" nullable="nullable"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="strictErrorChecking" id="::dom::Document::strictErrorChecking">
        <webidl>             attribute boolean         strictErrorChecking;</webidl>
        <Type type="boolean"/>
      </Attribute>
      <Attribute name="documentURI" id="::dom::Document::documentURI">
        <webidl>             attribute DOMString?      documentURI;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Operation name="adoptNode" id="::dom::Document::adoptNode">
        <webidl>    <ref>Node</ref>               adoptNode(in <ref>Node</ref> source)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Node"/>
        <ArgumentList>
          <Argument in="in" name="source">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Attribute readonly="readonly" name="domConfig" id="::dom::Document::domConfig">
        <webidl>    readonly attribute <ref>DOMConfiguration</ref> domConfig;</webidl>
        <Type name="DOMConfiguration"/>
      </Attribute>
      <Operation name="normalizeDocument" id="::dom::Document::normalizeDocument">
        <webidl>    void               normalizeDocument();</webidl>
        <Type type="void"/>
        <ArgumentList/>
      </Operation>
      <Operation name="renameNode" id="::dom::Document::renameNode">
        <webidl>    <ref>Node</ref>               renameNode(in <ref>Node</ref> n, 
                                  in DOMString? namespaceURI, 
                                  in DOMString qualifiedName)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Node"/>
        <ArgumentList>
          <Argument in="in" name="n">
            <Type name="Node"/>
          </Argument>
          <Argument in="in" name="namespaceURI">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="qualifiedName">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
    </Interface>
  </Module>
</Definitions>
<Definitions>
  <Module name="ls" id="::ls">
    <webidl>module ls {

  typedef   <ref>Object</ref> LSInputStream;

  typedef   <ref>Object</ref> LSOutputStream;

  typedef   <ref>Object</ref> LSReader;

  typedef   <ref>Object</ref> LSWriter;

  typedef <ref>dom::DOMConfiguration</ref> DOMConfiguration;
  typedef <ref>dom::DOMException</ref> DOMException;
  typedef <ref>dom::Node</ref> Node;
  typedef <ref>dom::Document</ref> Document;
  typedef <ref>dom::Element</ref> Element;

  exception LSException {
    const unsigned short      PARSE_ERR                      = 81;
    const unsigned short      SERIALIZE_ERR                  = 82;

    unsigned short   code;
  };

  interface DOMImplementationLS {

    const unsigned short      MODE_SYNCHRONOUS               = 1;
    const unsigned short      MODE_ASYNCHRONOUS              = 2;

    <ref>LSParser</ref>           createLSParser(in unsigned short mode, 
                                      in DOMString? schemaType)
                                        raises(<ref>DOMException</ref>);
    <ref>LSSerializer</ref>       createLSSerializer();
    <ref>LSInput</ref>            createLSInput();
    <ref>LSOutput</ref>           createLSOutput();
  };

  <ref>DOMImplementation</ref> implements <ref>DOMImplementationLS</ref>;

  interface LSParser {
    readonly attribute <ref>DOMConfiguration</ref> domConfig;
             attribute <ref>LSParserFilter</ref>  filter;
    readonly attribute boolean         async;
    readonly attribute boolean         busy;
    <ref>Document</ref>           parse(in <ref>LSInput</ref> input)
                                        raises(<ref>DOMException</ref>, 
                                               <ref>LSException</ref>);
    <ref>Document</ref>           parseURI(in DOMString uri)
                                        raises(<ref>DOMException</ref>, 
                                               <ref>LSException</ref>);

    const unsigned short      ACTION_APPEND_AS_CHILDREN      = 1;
    const unsigned short      ACTION_REPLACE_CHILDREN        = 2;
    const unsigned short      ACTION_INSERT_BEFORE           = 3;
    const unsigned short      ACTION_INSERT_AFTER            = 4;
    const unsigned short      ACTION_REPLACE                 = 5;

    <ref>Node</ref>               parseWithContext(in <ref>LSInput</ref> input, 
                                        in <ref>Node</ref> contextArg, 
                                        in unsigned short action)
                                        raises(<ref>DOMException</ref>, 
                                               <ref>LSException</ref>);
    void               abort();
  };

  [Callback]
  interface LSInput {
             attribute <ref>LSReader</ref>        characterStream;
             attribute <ref>LSInputStream</ref>   byteStream;
             attribute DOMString?      stringData;
             attribute DOMString?      systemId;
             attribute DOMString?      publicId;
             attribute DOMString?      baseURI;
             attribute DOMString?      encoding;
             attribute boolean         certifiedText;
  };

  [Callback]
  interface LSResourceResolver {
    <ref>LSInput</ref>            resolveResource(in DOMString type, 
                                       in DOMString? namespaceURI, 
                                       in DOMString? publicId, 
                                       in DOMString? systemId, 
                                       in DOMString? baseURI);
  };

  [Callback]
  interface LSParserFilter {

    const short               FILTER_ACCEPT                  = 1;
    const short               FILTER_REJECT                  = 2;
    const short               FILTER_SKIP                    = 3;
    const short               FILTER_INTERRUPT               = 4;

    unsigned short     startElement(in <ref>Element</ref> elementArg);
    unsigned short     acceptNode(in <ref>Node</ref> nodeArg);
    readonly attribute unsigned long   whatToShow;
  };

  interface LSSerializer {
    readonly attribute <ref>DOMConfiguration</ref> domConfig;
             attribute DOMString?      newLine;
             attribute <ref>LSSerializerFilter</ref> filter;
    boolean            write(in <ref>Node</ref> nodeArg, 
                             in <ref>LSOutput</ref> destination)
                                        raises(<ref>LSException</ref>);
    boolean            writeToURI(in <ref>Node</ref> nodeArg, 
                                  in DOMString uri)
                                        raises(<ref>LSException</ref>);
    DOMString          writeToString(in <ref>Node</ref> nodeArg)
                                        raises(<ref>DOMException</ref>, 
                                               <ref>LSException</ref>);
  };

  [Callback]
  interface LSOutput {
             attribute <ref>LSWriter</ref>        characterStream;
             attribute <ref>LSOutputStream</ref>  byteStream;
             attribute DOMString?      systemId;
             attribute DOMString?      encoding;
  };

  interface LSProgressEvent : <ref>events::Event</ref> {
    readonly attribute <ref>LSInput</ref>         input;
    readonly attribute unsigned long   position;
    readonly attribute unsigned long   totalSize;
  };

  interface LSLoadEvent : <ref>events::Event</ref> {
    readonly attribute <ref>Document</ref>        newDocument;
    readonly attribute <ref>LSInput</ref>         input;
  };

  [Callback]
  interface LSSerializerFilter : <ref>traversal::NodeFilter</ref> {
    readonly attribute unsigned long   whatToShow;
  };
};</webidl>
    <Typedef name="LSInputStream" id="::ls::LSInputStream">
      <webidl>  typedef   <ref>Object</ref> LSInputStream;</webidl>
      <Type name="Object"/>
    </Typedef>
    <Typedef name="LSOutputStream" id="::ls::LSOutputStream">
      <webidl>  typedef   <ref>Object</ref> LSOutputStream;</webidl>
      <Type name="Object"/>
    </Typedef>
    <Typedef name="LSReader" id="::ls::LSReader">
      <webidl>  typedef   <ref>Object</ref> LSReader;</webidl>
      <Type name="Object"/>
    </Typedef>
    <Typedef name="LSWriter" id="::ls::LSWriter">
      <webidl>  typedef   <ref>Object</ref> LSWriter;</webidl>
      <Type name="Object"/>
    </Typedef>
    <Typedef name="DOMConfiguration" id="::ls::DOMConfiguration">
      <webidl>  typedef <ref>dom::DOMConfiguration</ref> DOMConfiguration;</webidl>
      <Type name="domDOMConfiguration"/>
    </Typedef>
    <Typedef name="DOMException" id="::ls::DOMException">
      <webidl>  typedef <ref>dom::DOMException</ref> DOMException;</webidl>
      <Type name="domDOMException"/>
    </Typedef>
    <Typedef name="Node" id="::ls::Node">
      <webidl>  typedef <ref>dom::Node</ref> Node;</webidl>
      <Type name="domNode"/>
    </Typedef>
    <Typedef name="Document" id="::ls::Document">
      <webidl>  typedef <ref>dom::Document</ref> Document;</webidl>
      <Type name="domDocument"/>
    </Typedef>
    <Typedef name="Element" id="::ls::Element">
      <webidl>  typedef <ref>dom::Element</ref> Element;</webidl>
      <Type name="domElement"/>
    </Typedef>
    <Exception name="LSException" id="::ls::LSException">
      <webidl>  exception LSException {
    const unsigned short      PARSE_ERR                      = 81;
    const unsigned short      SERIALIZE_ERR                  = 82;

    unsigned short   code;
  };</webidl>
      <Const name="PARSE_ERR" value="81" id="::ls::LSException::PARSE_ERR">
        <Type type="unsigned short"/>
      </Const>
      <Const name="SERIALIZE_ERR" value="82" id="::ls::LSException::SERIALIZE_ERR">
        <Type type="unsigned short"/>
      </Const>
      <ExceptionField name="code" id="::ls::LSException::code">
        <Type type="unsigned short"/>
      </ExceptionField>
    </Exception>
    <Interface name="DOMImplementationLS" id="::ls::DOMImplementationLS">
      <webidl>  interface DOMImplementationLS {

    const unsigned short      MODE_SYNCHRONOUS               = 1;
    const unsigned short      MODE_ASYNCHRONOUS              = 2;

    <ref>LSParser</ref>           createLSParser(in unsigned short mode, 
                                      in DOMString? schemaType)
                                        raises(<ref>DOMException</ref>);
    <ref>LSSerializer</ref>       createLSSerializer();
    <ref>LSInput</ref>            createLSInput();
    <ref>LSOutput</ref>           createLSOutput();
  };</webidl>
      <Const name="MODE_SYNCHRONOUS" value="1" id="::ls::DOMImplementationLS::MODE_SYNCHRONOUS">
        <webidl>    const unsigned short      MODE_SYNCHRONOUS               = 1;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="MODE_ASYNCHRONOUS" value="2" id="::ls::DOMImplementationLS::MODE_ASYNCHRONOUS">
        <webidl>    const unsigned short      MODE_ASYNCHRONOUS              = 2;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Operation name="createLSParser" id="::ls::DOMImplementationLS::createLSParser">
        <webidl>    <ref>LSParser</ref>           createLSParser(in unsigned short mode, 
                                      in DOMString? schemaType)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="LSParser"/>
        <ArgumentList>
          <Argument in="in" name="mode">
            <Type type="unsigned short"/>
          </Argument>
          <Argument in="in" name="schemaType">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="createLSSerializer" id="::ls::DOMImplementationLS::createLSSerializer">
        <webidl>    <ref>LSSerializer</ref>       createLSSerializer();</webidl>
        <Type name="LSSerializer"/>
        <ArgumentList/>
      </Operation>
      <Operation name="createLSInput" id="::ls::DOMImplementationLS::createLSInput">
        <webidl>    <ref>LSInput</ref>            createLSInput();</webidl>
        <Type name="LSInput"/>
        <ArgumentList/>
      </Operation>
      <Operation name="createLSOutput" id="::ls::DOMImplementationLS::createLSOutput">
        <webidl>    <ref>LSOutput</ref>           createLSOutput();</webidl>
        <Type name="LSOutput"/>
        <ArgumentList/>
      </Operation>
    </Interface>
    <Implements name1="DOMImplementation" name2="DOMImplementationLS">
      <webidl>  <ref>DOMImplementation</ref> implements <ref>DOMImplementationLS</ref>;</webidl>
    </Implements>
    <Interface name="LSParser" id="::ls::LSParser">
      <webidl>  interface LSParser {
    readonly attribute <ref>DOMConfiguration</ref> domConfig;
             attribute <ref>LSParserFilter</ref>  filter;
    readonly attribute boolean         async;
    readonly attribute boolean         busy;
    <ref>Document</ref>           parse(in <ref>LSInput</ref> input)
                                        raises(<ref>DOMException</ref>, 
                                               <ref>LSException</ref>);
    <ref>Document</ref>           parseURI(in DOMString uri)
                                        raises(<ref>DOMException</ref>, 
                                               <ref>LSException</ref>);

    const unsigned short      ACTION_APPEND_AS_CHILDREN      = 1;
    const unsigned short      ACTION_REPLACE_CHILDREN        = 2;
    const unsigned short      ACTION_INSERT_BEFORE           = 3;
    const unsigned short      ACTION_INSERT_AFTER            = 4;
    const unsigned short      ACTION_REPLACE                 = 5;

    <ref>Node</ref>               parseWithContext(in <ref>LSInput</ref> input, 
                                        in <ref>Node</ref> contextArg, 
                                        in unsigned short action)
                                        raises(<ref>DOMException</ref>, 
                                               <ref>LSException</ref>);
    void               abort();
  };</webidl>
      <Attribute readonly="readonly" name="domConfig" id="::ls::LSParser::domConfig">
        <webidl>    readonly attribute <ref>DOMConfiguration</ref> domConfig;</webidl>
        <Type name="DOMConfiguration"/>
      </Attribute>
      <Attribute name="filter" id="::ls::LSParser::filter">
        <webidl>             attribute <ref>LSParserFilter</ref>  filter;</webidl>
        <Type name="LSParserFilter"/>
      </Attribute>
      <Attribute readonly="readonly" name="async" id="::ls::LSParser::async">
        <webidl>    readonly attribute boolean         async;</webidl>
        <Type type="boolean"/>
      </Attribute>
      <Attribute readonly="readonly" name="busy" id="::ls::LSParser::busy">
        <webidl>    readonly attribute boolean         busy;</webidl>
        <Type type="boolean"/>
      </Attribute>
      <Operation name="parse" id="::ls::LSParser::parse">
        <webidl>    <ref>Document</ref>           parse(in <ref>LSInput</ref> input)
                                        raises(<ref>DOMException</ref>, 
                                               <ref>LSException</ref>);</webidl>
        <Type name="Document"/>
        <ArgumentList>
          <Argument in="in" name="input">
            <Type name="LSInput"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
          <RaiseException name="LSException"/>
        </Raises>
      </Operation>
      <Operation name="parseURI" id="::ls::LSParser::parseURI">
        <webidl>    <ref>Document</ref>           parseURI(in DOMString uri)
                                        raises(<ref>DOMException</ref>, 
                                               <ref>LSException</ref>);</webidl>
        <Type name="Document"/>
        <ArgumentList>
          <Argument in="in" name="uri">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
          <RaiseException name="LSException"/>
        </Raises>
      </Operation>
      <Const name="ACTION_APPEND_AS_CHILDREN" value="1" id="::ls::LSParser::ACTION_APPEND_AS_CHILDREN">
        <webidl>    const unsigned short      ACTION_APPEND_AS_CHILDREN      = 1;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="ACTION_REPLACE_CHILDREN" value="2" id="::ls::LSParser::ACTION_REPLACE_CHILDREN">
        <webidl>    const unsigned short      ACTION_REPLACE_CHILDREN        = 2;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="ACTION_INSERT_BEFORE" value="3" id="::ls::LSParser::ACTION_INSERT_BEFORE">
        <webidl>    const unsigned short      ACTION_INSERT_BEFORE           = 3;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="ACTION_INSERT_AFTER" value="4" id="::ls::LSParser::ACTION_INSERT_AFTER">
        <webidl>    const unsigned short      ACTION_INSERT_AFTER            = 4;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="ACTION_REPLACE" value="5" id="::ls::LSParser::ACTION_REPLACE">
        <webidl>    const unsigned short      ACTION_REPLACE                 = 5;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Operation name="parseWithContext" id="::ls::LSParser::parseWithContext">
        <webidl>    <ref>Node</ref>               parseWithContext(in <ref>LSInput</ref> input, 
                                        in <ref>Node</ref> contextArg, 
                                        in unsigned short action)
                                        raises(<ref>DOMException</ref>, 
                                               <ref>LSException</ref>);</webidl>
        <Type name="Node"/>
        <ArgumentList>
          <Argument in="in" name="input">
            <Type name="LSInput"/>
          </Argument>
          <Argument in="in" name="contextArg">
            <Type name="Node"/>
          </Argument>
          <Argument in="in" name="action">
            <Type type="unsigned short"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
          <RaiseException name="LSException"/>
        </Raises>
      </Operation>
      <Operation name="abort" id="::ls::LSParser::abort">
        <webidl>    void               abort();</webidl>
        <Type type="void"/>
        <ArgumentList/>
      </Operation>
    </Interface>
    <Interface name="LSInput" id="::ls::LSInput">
      <webidl>  [Callback]
  interface LSInput {
             attribute <ref>LSReader</ref>        characterStream;
             attribute <ref>LSInputStream</ref>   byteStream;
             attribute DOMString?      stringData;
             attribute DOMString?      systemId;
             attribute DOMString?      publicId;
             attribute DOMString?      baseURI;
             attribute DOMString?      encoding;
             attribute boolean         certifiedText;
  };</webidl>
      <ExtendedAttributeList>
        <ExtendedAttribute name="Callback"/>
      </ExtendedAttributeList>
      <Attribute name="characterStream" id="::ls::LSInput::characterStream">
        <webidl>             attribute <ref>LSReader</ref>        characterStream;</webidl>
        <Type name="LSReader"/>
      </Attribute>
      <Attribute name="byteStream" id="::ls::LSInput::byteStream">
        <webidl>             attribute <ref>LSInputStream</ref>   byteStream;</webidl>
        <Type name="LSInputStream"/>
      </Attribute>
      <Attribute name="stringData" id="::ls::LSInput::stringData">
        <webidl>             attribute DOMString?      stringData;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute name="systemId" id="::ls::LSInput::systemId">
        <webidl>             attribute DOMString?      systemId;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute name="publicId" id="::ls::LSInput::publicId">
        <webidl>             attribute DOMString?      publicId;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute name="baseURI" id="::ls::LSInput::baseURI">
        <webidl>             attribute DOMString?      baseURI;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute name="encoding" id="::ls::LSInput::encoding">
        <webidl>             attribute DOMString?      encoding;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute name="certifiedText" id="::ls::LSInput::certifiedText">
        <webidl>             attribute boolean         certifiedText;</webidl>
        <Type type="boolean"/>
      </Attribute>
    </Interface>
    <Interface name="LSResourceResolver" id="::ls::LSResourceResolver">
      <webidl>  [Callback]
  interface LSResourceResolver {
    <ref>LSInput</ref>            resolveResource(in DOMString type, 
                                       in DOMString? namespaceURI, 
                                       in DOMString? publicId, 
                                       in DOMString? systemId, 
                                       in DOMString? baseURI);
  };</webidl>
      <ExtendedAttributeList>
        <ExtendedAttribute name="Callback"/>
      </ExtendedAttributeList>
      <Operation name="resolveResource" id="::ls::LSResourceResolver::resolveResource">
        <webidl>    <ref>LSInput</ref>            resolveResource(in DOMString type, 
                                       in DOMString? namespaceURI, 
                                       in DOMString? publicId, 
                                       in DOMString? systemId, 
                                       in DOMString? baseURI);</webidl>
        <Type name="LSInput"/>
        <ArgumentList>
          <Argument in="in" name="type">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="namespaceURI">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="publicId">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="systemId">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="baseURI">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
        </ArgumentList>
      </Operation>
    </Interface>
    <Interface name="LSParserFilter" id="::ls::LSParserFilter">
      <webidl>  [Callback]
  interface LSParserFilter {

    const short               FILTER_ACCEPT                  = 1;
    const short               FILTER_REJECT                  = 2;
    const short               FILTER_SKIP                    = 3;
    const short               FILTER_INTERRUPT               = 4;

    unsigned short     startElement(in <ref>Element</ref> elementArg);
    unsigned short     acceptNode(in <ref>Node</ref> nodeArg);
    readonly attribute unsigned long   whatToShow;
  };</webidl>
      <ExtendedAttributeList>
        <ExtendedAttribute name="Callback"/>
      </ExtendedAttributeList>
      <Const name="FILTER_ACCEPT" value="1" id="::ls::LSParserFilter::FILTER_ACCEPT">
        <webidl>    const short               FILTER_ACCEPT                  = 1;</webidl>
        <Type type="short"/>
      </Const>
      <Const name="FILTER_REJECT" value="2" id="::ls::LSParserFilter::FILTER_REJECT">
        <webidl>    const short               FILTER_REJECT                  = 2;</webidl>
        <Type type="short"/>
      </Const>
      <Const name="FILTER_SKIP" value="3" id="::ls::LSParserFilter::FILTER_SKIP">
        <webidl>    const short               FILTER_SKIP                    = 3;</webidl>
        <Type type="short"/>
      </Const>
      <Const name="FILTER_INTERRUPT" value="4" id="::ls::LSParserFilter::FILTER_INTERRUPT">
        <webidl>    const short               FILTER_INTERRUPT               = 4;</webidl>
        <Type type="short"/>
      </Const>
      <Operation name="startElement" id="::ls::LSParserFilter::startElement">
        <webidl>    unsigned short     startElement(in <ref>Element</ref> elementArg);</webidl>
        <Type type="unsigned short"/>
        <ArgumentList>
          <Argument in="in" name="elementArg">
            <Type name="Element"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="acceptNode" id="::ls::LSParserFilter::acceptNode">
        <webidl>    unsigned short     acceptNode(in <ref>Node</ref> nodeArg);</webidl>
        <Type type="unsigned short"/>
        <ArgumentList>
          <Argument in="in" name="nodeArg">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Attribute readonly="readonly" name="whatToShow" id="::ls::LSParserFilter::whatToShow">
        <webidl>    readonly attribute unsigned long   whatToShow;</webidl>
        <Type type="unsigned long"/>
      </Attribute>
    </Interface>
    <Interface name="LSSerializer" id="::ls::LSSerializer">
      <webidl>  interface LSSerializer {
    readonly attribute <ref>DOMConfiguration</ref> domConfig;
             attribute DOMString?      newLine;
             attribute <ref>LSSerializerFilter</ref> filter;
    boolean            write(in <ref>Node</ref> nodeArg, 
                             in <ref>LSOutput</ref> destination)
                                        raises(<ref>LSException</ref>);
    boolean            writeToURI(in <ref>Node</ref> nodeArg, 
                                  in DOMString uri)
                                        raises(<ref>LSException</ref>);
    DOMString          writeToString(in <ref>Node</ref> nodeArg)
                                        raises(<ref>DOMException</ref>, 
                                               <ref>LSException</ref>);
  };</webidl>
      <Attribute readonly="readonly" name="domConfig" id="::ls::LSSerializer::domConfig">
        <webidl>    readonly attribute <ref>DOMConfiguration</ref> domConfig;</webidl>
        <Type name="DOMConfiguration"/>
      </Attribute>
      <Attribute name="newLine" id="::ls::LSSerializer::newLine">
        <webidl>             attribute DOMString?      newLine;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute name="filter" id="::ls::LSSerializer::filter">
        <webidl>             attribute <ref>LSSerializerFilter</ref> filter;</webidl>
        <Type name="LSSerializerFilter"/>
      </Attribute>
      <Operation name="write" id="::ls::LSSerializer::write">
        <webidl>    boolean            write(in <ref>Node</ref> nodeArg, 
                             in <ref>LSOutput</ref> destination)
                                        raises(<ref>LSException</ref>);</webidl>
        <Type type="boolean"/>
        <ArgumentList>
          <Argument in="in" name="nodeArg">
            <Type name="Node"/>
          </Argument>
          <Argument in="in" name="destination">
            <Type name="LSOutput"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="LSException"/>
        </Raises>
      </Operation>
      <Operation name="writeToURI" id="::ls::LSSerializer::writeToURI">
        <webidl>    boolean            writeToURI(in <ref>Node</ref> nodeArg, 
                                  in DOMString uri)
                                        raises(<ref>LSException</ref>);</webidl>
        <Type type="boolean"/>
        <ArgumentList>
          <Argument in="in" name="nodeArg">
            <Type name="Node"/>
          </Argument>
          <Argument in="in" name="uri">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="LSException"/>
        </Raises>
      </Operation>
      <Operation name="writeToString" id="::ls::LSSerializer::writeToString">
        <webidl>    DOMString          writeToString(in <ref>Node</ref> nodeArg)
                                        raises(<ref>DOMException</ref>, 
                                               <ref>LSException</ref>);</webidl>
        <Type type="DOMString"/>
        <ArgumentList>
          <Argument in="in" name="nodeArg">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
          <RaiseException name="LSException"/>
        </Raises>
      </Operation>
    </Interface>
    <Interface name="LSOutput" id="::ls::LSOutput">
      <webidl>  [Callback]
  interface LSOutput {
             attribute <ref>LSWriter</ref>        characterStream;
             attribute <ref>LSOutputStream</ref>  byteStream;
             attribute DOMString?      systemId;
             attribute DOMString?      encoding;
  };</webidl>
      <ExtendedAttributeList>
        <ExtendedAttribute name="Callback"/>
      </ExtendedAttributeList>
      <Attribute name="characterStream" id="::ls::LSOutput::characterStream">
        <webidl>             attribute <ref>LSWriter</ref>        characterStream;</webidl>
        <Type name="LSWriter"/>
      </Attribute>
      <Attribute name="byteStream" id="::ls::LSOutput::byteStream">
        <webidl>             attribute <ref>LSOutputStream</ref>  byteStream;</webidl>
        <Type name="LSOutputStream"/>
      </Attribute>
      <Attribute name="systemId" id="::ls::LSOutput::systemId">
        <webidl>             attribute DOMString?      systemId;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute name="encoding" id="::ls::LSOutput::encoding">
        <webidl>             attribute DOMString?      encoding;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
    </Interface>
    <Interface name="LSProgressEvent" id="::ls::LSProgressEvent">
      <webidl>  interface LSProgressEvent : <ref>events::Event</ref> {
    readonly attribute <ref>LSInput</ref>         input;
    readonly attribute unsigned long   position;
    readonly attribute unsigned long   totalSize;
  };</webidl>
      <InterfaceInheritance>
        <Name name="eventsEvent"/>
      </InterfaceInheritance>
      <Attribute readonly="readonly" name="input" id="::ls::LSProgressEvent::input">
        <webidl>    readonly attribute <ref>LSInput</ref>         input;</webidl>
        <Type name="LSInput"/>
      </Attribute>
      <Attribute readonly="readonly" name="position" id="::ls::LSProgressEvent::position">
        <webidl>    readonly attribute unsigned long   position;</webidl>
        <Type type="unsigned long"/>
      </Attribute>
      <Attribute readonly="readonly" name="totalSize" id="::ls::LSProgressEvent::totalSize">
        <webidl>    readonly attribute unsigned long   totalSize;</webidl>
        <Type type="unsigned long"/>
      </Attribute>
    </Interface>
    <Interface name="LSLoadEvent" id="::ls::LSLoadEvent">
      <webidl>  interface LSLoadEvent : <ref>events::Event</ref> {
    readonly attribute <ref>Document</ref>        newDocument;
    readonly attribute <ref>LSInput</ref>         input;
  };</webidl>
      <InterfaceInheritance>
        <Name name="eventsEvent"/>
      </InterfaceInheritance>
      <Attribute readonly="readonly" name="newDocument" id="::ls::LSLoadEvent::newDocument">
        <webidl>    readonly attribute <ref>Document</ref>        newDocument;</webidl>
        <Type name="Document"/>
      </Attribute>
      <Attribute readonly="readonly" name="input" id="::ls::LSLoadEvent::input">
        <webidl>    readonly attribute <ref>LSInput</ref>         input;</webidl>
        <Type name="LSInput"/>
      </Attribute>
    </Interface>
    <Interface name="LSSerializerFilter" id="::ls::LSSerializerFilter">
      <webidl>  [Callback]
  interface LSSerializerFilter : <ref>traversal::NodeFilter</ref> {
    readonly attribute unsigned long   whatToShow;
  };</webidl>
      <ExtendedAttributeList>
        <ExtendedAttribute name="Callback"/>
      </ExtendedAttributeList>
      <InterfaceInheritance>
        <Name name="traversalNodeFilter"/>
      </InterfaceInheritance>
      <Attribute readonly="readonly" name="whatToShow" id="::ls::LSSerializerFilter::whatToShow">
        <webidl>    readonly attribute unsigned long   whatToShow;</webidl>
        <Type type="unsigned long"/>
      </Attribute>
    </Interface>
  </Module>
</Definitions>
<Definitions>
  <Module name="validation" id="::validation">
    <webidl>module validation {

  typedef <ref>dom::DOMStringList</ref> DOMStringList;
  typedef <ref>dom::Node</ref> Node;
  typedef <ref>dom::NameList</ref> NameList;
  typedef <ref>dom::Attr</ref> Attr;
  typedef <ref>dom::DOMConfiguration</ref> DOMConfiguration;
  typedef <ref>dom::DOMException</ref> DOMException;

  exception ExceptionVAL {
    const unsigned short      NO_SCHEMA_AVAILABLE_ERR        = 71;

    unsigned short   code;
  };

  [PrototypeRoot]
  interface NodeEditVAL {

    const unsigned short      VAL_WF                         = 1;
    const unsigned short      VAL_NS_WF                      = 2;
    const unsigned short      VAL_INCOMPLETE                 = 3;
    const unsigned short      VAL_SCHEMA                     = 4;


    const unsigned short      VAL_TRUE                       = 5;
    const unsigned short      VAL_FALSE                      = 6;
    const unsigned short      VAL_UNKNOWN                    = 7;

    readonly attribute DOMString?      defaultValue;
    readonly attribute <ref>DOMStringList</ref>   enumeratedValues;
    unsigned short     canInsertBefore(in <ref>Node</ref> newChild, 
                                       in <ref>Node</ref> refChild);
    unsigned short     canRemoveChild(in <ref>Node</ref> oldChild);
    unsigned short     canReplaceChild(in <ref>Node</ref> newChild, 
                                       in <ref>Node</ref> oldChild);
    unsigned short     canAppendChild(in <ref>Node</ref> newChild);
    unsigned short     nodeValidity(in unsigned short valType);
  };

  interface ElementEditVAL : <ref>NodeEditVAL</ref> {

    const unsigned short      VAL_EMPTY_CONTENTTYPE          = 1;
    const unsigned short      VAL_ANY_CONTENTTYPE            = 2;
    const unsigned short      VAL_MIXED_CONTENTTYPE          = 3;
    const unsigned short      VAL_ELEMENTS_CONTENTTYPE       = 4;
    const unsigned short      VAL_SIMPLE_CONTENTTYPE         = 5;

    readonly attribute <ref>NameList</ref>        allowedChildren;
    readonly attribute <ref>NameList</ref>        allowedFirstChildren;
    readonly attribute <ref>NameList</ref>        allowedParents;
    readonly attribute <ref>NameList</ref>        allowedNextSiblings;
    readonly attribute <ref>NameList</ref>        allowedPreviousSiblings;
    readonly attribute <ref>NameList</ref>        allowedAttributes;
    readonly attribute <ref>NameList</ref>        requiredAttributes;
    readonly attribute unsigned short  contentType;
    unsigned short     canSetTextContent(in DOMString? possibleTextContent);
    unsigned short     canSetAttribute(in DOMString attrname, 
                                       in DOMString attrval);
    unsigned short     canSetAttributeNode(in <ref>Attr</ref> attrNode);
    unsigned short     canSetAttributeNS(in DOMString? namespaceURI, 
                                         in DOMString qualifiedName, 
                                         in DOMString value);
    unsigned short     canRemoveAttribute(in DOMString attrname);
    unsigned short     canRemoveAttributeNS(in DOMString? namespaceURI, 
                                            in DOMString localName);
    unsigned short     canRemoveAttributeNode(in <ref>Node</ref> attrNode);
    unsigned short     isElementDefined(in DOMString name);
    unsigned short     isElementDefinedNS(in DOMString? namespaceURI, 
                                          in DOMString name);
  };

  interface CharacterDataEditVAL : <ref>NodeEditVAL</ref> {
    unsigned short     isWhitespaceOnly();
    unsigned short     canSetData(in DOMString arg);
    unsigned short     canAppendData(in DOMString arg);
    unsigned short     canReplaceData(in unsigned long offset, 
                                      in unsigned long count, 
                                      in DOMString arg)
                                        raises(<ref>DOMException</ref>);
    unsigned short     canInsertData(in unsigned long offset, 
                                     in DOMString arg)
                                        raises(<ref>DOMException</ref>);
    unsigned short     canDeleteData(in unsigned long offset, 
                                     in unsigned long count)
                                        raises(<ref>DOMException</ref>);
  };

  interface DocumentEditVAL : <ref>NodeEditVAL</ref> {
             attribute boolean         continuousValidityChecking setraises(<ref>DOMException</ref>, <ref>ExceptionVAL</ref>);

    readonly attribute <ref>DOMConfiguration</ref> domConfig;
    <ref>NameList</ref>           getDefinedElements(in DOMString? namespaceURI);
    unsigned short     validateDocument();
  };
};</webidl>
    <Typedef name="DOMStringList" id="::validation::DOMStringList">
      <webidl>  typedef <ref>dom::DOMStringList</ref> DOMStringList;</webidl>
      <Type name="domDOMStringList"/>
    </Typedef>
    <Typedef name="Node" id="::validation::Node">
      <webidl>  typedef <ref>dom::Node</ref> Node;</webidl>
      <Type name="domNode"/>
    </Typedef>
    <Typedef name="NameList" id="::validation::NameList">
      <webidl>  typedef <ref>dom::NameList</ref> NameList;</webidl>
      <Type name="domNameList"/>
    </Typedef>
    <Typedef name="Attr" id="::validation::Attr">
      <webidl>  typedef <ref>dom::Attr</ref> Attr;</webidl>
      <Type name="domAttr"/>
    </Typedef>
    <Typedef name="DOMConfiguration" id="::validation::DOMConfiguration">
      <webidl>  typedef <ref>dom::DOMConfiguration</ref> DOMConfiguration;</webidl>
      <Type name="domDOMConfiguration"/>
    </Typedef>
    <Typedef name="DOMException" id="::validation::DOMException">
      <webidl>  typedef <ref>dom::DOMException</ref> DOMException;</webidl>
      <Type name="domDOMException"/>
    </Typedef>
    <Exception name="ExceptionVAL" id="::validation::ExceptionVAL">
      <webidl>  exception ExceptionVAL {
    const unsigned short      NO_SCHEMA_AVAILABLE_ERR        = 71;

    unsigned short   code;
  };</webidl>
      <Const name="NO_SCHEMA_AVAILABLE_ERR" value="71" id="::validation::ExceptionVAL::NO_SCHEMA_AVAILABLE_ERR">
        <Type type="unsigned short"/>
      </Const>
      <ExceptionField name="code" id="::validation::ExceptionVAL::code">
        <Type type="unsigned short"/>
      </ExceptionField>
    </Exception>
    <Interface name="NodeEditVAL" id="::validation::NodeEditVAL">
      <webidl>  [PrototypeRoot]
  interface NodeEditVAL {

    const unsigned short      VAL_WF                         = 1;
    const unsigned short      VAL_NS_WF                      = 2;
    const unsigned short      VAL_INCOMPLETE                 = 3;
    const unsigned short      VAL_SCHEMA                     = 4;


    const unsigned short      VAL_TRUE                       = 5;
    const unsigned short      VAL_FALSE                      = 6;
    const unsigned short      VAL_UNKNOWN                    = 7;

    readonly attribute DOMString?      defaultValue;
    readonly attribute <ref>DOMStringList</ref>   enumeratedValues;
    unsigned short     canInsertBefore(in <ref>Node</ref> newChild, 
                                       in <ref>Node</ref> refChild);
    unsigned short     canRemoveChild(in <ref>Node</ref> oldChild);
    unsigned short     canReplaceChild(in <ref>Node</ref> newChild, 
                                       in <ref>Node</ref> oldChild);
    unsigned short     canAppendChild(in <ref>Node</ref> newChild);
    unsigned short     nodeValidity(in unsigned short valType);
  };</webidl>
      <ExtendedAttributeList>
        <ExtendedAttribute name="PrototypeRoot"/>
      </ExtendedAttributeList>
      <Const name="VAL_WF" value="1" id="::validation::NodeEditVAL::VAL_WF">
        <webidl>    const unsigned short      VAL_WF                         = 1;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="VAL_NS_WF" value="2" id="::validation::NodeEditVAL::VAL_NS_WF">
        <webidl>    const unsigned short      VAL_NS_WF                      = 2;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="VAL_INCOMPLETE" value="3" id="::validation::NodeEditVAL::VAL_INCOMPLETE">
        <webidl>    const unsigned short      VAL_INCOMPLETE                 = 3;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="VAL_SCHEMA" value="4" id="::validation::NodeEditVAL::VAL_SCHEMA">
        <webidl>    const unsigned short      VAL_SCHEMA                     = 4;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="VAL_TRUE" value="5" id="::validation::NodeEditVAL::VAL_TRUE">
        <webidl>    const unsigned short      VAL_TRUE                       = 5;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="VAL_FALSE" value="6" id="::validation::NodeEditVAL::VAL_FALSE">
        <webidl>    const unsigned short      VAL_FALSE                      = 6;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="VAL_UNKNOWN" value="7" id="::validation::NodeEditVAL::VAL_UNKNOWN">
        <webidl>    const unsigned short      VAL_UNKNOWN                    = 7;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Attribute readonly="readonly" name="defaultValue" id="::validation::NodeEditVAL::defaultValue">
        <webidl>    readonly attribute DOMString?      defaultValue;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute readonly="readonly" name="enumeratedValues" id="::validation::NodeEditVAL::enumeratedValues">
        <webidl>    readonly attribute <ref>DOMStringList</ref>   enumeratedValues;</webidl>
        <Type name="DOMStringList"/>
      </Attribute>
      <Operation name="canInsertBefore" id="::validation::NodeEditVAL::canInsertBefore">
        <webidl>    unsigned short     canInsertBefore(in <ref>Node</ref> newChild, 
                                       in <ref>Node</ref> refChild);</webidl>
        <Type type="unsigned short"/>
        <ArgumentList>
          <Argument in="in" name="newChild">
            <Type name="Node"/>
          </Argument>
          <Argument in="in" name="refChild">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="canRemoveChild" id="::validation::NodeEditVAL::canRemoveChild">
        <webidl>    unsigned short     canRemoveChild(in <ref>Node</ref> oldChild);</webidl>
        <Type type="unsigned short"/>
        <ArgumentList>
          <Argument in="in" name="oldChild">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="canReplaceChild" id="::validation::NodeEditVAL::canReplaceChild">
        <webidl>    unsigned short     canReplaceChild(in <ref>Node</ref> newChild, 
                                       in <ref>Node</ref> oldChild);</webidl>
        <Type type="unsigned short"/>
        <ArgumentList>
          <Argument in="in" name="newChild">
            <Type name="Node"/>
          </Argument>
          <Argument in="in" name="oldChild">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="canAppendChild" id="::validation::NodeEditVAL::canAppendChild">
        <webidl>    unsigned short     canAppendChild(in <ref>Node</ref> newChild);</webidl>
        <Type type="unsigned short"/>
        <ArgumentList>
          <Argument in="in" name="newChild">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="nodeValidity" id="::validation::NodeEditVAL::nodeValidity">
        <webidl>    unsigned short     nodeValidity(in unsigned short valType);</webidl>
        <Type type="unsigned short"/>
        <ArgumentList>
          <Argument in="in" name="valType">
            <Type type="unsigned short"/>
          </Argument>
        </ArgumentList>
      </Operation>
    </Interface>
    <Interface name="ElementEditVAL" id="::validation::ElementEditVAL">
      <webidl>  interface ElementEditVAL : <ref>NodeEditVAL</ref> {

    const unsigned short      VAL_EMPTY_CONTENTTYPE          = 1;
    const unsigned short      VAL_ANY_CONTENTTYPE            = 2;
    const unsigned short      VAL_MIXED_CONTENTTYPE          = 3;
    const unsigned short      VAL_ELEMENTS_CONTENTTYPE       = 4;
    const unsigned short      VAL_SIMPLE_CONTENTTYPE         = 5;

    readonly attribute <ref>NameList</ref>        allowedChildren;
    readonly attribute <ref>NameList</ref>        allowedFirstChildren;
    readonly attribute <ref>NameList</ref>        allowedParents;
    readonly attribute <ref>NameList</ref>        allowedNextSiblings;
    readonly attribute <ref>NameList</ref>        allowedPreviousSiblings;
    readonly attribute <ref>NameList</ref>        allowedAttributes;
    readonly attribute <ref>NameList</ref>        requiredAttributes;
    readonly attribute unsigned short  contentType;
    unsigned short     canSetTextContent(in DOMString? possibleTextContent);
    unsigned short     canSetAttribute(in DOMString attrname, 
                                       in DOMString attrval);
    unsigned short     canSetAttributeNode(in <ref>Attr</ref> attrNode);
    unsigned short     canSetAttributeNS(in DOMString? namespaceURI, 
                                         in DOMString qualifiedName, 
                                         in DOMString value);
    unsigned short     canRemoveAttribute(in DOMString attrname);
    unsigned short     canRemoveAttributeNS(in DOMString? namespaceURI, 
                                            in DOMString localName);
    unsigned short     canRemoveAttributeNode(in <ref>Node</ref> attrNode);
    unsigned short     isElementDefined(in DOMString name);
    unsigned short     isElementDefinedNS(in DOMString? namespaceURI, 
                                          in DOMString name);
  };</webidl>
      <InterfaceInheritance>
        <Name name="NodeEditVAL"/>
      </InterfaceInheritance>
      <Const name="VAL_EMPTY_CONTENTTYPE" value="1" id="::validation::ElementEditVAL::VAL_EMPTY_CONTENTTYPE">
        <webidl>    const unsigned short      VAL_EMPTY_CONTENTTYPE          = 1;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="VAL_ANY_CONTENTTYPE" value="2" id="::validation::ElementEditVAL::VAL_ANY_CONTENTTYPE">
        <webidl>    const unsigned short      VAL_ANY_CONTENTTYPE            = 2;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="VAL_MIXED_CONTENTTYPE" value="3" id="::validation::ElementEditVAL::VAL_MIXED_CONTENTTYPE">
        <webidl>    const unsigned short      VAL_MIXED_CONTENTTYPE          = 3;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="VAL_ELEMENTS_CONTENTTYPE" value="4" id="::validation::ElementEditVAL::VAL_ELEMENTS_CONTENTTYPE">
        <webidl>    const unsigned short      VAL_ELEMENTS_CONTENTTYPE       = 4;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="VAL_SIMPLE_CONTENTTYPE" value="5" id="::validation::ElementEditVAL::VAL_SIMPLE_CONTENTTYPE">
        <webidl>    const unsigned short      VAL_SIMPLE_CONTENTTYPE         = 5;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Attribute readonly="readonly" name="allowedChildren" id="::validation::ElementEditVAL::allowedChildren">
        <webidl>    readonly attribute <ref>NameList</ref>        allowedChildren;</webidl>
        <Type name="NameList"/>
      </Attribute>
      <Attribute readonly="readonly" name="allowedFirstChildren" id="::validation::ElementEditVAL::allowedFirstChildren">
        <webidl>    readonly attribute <ref>NameList</ref>        allowedFirstChildren;</webidl>
        <Type name="NameList"/>
      </Attribute>
      <Attribute readonly="readonly" name="allowedParents" id="::validation::ElementEditVAL::allowedParents">
        <webidl>    readonly attribute <ref>NameList</ref>        allowedParents;</webidl>
        <Type name="NameList"/>
      </Attribute>
      <Attribute readonly="readonly" name="allowedNextSiblings" id="::validation::ElementEditVAL::allowedNextSiblings">
        <webidl>    readonly attribute <ref>NameList</ref>        allowedNextSiblings;</webidl>
        <Type name="NameList"/>
      </Attribute>
      <Attribute readonly="readonly" name="allowedPreviousSiblings" id="::validation::ElementEditVAL::allowedPreviousSiblings">
        <webidl>    readonly attribute <ref>NameList</ref>        allowedPreviousSiblings;</webidl>
        <Type name="NameList"/>
      </Attribute>
      <Attribute readonly="readonly" name="allowedAttributes" id="::validation::ElementEditVAL::allowedAttributes">
        <webidl>    readonly attribute <ref>NameList</ref>        allowedAttributes;</webidl>
        <Type name="NameList"/>
      </Attribute>
      <Attribute readonly="readonly" name="requiredAttributes" id="::validation::ElementEditVAL::requiredAttributes">
        <webidl>    readonly attribute <ref>NameList</ref>        requiredAttributes;</webidl>
        <Type name="NameList"/>
      </Attribute>
      <Attribute readonly="readonly" name="contentType" id="::validation::ElementEditVAL::contentType">
        <webidl>    readonly attribute unsigned short  contentType;</webidl>
        <Type type="unsigned short"/>
      </Attribute>
      <Operation name="canSetTextContent" id="::validation::ElementEditVAL::canSetTextContent">
        <webidl>    unsigned short     canSetTextContent(in DOMString? possibleTextContent);</webidl>
        <Type type="unsigned short"/>
        <ArgumentList>
          <Argument in="in" name="possibleTextContent">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="canSetAttribute" id="::validation::ElementEditVAL::canSetAttribute">
        <webidl>    unsigned short     canSetAttribute(in DOMString attrname, 
                                       in DOMString attrval);</webidl>
        <Type type="unsigned short"/>
        <ArgumentList>
          <Argument in="in" name="attrname">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="attrval">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="canSetAttributeNode" id="::validation::ElementEditVAL::canSetAttributeNode">
        <webidl>    unsigned short     canSetAttributeNode(in <ref>Attr</ref> attrNode);</webidl>
        <Type type="unsigned short"/>
        <ArgumentList>
          <Argument in="in" name="attrNode">
            <Type name="Attr"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="canSetAttributeNS" id="::validation::ElementEditVAL::canSetAttributeNS">
        <webidl>    unsigned short     canSetAttributeNS(in DOMString? namespaceURI, 
                                         in DOMString qualifiedName, 
                                         in DOMString value);</webidl>
        <Type type="unsigned short"/>
        <ArgumentList>
          <Argument in="in" name="namespaceURI">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="qualifiedName">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="value">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="canRemoveAttribute" id="::validation::ElementEditVAL::canRemoveAttribute">
        <webidl>    unsigned short     canRemoveAttribute(in DOMString attrname);</webidl>
        <Type type="unsigned short"/>
        <ArgumentList>
          <Argument in="in" name="attrname">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="canRemoveAttributeNS" id="::validation::ElementEditVAL::canRemoveAttributeNS">
        <webidl>    unsigned short     canRemoveAttributeNS(in DOMString? namespaceURI, 
                                            in DOMString localName);</webidl>
        <Type type="unsigned short"/>
        <ArgumentList>
          <Argument in="in" name="namespaceURI">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="localName">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="canRemoveAttributeNode" id="::validation::ElementEditVAL::canRemoveAttributeNode">
        <webidl>    unsigned short     canRemoveAttributeNode(in <ref>Node</ref> attrNode);</webidl>
        <Type type="unsigned short"/>
        <ArgumentList>
          <Argument in="in" name="attrNode">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="isElementDefined" id="::validation::ElementEditVAL::isElementDefined">
        <webidl>    unsigned short     isElementDefined(in DOMString name);</webidl>
        <Type type="unsigned short"/>
        <ArgumentList>
          <Argument in="in" name="name">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="isElementDefinedNS" id="::validation::ElementEditVAL::isElementDefinedNS">
        <webidl>    unsigned short     isElementDefinedNS(in DOMString? namespaceURI, 
                                          in DOMString name);</webidl>
        <Type type="unsigned short"/>
        <ArgumentList>
          <Argument in="in" name="namespaceURI">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="name">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
    </Interface>
    <Interface name="CharacterDataEditVAL" id="::validation::CharacterDataEditVAL">
      <webidl>  interface CharacterDataEditVAL : <ref>NodeEditVAL</ref> {
    unsigned short     isWhitespaceOnly();
    unsigned short     canSetData(in DOMString arg);
    unsigned short     canAppendData(in DOMString arg);
    unsigned short     canReplaceData(in unsigned long offset, 
                                      in unsigned long count, 
                                      in DOMString arg)
                                        raises(<ref>DOMException</ref>);
    unsigned short     canInsertData(in unsigned long offset, 
                                     in DOMString arg)
                                        raises(<ref>DOMException</ref>);
    unsigned short     canDeleteData(in unsigned long offset, 
                                     in unsigned long count)
                                        raises(<ref>DOMException</ref>);
  };</webidl>
      <InterfaceInheritance>
        <Name name="NodeEditVAL"/>
      </InterfaceInheritance>
      <Operation name="isWhitespaceOnly" id="::validation::CharacterDataEditVAL::isWhitespaceOnly">
        <webidl>    unsigned short     isWhitespaceOnly();</webidl>
        <Type type="unsigned short"/>
        <ArgumentList/>
      </Operation>
      <Operation name="canSetData" id="::validation::CharacterDataEditVAL::canSetData">
        <webidl>    unsigned short     canSetData(in DOMString arg);</webidl>
        <Type type="unsigned short"/>
        <ArgumentList>
          <Argument in="in" name="arg">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="canAppendData" id="::validation::CharacterDataEditVAL::canAppendData">
        <webidl>    unsigned short     canAppendData(in DOMString arg);</webidl>
        <Type type="unsigned short"/>
        <ArgumentList>
          <Argument in="in" name="arg">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="canReplaceData" id="::validation::CharacterDataEditVAL::canReplaceData">
        <webidl>    unsigned short     canReplaceData(in unsigned long offset, 
                                      in unsigned long count, 
                                      in DOMString arg)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="unsigned short"/>
        <ArgumentList>
          <Argument in="in" name="offset">
            <Type type="unsigned long"/>
          </Argument>
          <Argument in="in" name="count">
            <Type type="unsigned long"/>
          </Argument>
          <Argument in="in" name="arg">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="canInsertData" id="::validation::CharacterDataEditVAL::canInsertData">
        <webidl>    unsigned short     canInsertData(in unsigned long offset, 
                                     in DOMString arg)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="unsigned short"/>
        <ArgumentList>
          <Argument in="in" name="offset">
            <Type type="unsigned long"/>
          </Argument>
          <Argument in="in" name="arg">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="canDeleteData" id="::validation::CharacterDataEditVAL::canDeleteData">
        <webidl>    unsigned short     canDeleteData(in unsigned long offset, 
                                     in unsigned long count)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="unsigned short"/>
        <ArgumentList>
          <Argument in="in" name="offset">
            <Type type="unsigned long"/>
          </Argument>
          <Argument in="in" name="count">
            <Type type="unsigned long"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
    </Interface>
    <Interface name="DocumentEditVAL" id="::validation::DocumentEditVAL">
      <webidl>  interface DocumentEditVAL : <ref>NodeEditVAL</ref> {
             attribute boolean         continuousValidityChecking setraises(<ref>DOMException</ref>, <ref>ExceptionVAL</ref>);

    readonly attribute <ref>DOMConfiguration</ref> domConfig;
    <ref>NameList</ref>           getDefinedElements(in DOMString? namespaceURI);
    unsigned short     validateDocument();
  };</webidl>
      <InterfaceInheritance>
        <Name name="NodeEditVAL"/>
      </InterfaceInheritance>
      <Attribute name="continuousValidityChecking" id="::validation::DocumentEditVAL::continuousValidityChecking">
        <webidl>             attribute boolean         continuousValidityChecking setraises(<ref>DOMException</ref>, <ref>ExceptionVAL</ref>);</webidl>
        <Type type="boolean"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
          <RaiseException name="ExceptionVAL"/>
        </SetRaises>
      </Attribute>
      <Attribute readonly="readonly" name="domConfig" id="::validation::DocumentEditVAL::domConfig">
        <webidl>    readonly attribute <ref>DOMConfiguration</ref> domConfig;</webidl>
        <Type name="DOMConfiguration"/>
      </Attribute>
      <Operation name="getDefinedElements" id="::validation::DocumentEditVAL::getDefinedElements">
        <webidl>    <ref>NameList</ref>           getDefinedElements(in DOMString? namespaceURI);</webidl>
        <Type name="NameList"/>
        <ArgumentList>
          <Argument in="in" name="namespaceURI">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="validateDocument" id="::validation::DocumentEditVAL::validateDocument">
        <webidl>    unsigned short     validateDocument();</webidl>
        <Type type="unsigned short"/>
        <ArgumentList/>
      </Operation>
    </Interface>
  </Module>
</Definitions>
<Definitions>
  <Module name="xpath" id="::xpath">
    <webidl>module xpath {

  typedef <ref>dom::Node</ref> Node;
  typedef <ref>dom::DOMObject</ref> DOMObject;
  typedef <ref>dom::Element</ref> Element;
  typedef <ref>dom::Document</ref> Document;
  typedef <ref>dom::DOMException</ref> DOMException;

  exception XPathException {
    const unsigned short      INVALID_EXPRESSION_ERR         = 51;
    const unsigned short      TYPE_ERR                       = 52;

    unsigned short   code;
  };

  interface XPathEvaluator {
    <ref>XPathExpression</ref>    createExpression(in DOMString expression, 
                                        in <ref>XPathNSResolver</ref> resolver)
                                        raises(<ref>XPathException</ref>, 
                                               <ref>DOMException</ref>);
    <ref>XPathNSResolver</ref>    createNSResolver(in <ref>Node</ref> nodeResolver);
    <ref>DOMObject</ref>          evaluate(in DOMString expression, 
                                in <ref>Node</ref> contextNode, 
                                in <ref>XPathNSResolver</ref> resolver, 
                                in unsigned short type, 
                                in <ref>DOMObject</ref> result)
                                        raises(<ref>XPathException</ref>, 
                                               <ref>DOMException</ref>);
  };

  <ref>Document</ref> implements <ref>XPathEvaluator</ref>;

  interface XPathExpression {
    <ref>DOMObject</ref>          evaluate(in <ref>Node</ref> contextNode, 
                                in unsigned short type, 
                                in <ref>DOMObject</ref> result)
                                        raises(<ref>XPathException</ref>, 
                                               <ref>dom::DOMException</ref>);
  };

  [Callback]
  interface XPathNSResolver {
    DOMString?         lookupNamespaceURI(in DOMString prefix);
  };

  interface XPathResult {

    const unsigned short      ANY_TYPE                       = 0;
    const unsigned short      NUMBER_TYPE                    = 1;
    const unsigned short      STRING_TYPE                    = 2;
    const unsigned short      BOOLEAN_TYPE                   = 3;
    const unsigned short      UNORDERED_NODE_ITERATOR_TYPE   = 4;
    const unsigned short      ORDERED_NODE_ITERATOR_TYPE     = 5;
    const unsigned short      UNORDERED_NODE_SNAPSHOT_TYPE   = 6;
    const unsigned short      ORDERED_NODE_SNAPSHOT_TYPE     = 7;
    const unsigned short      ANY_UNORDERED_NODE_TYPE        = 8;
    const unsigned short      FIRST_ORDERED_NODE_TYPE        = 9;

    readonly attribute unsigned short  resultType;
    readonly attribute double          numberValue getraises(<ref>XPathException</ref>);

    readonly attribute DOMString       stringValue getraises(<ref>XPathException</ref>);

    readonly attribute boolean         booleanValue getraises(<ref>XPathException</ref>);

    readonly attribute <ref>Node</ref>            singleNodeValue getraises(<ref>XPathException</ref>);

    readonly attribute boolean         invalidIteratorState;
    readonly attribute unsigned long   snapshotLength getraises(<ref>XPathException</ref>);

    <ref>Node</ref>               iterateNext()
                                        raises(<ref>XPathException</ref>, 
                                               <ref>DOMException</ref>);
    <ref>Node</ref>               snapshotItem(in unsigned long index)
                                        raises(<ref>XPathException</ref>);
  };

  interface XPathNamespace : <ref>Node</ref> {

    const unsigned short      XPATH_NAMESPACE_NODE           = 13;

    readonly attribute <ref>Element</ref>         ownerElement;
  };
};</webidl>
    <Typedef name="Node" id="::xpath::Node">
      <webidl>  typedef <ref>dom::Node</ref> Node;</webidl>
      <Type name="domNode"/>
    </Typedef>
    <Typedef name="DOMObject" id="::xpath::DOMObject">
      <webidl>  typedef <ref>dom::DOMObject</ref> DOMObject;</webidl>
      <Type name="domDOMObject"/>
    </Typedef>
    <Typedef name="Element" id="::xpath::Element">
      <webidl>  typedef <ref>dom::Element</ref> Element;</webidl>
      <Type name="domElement"/>
    </Typedef>
    <Typedef name="Document" id="::xpath::Document">
      <webidl>  typedef <ref>dom::Document</ref> Document;</webidl>
      <Type name="domDocument"/>
    </Typedef>
    <Typedef name="DOMException" id="::xpath::DOMException">
      <webidl>  typedef <ref>dom::DOMException</ref> DOMException;</webidl>
      <Type name="domDOMException"/>
    </Typedef>
    <Exception name="XPathException" id="::xpath::XPathException">
      <webidl>  exception XPathException {
    const unsigned short      INVALID_EXPRESSION_ERR         = 51;
    const unsigned short      TYPE_ERR                       = 52;

    unsigned short   code;
  };</webidl>
      <Const name="INVALID_EXPRESSION_ERR" value="51" id="::xpath::XPathException::INVALID_EXPRESSION_ERR">
        <Type type="unsigned short"/>
      </Const>
      <Const name="TYPE_ERR" value="52" id="::xpath::XPathException::TYPE_ERR">
        <Type type="unsigned short"/>
      </Const>
      <ExceptionField name="code" id="::xpath::XPathException::code">
        <Type type="unsigned short"/>
      </ExceptionField>
    </Exception>
    <Interface name="XPathEvaluator" id="::xpath::XPathEvaluator">
      <webidl>  interface XPathEvaluator {
    <ref>XPathExpression</ref>    createExpression(in DOMString expression, 
                                        in <ref>XPathNSResolver</ref> resolver)
                                        raises(<ref>XPathException</ref>, 
                                               <ref>DOMException</ref>);
    <ref>XPathNSResolver</ref>    createNSResolver(in <ref>Node</ref> nodeResolver);
    <ref>DOMObject</ref>          evaluate(in DOMString expression, 
                                in <ref>Node</ref> contextNode, 
                                in <ref>XPathNSResolver</ref> resolver, 
                                in unsigned short type, 
                                in <ref>DOMObject</ref> result)
                                        raises(<ref>XPathException</ref>, 
                                               <ref>DOMException</ref>);
  };</webidl>
      <Operation name="createExpression" id="::xpath::XPathEvaluator::createExpression">
        <webidl>    <ref>XPathExpression</ref>    createExpression(in DOMString expression, 
                                        in <ref>XPathNSResolver</ref> resolver)
                                        raises(<ref>XPathException</ref>, 
                                               <ref>DOMException</ref>);</webidl>
        <Type name="XPathExpression"/>
        <ArgumentList>
          <Argument in="in" name="expression">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="resolver">
            <Type name="XPathNSResolver"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="XPathException"/>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="createNSResolver" id="::xpath::XPathEvaluator::createNSResolver">
        <webidl>    <ref>XPathNSResolver</ref>    createNSResolver(in <ref>Node</ref> nodeResolver);</webidl>
        <Type name="XPathNSResolver"/>
        <ArgumentList>
          <Argument in="in" name="nodeResolver">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="evaluate" id="::xpath::XPathEvaluator::evaluate">
        <webidl>    <ref>DOMObject</ref>          evaluate(in DOMString expression, 
                                in <ref>Node</ref> contextNode, 
                                in <ref>XPathNSResolver</ref> resolver, 
                                in unsigned short type, 
                                in <ref>DOMObject</ref> result)
                                        raises(<ref>XPathException</ref>, 
                                               <ref>DOMException</ref>);</webidl>
        <Type name="DOMObject"/>
        <ArgumentList>
          <Argument in="in" name="expression">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="contextNode">
            <Type name="Node"/>
          </Argument>
          <Argument in="in" name="resolver">
            <Type name="XPathNSResolver"/>
          </Argument>
          <Argument in="in" name="type">
            <Type type="unsigned short"/>
          </Argument>
          <Argument in="in" name="result">
            <Type name="DOMObject"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="XPathException"/>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
    </Interface>
    <Implements name1="Document" name2="XPathEvaluator">
      <webidl>  <ref>Document</ref> implements <ref>XPathEvaluator</ref>;</webidl>
    </Implements>
    <Interface name="XPathExpression" id="::xpath::XPathExpression">
      <webidl>  interface XPathExpression {
    <ref>DOMObject</ref>          evaluate(in <ref>Node</ref> contextNode, 
                                in unsigned short type, 
                                in <ref>DOMObject</ref> result)
                                        raises(<ref>XPathException</ref>, 
                                               <ref>dom::DOMException</ref>);
  };</webidl>
      <Operation name="evaluate" id="::xpath::XPathExpression::evaluate">
        <webidl>    <ref>DOMObject</ref>          evaluate(in <ref>Node</ref> contextNode, 
                                in unsigned short type, 
                                in <ref>DOMObject</ref> result)
                                        raises(<ref>XPathException</ref>, 
                                               <ref>dom::DOMException</ref>);</webidl>
        <Type name="DOMObject"/>
        <ArgumentList>
          <Argument in="in" name="contextNode">
            <Type name="Node"/>
          </Argument>
          <Argument in="in" name="type">
            <Type type="unsigned short"/>
          </Argument>
          <Argument in="in" name="result">
            <Type name="DOMObject"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="XPathException"/>
          <RaiseException name="domDOMException"/>
        </Raises>
      </Operation>
    </Interface>
    <Interface name="XPathNSResolver" id="::xpath::XPathNSResolver">
      <webidl>  [Callback]
  interface XPathNSResolver {
    DOMString?         lookupNamespaceURI(in DOMString prefix);
  };</webidl>
      <ExtendedAttributeList>
        <ExtendedAttribute name="Callback"/>
      </ExtendedAttributeList>
      <Operation name="lookupNamespaceURI" id="::xpath::XPathNSResolver::lookupNamespaceURI">
        <webidl>    DOMString?         lookupNamespaceURI(in DOMString prefix);</webidl>
        <Type type="DOMString" nullable="nullable"/>
        <ArgumentList>
          <Argument in="in" name="prefix">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
    </Interface>
    <Interface name="XPathResult" id="::xpath::XPathResult">
      <webidl>  interface XPathResult {

    const unsigned short      ANY_TYPE                       = 0;
    const unsigned short      NUMBER_TYPE                    = 1;
    const unsigned short      STRING_TYPE                    = 2;
    const unsigned short      BOOLEAN_TYPE                   = 3;
    const unsigned short      UNORDERED_NODE_ITERATOR_TYPE   = 4;
    const unsigned short      ORDERED_NODE_ITERATOR_TYPE     = 5;
    const unsigned short      UNORDERED_NODE_SNAPSHOT_TYPE   = 6;
    const unsigned short      ORDERED_NODE_SNAPSHOT_TYPE     = 7;
    const unsigned short      ANY_UNORDERED_NODE_TYPE        = 8;
    const unsigned short      FIRST_ORDERED_NODE_TYPE        = 9;

    readonly attribute unsigned short  resultType;
    readonly attribute double          numberValue getraises(<ref>XPathException</ref>);

    readonly attribute DOMString       stringValue getraises(<ref>XPathException</ref>);

    readonly attribute boolean         booleanValue getraises(<ref>XPathException</ref>);

    readonly attribute <ref>Node</ref>            singleNodeValue getraises(<ref>XPathException</ref>);

    readonly attribute boolean         invalidIteratorState;
    readonly attribute unsigned long   snapshotLength getraises(<ref>XPathException</ref>);

    <ref>Node</ref>               iterateNext()
                                        raises(<ref>XPathException</ref>, 
                                               <ref>DOMException</ref>);
    <ref>Node</ref>               snapshotItem(in unsigned long index)
                                        raises(<ref>XPathException</ref>);
  };</webidl>
      <Const name="ANY_TYPE" value="0" id="::xpath::XPathResult::ANY_TYPE">
        <webidl>    const unsigned short      ANY_TYPE                       = 0;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="NUMBER_TYPE" value="1" id="::xpath::XPathResult::NUMBER_TYPE">
        <webidl>    const unsigned short      NUMBER_TYPE                    = 1;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="STRING_TYPE" value="2" id="::xpath::XPathResult::STRING_TYPE">
        <webidl>    const unsigned short      STRING_TYPE                    = 2;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="BOOLEAN_TYPE" value="3" id="::xpath::XPathResult::BOOLEAN_TYPE">
        <webidl>    const unsigned short      BOOLEAN_TYPE                   = 3;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="UNORDERED_NODE_ITERATOR_TYPE" value="4" id="::xpath::XPathResult::UNORDERED_NODE_ITERATOR_TYPE">
        <webidl>    const unsigned short      UNORDERED_NODE_ITERATOR_TYPE   = 4;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="ORDERED_NODE_ITERATOR_TYPE" value="5" id="::xpath::XPathResult::ORDERED_NODE_ITERATOR_TYPE">
        <webidl>    const unsigned short      ORDERED_NODE_ITERATOR_TYPE     = 5;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="UNORDERED_NODE_SNAPSHOT_TYPE" value="6" id="::xpath::XPathResult::UNORDERED_NODE_SNAPSHOT_TYPE">
        <webidl>    const unsigned short      UNORDERED_NODE_SNAPSHOT_TYPE   = 6;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="ORDERED_NODE_SNAPSHOT_TYPE" value="7" id="::xpath::XPathResult::ORDERED_NODE_SNAPSHOT_TYPE">
        <webidl>    const unsigned short      ORDERED_NODE_SNAPSHOT_TYPE     = 7;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="ANY_UNORDERED_NODE_TYPE" value="8" id="::xpath::XPathResult::ANY_UNORDERED_NODE_TYPE">
        <webidl>    const unsigned short      ANY_UNORDERED_NODE_TYPE        = 8;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="FIRST_ORDERED_NODE_TYPE" value="9" id="::xpath::XPathResult::FIRST_ORDERED_NODE_TYPE">
        <webidl>    const unsigned short      FIRST_ORDERED_NODE_TYPE        = 9;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Attribute readonly="readonly" name="resultType" id="::xpath::XPathResult::resultType">
        <webidl>    readonly attribute unsigned short  resultType;</webidl>
        <Type type="unsigned short"/>
      </Attribute>
      <Attribute readonly="readonly" name="numberValue" id="::xpath::XPathResult::numberValue">
        <webidl>    readonly attribute double          numberValue getraises(<ref>XPathException</ref>);</webidl>
        <Type type="double"/>
        <GetRaises>
          <RaiseException name="XPathException"/>
        </GetRaises>
      </Attribute>
      <Attribute readonly="readonly" name="stringValue" id="::xpath::XPathResult::stringValue">
        <webidl>    readonly attribute DOMString       stringValue getraises(<ref>XPathException</ref>);</webidl>
        <Type type="DOMString"/>
        <GetRaises>
          <RaiseException name="XPathException"/>
        </GetRaises>
      </Attribute>
      <Attribute readonly="readonly" name="booleanValue" id="::xpath::XPathResult::booleanValue">
        <webidl>    readonly attribute boolean         booleanValue getraises(<ref>XPathException</ref>);</webidl>
        <Type type="boolean"/>
        <GetRaises>
          <RaiseException name="XPathException"/>
        </GetRaises>
      </Attribute>
      <Attribute readonly="readonly" name="singleNodeValue" id="::xpath::XPathResult::singleNodeValue">
        <webidl>    readonly attribute <ref>Node</ref>            singleNodeValue getraises(<ref>XPathException</ref>);</webidl>
        <Type name="Node"/>
        <GetRaises>
          <RaiseException name="XPathException"/>
        </GetRaises>
      </Attribute>
      <Attribute readonly="readonly" name="invalidIteratorState" id="::xpath::XPathResult::invalidIteratorState">
        <webidl>    readonly attribute boolean         invalidIteratorState;</webidl>
        <Type type="boolean"/>
      </Attribute>
      <Attribute readonly="readonly" name="snapshotLength" id="::xpath::XPathResult::snapshotLength">
        <webidl>    readonly attribute unsigned long   snapshotLength getraises(<ref>XPathException</ref>);</webidl>
        <Type type="unsigned long"/>
        <GetRaises>
          <RaiseException name="XPathException"/>
        </GetRaises>
      </Attribute>
      <Operation name="iterateNext" id="::xpath::XPathResult::iterateNext">
        <webidl>    <ref>Node</ref>               iterateNext()
                                        raises(<ref>XPathException</ref>, 
                                               <ref>DOMException</ref>);</webidl>
        <Type name="Node"/>
        <ArgumentList/>
        <Raises>
          <RaiseException name="XPathException"/>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="snapshotItem" id="::xpath::XPathResult::snapshotItem">
        <webidl>    <ref>Node</ref>               snapshotItem(in unsigned long index)
                                        raises(<ref>XPathException</ref>);</webidl>
        <Type name="Node"/>
        <ArgumentList>
          <Argument in="in" name="index">
            <Type type="unsigned long"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="XPathException"/>
        </Raises>
      </Operation>
    </Interface>
    <Interface name="XPathNamespace" id="::xpath::XPathNamespace">
      <webidl>  interface XPathNamespace : <ref>Node</ref> {

    const unsigned short      XPATH_NAMESPACE_NODE           = 13;

    readonly attribute <ref>Element</ref>         ownerElement;
  };</webidl>
      <InterfaceInheritance>
        <Name name="Node"/>
      </InterfaceInheritance>
      <Const name="XPATH_NAMESPACE_NODE" value="13" id="::xpath::XPathNamespace::XPATH_NAMESPACE_NODE">
        <webidl>    const unsigned short      XPATH_NAMESPACE_NODE           = 13;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Attribute readonly="readonly" name="ownerElement" id="::xpath::XPathNamespace::ownerElement">
        <webidl>    readonly attribute <ref>Element</ref>         ownerElement;</webidl>
        <Type name="Element"/>
      </Attribute>
    </Interface>
  </Module>
</Definitions>
<Definitions>
  <Interface name="Date" id="::Date">
    <webidl>interface Date {
};</webidl>
  </Interface>
  <Interface name="Function" id="::Function">
    <webidl>interface Function {
};</webidl>
  </Interface>
</Definitions>
</Module>
