<Definitions>
  <Module name="validation" id="::validation">
    <webidl>module validation {

  typedef <ref>dom::DOMStringList</ref> DOMStringList;
  typedef <ref>dom::Node</ref> Node;
  typedef <ref>dom::NameList</ref> NameList;
  typedef <ref>dom::Attr</ref> Attr;
  typedef <ref>dom::DOMConfiguration</ref> DOMConfiguration;
  typedef <ref>dom::DOMException</ref> DOMException;

  exception ExceptionVAL {
    const unsigned short      NO_SCHEMA_AVAILABLE_ERR        = 71;

    unsigned short   code;
  };

  [PrototypeRoot]
  interface NodeEditVAL {

    const unsigned short      VAL_WF                         = 1;
    const unsigned short      VAL_NS_WF                      = 2;
    const unsigned short      VAL_INCOMPLETE                 = 3;
    const unsigned short      VAL_SCHEMA                     = 4;


    const unsigned short      VAL_TRUE                       = 5;
    const unsigned short      VAL_FALSE                      = 6;
    const unsigned short      VAL_UNKNOWN                    = 7;

    readonly attribute DOMString?      defaultValue;
    readonly attribute <ref>DOMStringList</ref>   enumeratedValues;
    unsigned short     canInsertBefore(in <ref>Node</ref> newChild, 
                                       in <ref>Node</ref> refChild);
    unsigned short     canRemoveChild(in <ref>Node</ref> oldChild);
    unsigned short     canReplaceChild(in <ref>Node</ref> newChild, 
                                       in <ref>Node</ref> oldChild);
    unsigned short     canAppendChild(in <ref>Node</ref> newChild);
    unsigned short     nodeValidity(in unsigned short valType);
  };

  interface ElementEditVAL : <ref>NodeEditVAL</ref> {

    const unsigned short      VAL_EMPTY_CONTENTTYPE          = 1;
    const unsigned short      VAL_ANY_CONTENTTYPE            = 2;
    const unsigned short      VAL_MIXED_CONTENTTYPE          = 3;
    const unsigned short      VAL_ELEMENTS_CONTENTTYPE       = 4;
    const unsigned short      VAL_SIMPLE_CONTENTTYPE         = 5;

    readonly attribute <ref>NameList</ref>        allowedChildren;
    readonly attribute <ref>NameList</ref>        allowedFirstChildren;
    readonly attribute <ref>NameList</ref>        allowedParents;
    readonly attribute <ref>NameList</ref>        allowedNextSiblings;
    readonly attribute <ref>NameList</ref>        allowedPreviousSiblings;
    readonly attribute <ref>NameList</ref>        allowedAttributes;
    readonly attribute <ref>NameList</ref>        requiredAttributes;
    readonly attribute unsigned short  contentType;
    unsigned short     canSetTextContent(in DOMString? possibleTextContent);
    unsigned short     canSetAttribute(in DOMString attrname, 
                                       in DOMString attrval);
    unsigned short     canSetAttributeNode(in <ref>Attr</ref> attrNode);
    unsigned short     canSetAttributeNS(in DOMString? namespaceURI, 
                                         in DOMString qualifiedName, 
                                         in DOMString value);
    unsigned short     canRemoveAttribute(in DOMString attrname);
    unsigned short     canRemoveAttributeNS(in DOMString? namespaceURI, 
                                            in DOMString localName);
    unsigned short     canRemoveAttributeNode(in <ref>Node</ref> attrNode);
    unsigned short     isElementDefined(in DOMString name);
    unsigned short     isElementDefinedNS(in DOMString? namespaceURI, 
                                          in DOMString name);
  };

  interface CharacterDataEditVAL : <ref>NodeEditVAL</ref> {
    unsigned short     isWhitespaceOnly();
    unsigned short     canSetData(in DOMString arg);
    unsigned short     canAppendData(in DOMString arg);
    unsigned short     canReplaceData(in unsigned long offset, 
                                      in unsigned long count, 
                                      in DOMString arg)
                                        raises(<ref>DOMException</ref>);
    unsigned short     canInsertData(in unsigned long offset, 
                                     in DOMString arg)
                                        raises(<ref>DOMException</ref>);
    unsigned short     canDeleteData(in unsigned long offset, 
                                     in unsigned long count)
                                        raises(<ref>DOMException</ref>);
  };

  interface DocumentEditVAL : <ref>NodeEditVAL</ref> {
             attribute boolean         continuousValidityChecking setraises(<ref>DOMException</ref>, <ref>ExceptionVAL</ref>);

    readonly attribute <ref>DOMConfiguration</ref> domConfig;
    <ref>NameList</ref>           getDefinedElements(in DOMString? namespaceURI);
    unsigned short     validateDocument();
  };
};</webidl>
    <Typedef name="DOMStringList" id="::validation::DOMStringList">
      <webidl>  typedef <ref>dom::DOMStringList</ref> DOMStringList;</webidl>
      <Type name="domDOMStringList"/>
    </Typedef>
    <Typedef name="Node" id="::validation::Node">
      <webidl>  typedef <ref>dom::Node</ref> Node;</webidl>
      <Type name="domNode"/>
    </Typedef>
    <Typedef name="NameList" id="::validation::NameList">
      <webidl>  typedef <ref>dom::NameList</ref> NameList;</webidl>
      <Type name="domNameList"/>
    </Typedef>
    <Typedef name="Attr" id="::validation::Attr">
      <webidl>  typedef <ref>dom::Attr</ref> Attr;</webidl>
      <Type name="domAttr"/>
    </Typedef>
    <Typedef name="DOMConfiguration" id="::validation::DOMConfiguration">
      <webidl>  typedef <ref>dom::DOMConfiguration</ref> DOMConfiguration;</webidl>
      <Type name="domDOMConfiguration"/>
    </Typedef>
    <Typedef name="DOMException" id="::validation::DOMException">
      <webidl>  typedef <ref>dom::DOMException</ref> DOMException;</webidl>
      <Type name="domDOMException"/>
    </Typedef>
    <Exception name="ExceptionVAL" id="::validation::ExceptionVAL">
      <webidl>  exception ExceptionVAL {
    const unsigned short      NO_SCHEMA_AVAILABLE_ERR        = 71;

    unsigned short   code;
  };</webidl>
      <Const name="NO_SCHEMA_AVAILABLE_ERR" value="71" id="::validation::ExceptionVAL::NO_SCHEMA_AVAILABLE_ERR">
        <Type type="unsigned short"/>
      </Const>
      <ExceptionField name="code" id="::validation::ExceptionVAL::code">
        <Type type="unsigned short"/>
      </ExceptionField>
    </Exception>
    <Interface name="NodeEditVAL" id="::validation::NodeEditVAL">
      <webidl>  [PrototypeRoot]
  interface NodeEditVAL {

    const unsigned short      VAL_WF                         = 1;
    const unsigned short      VAL_NS_WF                      = 2;
    const unsigned short      VAL_INCOMPLETE                 = 3;
    const unsigned short      VAL_SCHEMA                     = 4;


    const unsigned short      VAL_TRUE                       = 5;
    const unsigned short      VAL_FALSE                      = 6;
    const unsigned short      VAL_UNKNOWN                    = 7;

    readonly attribute DOMString?      defaultValue;
    readonly attribute <ref>DOMStringList</ref>   enumeratedValues;
    unsigned short     canInsertBefore(in <ref>Node</ref> newChild, 
                                       in <ref>Node</ref> refChild);
    unsigned short     canRemoveChild(in <ref>Node</ref> oldChild);
    unsigned short     canReplaceChild(in <ref>Node</ref> newChild, 
                                       in <ref>Node</ref> oldChild);
    unsigned short     canAppendChild(in <ref>Node</ref> newChild);
    unsigned short     nodeValidity(in unsigned short valType);
  };</webidl>
      <ExtendedAttributeList>
        <ExtendedAttribute name="PrototypeRoot"/>
      </ExtendedAttributeList>
      <Const name="VAL_WF" value="1" id="::validation::NodeEditVAL::VAL_WF">
        <webidl>    const unsigned short      VAL_WF                         = 1;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="VAL_NS_WF" value="2" id="::validation::NodeEditVAL::VAL_NS_WF">
        <webidl>    const unsigned short      VAL_NS_WF                      = 2;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="VAL_INCOMPLETE" value="3" id="::validation::NodeEditVAL::VAL_INCOMPLETE">
        <webidl>    const unsigned short      VAL_INCOMPLETE                 = 3;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="VAL_SCHEMA" value="4" id="::validation::NodeEditVAL::VAL_SCHEMA">
        <webidl>    const unsigned short      VAL_SCHEMA                     = 4;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="VAL_TRUE" value="5" id="::validation::NodeEditVAL::VAL_TRUE">
        <webidl>    const unsigned short      VAL_TRUE                       = 5;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="VAL_FALSE" value="6" id="::validation::NodeEditVAL::VAL_FALSE">
        <webidl>    const unsigned short      VAL_FALSE                      = 6;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="VAL_UNKNOWN" value="7" id="::validation::NodeEditVAL::VAL_UNKNOWN">
        <webidl>    const unsigned short      VAL_UNKNOWN                    = 7;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Attribute readonly="readonly" name="defaultValue" id="::validation::NodeEditVAL::defaultValue">
        <webidl>    readonly attribute DOMString?      defaultValue;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute readonly="readonly" name="enumeratedValues" id="::validation::NodeEditVAL::enumeratedValues">
        <webidl>    readonly attribute <ref>DOMStringList</ref>   enumeratedValues;</webidl>
        <Type name="DOMStringList"/>
      </Attribute>
      <Operation name="canInsertBefore" id="::validation::NodeEditVAL::canInsertBefore">
        <webidl>    unsigned short     canInsertBefore(in <ref>Node</ref> newChild, 
                                       in <ref>Node</ref> refChild);</webidl>
        <Type type="unsigned short"/>
        <ArgumentList>
          <Argument in="in" name="newChild">
            <Type name="Node"/>
          </Argument>
          <Argument in="in" name="refChild">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="canRemoveChild" id="::validation::NodeEditVAL::canRemoveChild">
        <webidl>    unsigned short     canRemoveChild(in <ref>Node</ref> oldChild);</webidl>
        <Type type="unsigned short"/>
        <ArgumentList>
          <Argument in="in" name="oldChild">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="canReplaceChild" id="::validation::NodeEditVAL::canReplaceChild">
        <webidl>    unsigned short     canReplaceChild(in <ref>Node</ref> newChild, 
                                       in <ref>Node</ref> oldChild);</webidl>
        <Type type="unsigned short"/>
        <ArgumentList>
          <Argument in="in" name="newChild">
            <Type name="Node"/>
          </Argument>
          <Argument in="in" name="oldChild">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="canAppendChild" id="::validation::NodeEditVAL::canAppendChild">
        <webidl>    unsigned short     canAppendChild(in <ref>Node</ref> newChild);</webidl>
        <Type type="unsigned short"/>
        <ArgumentList>
          <Argument in="in" name="newChild">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="nodeValidity" id="::validation::NodeEditVAL::nodeValidity">
        <webidl>    unsigned short     nodeValidity(in unsigned short valType);</webidl>
        <Type type="unsigned short"/>
        <ArgumentList>
          <Argument in="in" name="valType">
            <Type type="unsigned short"/>
          </Argument>
        </ArgumentList>
      </Operation>
    </Interface>
    <Interface name="ElementEditVAL" id="::validation::ElementEditVAL">
      <webidl>  interface ElementEditVAL : <ref>NodeEditVAL</ref> {

    const unsigned short      VAL_EMPTY_CONTENTTYPE          = 1;
    const unsigned short      VAL_ANY_CONTENTTYPE            = 2;
    const unsigned short      VAL_MIXED_CONTENTTYPE          = 3;
    const unsigned short      VAL_ELEMENTS_CONTENTTYPE       = 4;
    const unsigned short      VAL_SIMPLE_CONTENTTYPE         = 5;

    readonly attribute <ref>NameList</ref>        allowedChildren;
    readonly attribute <ref>NameList</ref>        allowedFirstChildren;
    readonly attribute <ref>NameList</ref>        allowedParents;
    readonly attribute <ref>NameList</ref>        allowedNextSiblings;
    readonly attribute <ref>NameList</ref>        allowedPreviousSiblings;
    readonly attribute <ref>NameList</ref>        allowedAttributes;
    readonly attribute <ref>NameList</ref>        requiredAttributes;
    readonly attribute unsigned short  contentType;
    unsigned short     canSetTextContent(in DOMString? possibleTextContent);
    unsigned short     canSetAttribute(in DOMString attrname, 
                                       in DOMString attrval);
    unsigned short     canSetAttributeNode(in <ref>Attr</ref> attrNode);
    unsigned short     canSetAttributeNS(in DOMString? namespaceURI, 
                                         in DOMString qualifiedName, 
                                         in DOMString value);
    unsigned short     canRemoveAttribute(in DOMString attrname);
    unsigned short     canRemoveAttributeNS(in DOMString? namespaceURI, 
                                            in DOMString localName);
    unsigned short     canRemoveAttributeNode(in <ref>Node</ref> attrNode);
    unsigned short     isElementDefined(in DOMString name);
    unsigned short     isElementDefinedNS(in DOMString? namespaceURI, 
                                          in DOMString name);
  };</webidl>
      <InterfaceInheritance>
        <Name name="NodeEditVAL"/>
      </InterfaceInheritance>
      <Const name="VAL_EMPTY_CONTENTTYPE" value="1" id="::validation::ElementEditVAL::VAL_EMPTY_CONTENTTYPE">
        <webidl>    const unsigned short      VAL_EMPTY_CONTENTTYPE          = 1;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="VAL_ANY_CONTENTTYPE" value="2" id="::validation::ElementEditVAL::VAL_ANY_CONTENTTYPE">
        <webidl>    const unsigned short      VAL_ANY_CONTENTTYPE            = 2;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="VAL_MIXED_CONTENTTYPE" value="3" id="::validation::ElementEditVAL::VAL_MIXED_CONTENTTYPE">
        <webidl>    const unsigned short      VAL_MIXED_CONTENTTYPE          = 3;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="VAL_ELEMENTS_CONTENTTYPE" value="4" id="::validation::ElementEditVAL::VAL_ELEMENTS_CONTENTTYPE">
        <webidl>    const unsigned short      VAL_ELEMENTS_CONTENTTYPE       = 4;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="VAL_SIMPLE_CONTENTTYPE" value="5" id="::validation::ElementEditVAL::VAL_SIMPLE_CONTENTTYPE">
        <webidl>    const unsigned short      VAL_SIMPLE_CONTENTTYPE         = 5;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Attribute readonly="readonly" name="allowedChildren" id="::validation::ElementEditVAL::allowedChildren">
        <webidl>    readonly attribute <ref>NameList</ref>        allowedChildren;</webidl>
        <Type name="NameList"/>
      </Attribute>
      <Attribute readonly="readonly" name="allowedFirstChildren" id="::validation::ElementEditVAL::allowedFirstChildren">
        <webidl>    readonly attribute <ref>NameList</ref>        allowedFirstChildren;</webidl>
        <Type name="NameList"/>
      </Attribute>
      <Attribute readonly="readonly" name="allowedParents" id="::validation::ElementEditVAL::allowedParents">
        <webidl>    readonly attribute <ref>NameList</ref>        allowedParents;</webidl>
        <Type name="NameList"/>
      </Attribute>
      <Attribute readonly="readonly" name="allowedNextSiblings" id="::validation::ElementEditVAL::allowedNextSiblings">
        <webidl>    readonly attribute <ref>NameList</ref>        allowedNextSiblings;</webidl>
        <Type name="NameList"/>
      </Attribute>
      <Attribute readonly="readonly" name="allowedPreviousSiblings" id="::validation::ElementEditVAL::allowedPreviousSiblings">
        <webidl>    readonly attribute <ref>NameList</ref>        allowedPreviousSiblings;</webidl>
        <Type name="NameList"/>
      </Attribute>
      <Attribute readonly="readonly" name="allowedAttributes" id="::validation::ElementEditVAL::allowedAttributes">
        <webidl>    readonly attribute <ref>NameList</ref>        allowedAttributes;</webidl>
        <Type name="NameList"/>
      </Attribute>
      <Attribute readonly="readonly" name="requiredAttributes" id="::validation::ElementEditVAL::requiredAttributes">
        <webidl>    readonly attribute <ref>NameList</ref>        requiredAttributes;</webidl>
        <Type name="NameList"/>
      </Attribute>
      <Attribute readonly="readonly" name="contentType" id="::validation::ElementEditVAL::contentType">
        <webidl>    readonly attribute unsigned short  contentType;</webidl>
        <Type type="unsigned short"/>
      </Attribute>
      <Operation name="canSetTextContent" id="::validation::ElementEditVAL::canSetTextContent">
        <webidl>    unsigned short     canSetTextContent(in DOMString? possibleTextContent);</webidl>
        <Type type="unsigned short"/>
        <ArgumentList>
          <Argument in="in" name="possibleTextContent">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="canSetAttribute" id="::validation::ElementEditVAL::canSetAttribute">
        <webidl>    unsigned short     canSetAttribute(in DOMString attrname, 
                                       in DOMString attrval);</webidl>
        <Type type="unsigned short"/>
        <ArgumentList>
          <Argument in="in" name="attrname">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="attrval">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="canSetAttributeNode" id="::validation::ElementEditVAL::canSetAttributeNode">
        <webidl>    unsigned short     canSetAttributeNode(in <ref>Attr</ref> attrNode);</webidl>
        <Type type="unsigned short"/>
        <ArgumentList>
          <Argument in="in" name="attrNode">
            <Type name="Attr"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="canSetAttributeNS" id="::validation::ElementEditVAL::canSetAttributeNS">
        <webidl>    unsigned short     canSetAttributeNS(in DOMString? namespaceURI, 
                                         in DOMString qualifiedName, 
                                         in DOMString value);</webidl>
        <Type type="unsigned short"/>
        <ArgumentList>
          <Argument in="in" name="namespaceURI">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="qualifiedName">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="value">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="canRemoveAttribute" id="::validation::ElementEditVAL::canRemoveAttribute">
        <webidl>    unsigned short     canRemoveAttribute(in DOMString attrname);</webidl>
        <Type type="unsigned short"/>
        <ArgumentList>
          <Argument in="in" name="attrname">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="canRemoveAttributeNS" id="::validation::ElementEditVAL::canRemoveAttributeNS">
        <webidl>    unsigned short     canRemoveAttributeNS(in DOMString? namespaceURI, 
                                            in DOMString localName);</webidl>
        <Type type="unsigned short"/>
        <ArgumentList>
          <Argument in="in" name="namespaceURI">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="localName">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="canRemoveAttributeNode" id="::validation::ElementEditVAL::canRemoveAttributeNode">
        <webidl>    unsigned short     canRemoveAttributeNode(in <ref>Node</ref> attrNode);</webidl>
        <Type type="unsigned short"/>
        <ArgumentList>
          <Argument in="in" name="attrNode">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="isElementDefined" id="::validation::ElementEditVAL::isElementDefined">
        <webidl>    unsigned short     isElementDefined(in DOMString name);</webidl>
        <Type type="unsigned short"/>
        <ArgumentList>
          <Argument in="in" name="name">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="isElementDefinedNS" id="::validation::ElementEditVAL::isElementDefinedNS">
        <webidl>    unsigned short     isElementDefinedNS(in DOMString? namespaceURI, 
                                          in DOMString name);</webidl>
        <Type type="unsigned short"/>
        <ArgumentList>
          <Argument in="in" name="namespaceURI">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="name">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
    </Interface>
    <Interface name="CharacterDataEditVAL" id="::validation::CharacterDataEditVAL">
      <webidl>  interface CharacterDataEditVAL : <ref>NodeEditVAL</ref> {
    unsigned short     isWhitespaceOnly();
    unsigned short     canSetData(in DOMString arg);
    unsigned short     canAppendData(in DOMString arg);
    unsigned short     canReplaceData(in unsigned long offset, 
                                      in unsigned long count, 
                                      in DOMString arg)
                                        raises(<ref>DOMException</ref>);
    unsigned short     canInsertData(in unsigned long offset, 
                                     in DOMString arg)
                                        raises(<ref>DOMException</ref>);
    unsigned short     canDeleteData(in unsigned long offset, 
                                     in unsigned long count)
                                        raises(<ref>DOMException</ref>);
  };</webidl>
      <InterfaceInheritance>
        <Name name="NodeEditVAL"/>
      </InterfaceInheritance>
      <Operation name="isWhitespaceOnly" id="::validation::CharacterDataEditVAL::isWhitespaceOnly">
        <webidl>    unsigned short     isWhitespaceOnly();</webidl>
        <Type type="unsigned short"/>
        <ArgumentList/>
      </Operation>
      <Operation name="canSetData" id="::validation::CharacterDataEditVAL::canSetData">
        <webidl>    unsigned short     canSetData(in DOMString arg);</webidl>
        <Type type="unsigned short"/>
        <ArgumentList>
          <Argument in="in" name="arg">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="canAppendData" id="::validation::CharacterDataEditVAL::canAppendData">
        <webidl>    unsigned short     canAppendData(in DOMString arg);</webidl>
        <Type type="unsigned short"/>
        <ArgumentList>
          <Argument in="in" name="arg">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="canReplaceData" id="::validation::CharacterDataEditVAL::canReplaceData">
        <webidl>    unsigned short     canReplaceData(in unsigned long offset, 
                                      in unsigned long count, 
                                      in DOMString arg)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="unsigned short"/>
        <ArgumentList>
          <Argument in="in" name="offset">
            <Type type="unsigned long"/>
          </Argument>
          <Argument in="in" name="count">
            <Type type="unsigned long"/>
          </Argument>
          <Argument in="in" name="arg">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="canInsertData" id="::validation::CharacterDataEditVAL::canInsertData">
        <webidl>    unsigned short     canInsertData(in unsigned long offset, 
                                     in DOMString arg)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="unsigned short"/>
        <ArgumentList>
          <Argument in="in" name="offset">
            <Type type="unsigned long"/>
          </Argument>
          <Argument in="in" name="arg">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="canDeleteData" id="::validation::CharacterDataEditVAL::canDeleteData">
        <webidl>    unsigned short     canDeleteData(in unsigned long offset, 
                                     in unsigned long count)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="unsigned short"/>
        <ArgumentList>
          <Argument in="in" name="offset">
            <Type type="unsigned long"/>
          </Argument>
          <Argument in="in" name="count">
            <Type type="unsigned long"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
    </Interface>
    <Interface name="DocumentEditVAL" id="::validation::DocumentEditVAL">
      <webidl>  interface DocumentEditVAL : <ref>NodeEditVAL</ref> {
             attribute boolean         continuousValidityChecking setraises(<ref>DOMException</ref>, <ref>ExceptionVAL</ref>);

    readonly attribute <ref>DOMConfiguration</ref> domConfig;
    <ref>NameList</ref>           getDefinedElements(in DOMString? namespaceURI);
    unsigned short     validateDocument();
  };</webidl>
      <InterfaceInheritance>
        <Name name="NodeEditVAL"/>
      </InterfaceInheritance>
      <Attribute name="continuousValidityChecking" id="::validation::DocumentEditVAL::continuousValidityChecking">
        <webidl>             attribute boolean         continuousValidityChecking setraises(<ref>DOMException</ref>, <ref>ExceptionVAL</ref>);</webidl>
        <Type type="boolean"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
          <RaiseException name="ExceptionVAL"/>
        </SetRaises>
      </Attribute>
      <Attribute readonly="readonly" name="domConfig" id="::validation::DocumentEditVAL::domConfig">
        <webidl>    readonly attribute <ref>DOMConfiguration</ref> domConfig;</webidl>
        <Type name="DOMConfiguration"/>
      </Attribute>
      <Operation name="getDefinedElements" id="::validation::DocumentEditVAL::getDefinedElements">
        <webidl>    <ref>NameList</ref>           getDefinedElements(in DOMString? namespaceURI);</webidl>
        <Type name="NameList"/>
        <ArgumentList>
          <Argument in="in" name="namespaceURI">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="validateDocument" id="::validation::DocumentEditVAL::validateDocument">
        <webidl>    unsigned short     validateDocument();</webidl>
        <Type type="unsigned short"/>
        <ArgumentList/>
      </Operation>
    </Interface>
  </Module>
</Definitions>
