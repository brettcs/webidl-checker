<Definitions>
  <Module name="ranges" id="::ranges">
    <webidl>module ranges {

  typedef <ref>dom::Node</ref> Node;
  typedef <ref>dom::Document</ref> Document;
  typedef <ref>dom::DOMException</ref> DOMException;
  typedef <ref>dom::DocumentFragment</ref> DocumentFragment;

  exception RangeException {
    const unsigned short      BAD_BOUNDARYPOINTS_ERR         = 1;
    const unsigned short      INVALID_NODE_TYPE_ERR          = 2;

    unsigned short   code;
  };

  interface Range {
    readonly attribute <ref>Node</ref>             startContainer getraises(<ref>DOMException</ref>);

    readonly attribute long             startOffset getraises(<ref>DOMException</ref>);

    readonly attribute <ref>Node</ref>             endContainer getraises(<ref>DOMException</ref>);

    readonly attribute long             endOffset getraises(<ref>DOMException</ref>);

    readonly attribute boolean          collapsed getraises(<ref>DOMException</ref>);

    readonly attribute <ref>Node</ref>             commonAncestorContainer getraises(<ref>DOMException</ref>);

    void               setStart(in <ref>Node</ref> refNode, 
                                in long offset)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);
    void               setEnd(in <ref>Node</ref> refNode, 
                              in long offset)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);
    void               setStartBefore(in <ref>Node</ref> refNode)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);
    void               setStartAfter(in <ref>Node</ref> refNode)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);
    void               setEndBefore(in <ref>Node</ref> refNode)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);
    void               setEndAfter(in <ref>Node</ref> refNode)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);
    void               collapse(in boolean toStart)
                                        raises(<ref>DOMException</ref>);
    void               selectNode(in <ref>Node</ref> refNode)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);
    void               selectNodeContents(in <ref>Node</ref> refNode)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);

    const unsigned short      START_TO_START                 = 0;
    const unsigned short      START_TO_END                   = 1;
    const unsigned short      END_TO_END                     = 2;
    const unsigned short      END_TO_START                   = 3;

    short              compareBoundaryPoints(in unsigned short how, 
                                             in <ref>Range</ref> sourceRange)
                                        raises(<ref>DOMException</ref>);
    void               deleteContents()
                                        raises(<ref>DOMException</ref>);
    <ref>DocumentFragment</ref>   extractContents()
                                        raises(<ref>DOMException</ref>);
    <ref>DocumentFragment</ref>   cloneContents()
                                        raises(<ref>DOMException</ref>);
    void               insertNode(in <ref>Node</ref> newNode)
                                        raises(<ref>DOMException</ref>, 
                                               <ref>RangeException</ref>);
    void               surroundContents(in <ref>Node</ref> newParent)
                                        raises(<ref>DOMException</ref>, 
                                               <ref>RangeException</ref>);
    <ref>Range</ref>              cloneRange()
                                        raises(<ref>DOMException</ref>);
    DOMString          toString()
                                        raises(<ref>DOMException</ref>);
    void               detach()
                                        raises(<ref>DOMException</ref>);
  };

  interface DocumentRange {
    <ref>Range</ref>              createRange();
  };

  <ref>Document</ref> implements <ref>DocumentRange</ref>;
};</webidl>
    <Typedef name="Node" id="::ranges::Node">
      <webidl>  typedef <ref>dom::Node</ref> Node;</webidl>
      <Type name="domNode"/>
    </Typedef>
    <Typedef name="Document" id="::ranges::Document">
      <webidl>  typedef <ref>dom::Document</ref> Document;</webidl>
      <Type name="domDocument"/>
    </Typedef>
    <Typedef name="DOMException" id="::ranges::DOMException">
      <webidl>  typedef <ref>dom::DOMException</ref> DOMException;</webidl>
      <Type name="domDOMException"/>
    </Typedef>
    <Typedef name="DocumentFragment" id="::ranges::DocumentFragment">
      <webidl>  typedef <ref>dom::DocumentFragment</ref> DocumentFragment;</webidl>
      <Type name="domDocumentFragment"/>
    </Typedef>
    <Exception name="RangeException" id="::ranges::RangeException">
      <webidl>  exception RangeException {
    const unsigned short      BAD_BOUNDARYPOINTS_ERR         = 1;
    const unsigned short      INVALID_NODE_TYPE_ERR          = 2;

    unsigned short   code;
  };</webidl>
      <Const name="BAD_BOUNDARYPOINTS_ERR" value="1" id="::ranges::RangeException::BAD_BOUNDARYPOINTS_ERR">
        <Type type="unsigned short"/>
      </Const>
      <Const name="INVALID_NODE_TYPE_ERR" value="2" id="::ranges::RangeException::INVALID_NODE_TYPE_ERR">
        <Type type="unsigned short"/>
      </Const>
      <ExceptionField name="code" id="::ranges::RangeException::code">
        <Type type="unsigned short"/>
      </ExceptionField>
    </Exception>
    <Interface name="Range" id="::ranges::Range">
      <webidl>  interface Range {
    readonly attribute <ref>Node</ref>             startContainer getraises(<ref>DOMException</ref>);

    readonly attribute long             startOffset getraises(<ref>DOMException</ref>);

    readonly attribute <ref>Node</ref>             endContainer getraises(<ref>DOMException</ref>);

    readonly attribute long             endOffset getraises(<ref>DOMException</ref>);

    readonly attribute boolean          collapsed getraises(<ref>DOMException</ref>);

    readonly attribute <ref>Node</ref>             commonAncestorContainer getraises(<ref>DOMException</ref>);

    void               setStart(in <ref>Node</ref> refNode, 
                                in long offset)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);
    void               setEnd(in <ref>Node</ref> refNode, 
                              in long offset)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);
    void               setStartBefore(in <ref>Node</ref> refNode)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);
    void               setStartAfter(in <ref>Node</ref> refNode)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);
    void               setEndBefore(in <ref>Node</ref> refNode)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);
    void               setEndAfter(in <ref>Node</ref> refNode)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);
    void               collapse(in boolean toStart)
                                        raises(<ref>DOMException</ref>);
    void               selectNode(in <ref>Node</ref> refNode)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);
    void               selectNodeContents(in <ref>Node</ref> refNode)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);

    const unsigned short      START_TO_START                 = 0;
    const unsigned short      START_TO_END                   = 1;
    const unsigned short      END_TO_END                     = 2;
    const unsigned short      END_TO_START                   = 3;

    short              compareBoundaryPoints(in unsigned short how, 
                                             in <ref>Range</ref> sourceRange)
                                        raises(<ref>DOMException</ref>);
    void               deleteContents()
                                        raises(<ref>DOMException</ref>);
    <ref>DocumentFragment</ref>   extractContents()
                                        raises(<ref>DOMException</ref>);
    <ref>DocumentFragment</ref>   cloneContents()
                                        raises(<ref>DOMException</ref>);
    void               insertNode(in <ref>Node</ref> newNode)
                                        raises(<ref>DOMException</ref>, 
                                               <ref>RangeException</ref>);
    void               surroundContents(in <ref>Node</ref> newParent)
                                        raises(<ref>DOMException</ref>, 
                                               <ref>RangeException</ref>);
    <ref>Range</ref>              cloneRange()
                                        raises(<ref>DOMException</ref>);
    DOMString          toString()
                                        raises(<ref>DOMException</ref>);
    void               detach()
                                        raises(<ref>DOMException</ref>);
  };</webidl>
      <Attribute readonly="readonly" name="startContainer" id="::ranges::Range::startContainer">
        <webidl>    readonly attribute <ref>Node</ref>             startContainer getraises(<ref>DOMException</ref>);</webidl>
        <Type name="Node"/>
        <GetRaises>
          <RaiseException name="DOMException"/>
        </GetRaises>
      </Attribute>
      <Attribute readonly="readonly" name="startOffset" id="::ranges::Range::startOffset">
        <webidl>    readonly attribute long             startOffset getraises(<ref>DOMException</ref>);</webidl>
        <Type type="long"/>
        <GetRaises>
          <RaiseException name="DOMException"/>
        </GetRaises>
      </Attribute>
      <Attribute readonly="readonly" name="endContainer" id="::ranges::Range::endContainer">
        <webidl>    readonly attribute <ref>Node</ref>             endContainer getraises(<ref>DOMException</ref>);</webidl>
        <Type name="Node"/>
        <GetRaises>
          <RaiseException name="DOMException"/>
        </GetRaises>
      </Attribute>
      <Attribute readonly="readonly" name="endOffset" id="::ranges::Range::endOffset">
        <webidl>    readonly attribute long             endOffset getraises(<ref>DOMException</ref>);</webidl>
        <Type type="long"/>
        <GetRaises>
          <RaiseException name="DOMException"/>
        </GetRaises>
      </Attribute>
      <Attribute readonly="readonly" name="collapsed" id="::ranges::Range::collapsed">
        <webidl>    readonly attribute boolean          collapsed getraises(<ref>DOMException</ref>);</webidl>
        <Type type="boolean"/>
        <GetRaises>
          <RaiseException name="DOMException"/>
        </GetRaises>
      </Attribute>
      <Attribute readonly="readonly" name="commonAncestorContainer" id="::ranges::Range::commonAncestorContainer">
        <webidl>    readonly attribute <ref>Node</ref>             commonAncestorContainer getraises(<ref>DOMException</ref>);</webidl>
        <Type name="Node"/>
        <GetRaises>
          <RaiseException name="DOMException"/>
        </GetRaises>
      </Attribute>
      <Operation name="setStart" id="::ranges::Range::setStart">
        <webidl>    void               setStart(in <ref>Node</ref> refNode, 
                                in long offset)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="refNode">
            <Type name="Node"/>
          </Argument>
          <Argument in="in" name="offset">
            <Type type="long"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="RangeException"/>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="setEnd" id="::ranges::Range::setEnd">
        <webidl>    void               setEnd(in <ref>Node</ref> refNode, 
                              in long offset)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="refNode">
            <Type name="Node"/>
          </Argument>
          <Argument in="in" name="offset">
            <Type type="long"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="RangeException"/>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="setStartBefore" id="::ranges::Range::setStartBefore">
        <webidl>    void               setStartBefore(in <ref>Node</ref> refNode)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="refNode">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="RangeException"/>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="setStartAfter" id="::ranges::Range::setStartAfter">
        <webidl>    void               setStartAfter(in <ref>Node</ref> refNode)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="refNode">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="RangeException"/>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="setEndBefore" id="::ranges::Range::setEndBefore">
        <webidl>    void               setEndBefore(in <ref>Node</ref> refNode)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="refNode">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="RangeException"/>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="setEndAfter" id="::ranges::Range::setEndAfter">
        <webidl>    void               setEndAfter(in <ref>Node</ref> refNode)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="refNode">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="RangeException"/>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="collapse" id="::ranges::Range::collapse">
        <webidl>    void               collapse(in boolean toStart)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="toStart">
            <Type type="boolean"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="selectNode" id="::ranges::Range::selectNode">
        <webidl>    void               selectNode(in <ref>Node</ref> refNode)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="refNode">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="RangeException"/>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="selectNodeContents" id="::ranges::Range::selectNodeContents">
        <webidl>    void               selectNodeContents(in <ref>Node</ref> refNode)
                                        raises(<ref>RangeException</ref>, 
                                               <ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="refNode">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="RangeException"/>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Const name="START_TO_START" value="0" id="::ranges::Range::START_TO_START">
        <webidl>    const unsigned short      START_TO_START                 = 0;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="START_TO_END" value="1" id="::ranges::Range::START_TO_END">
        <webidl>    const unsigned short      START_TO_END                   = 1;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="END_TO_END" value="2" id="::ranges::Range::END_TO_END">
        <webidl>    const unsigned short      END_TO_END                     = 2;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="END_TO_START" value="3" id="::ranges::Range::END_TO_START">
        <webidl>    const unsigned short      END_TO_START                   = 3;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Operation name="compareBoundaryPoints" id="::ranges::Range::compareBoundaryPoints">
        <webidl>    short              compareBoundaryPoints(in unsigned short how, 
                                             in <ref>Range</ref> sourceRange)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="short"/>
        <ArgumentList>
          <Argument in="in" name="how">
            <Type type="unsigned short"/>
          </Argument>
          <Argument in="in" name="sourceRange">
            <Type name="Range"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="deleteContents" id="::ranges::Range::deleteContents">
        <webidl>    void               deleteContents()
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList/>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="extractContents" id="::ranges::Range::extractContents">
        <webidl>    <ref>DocumentFragment</ref>   extractContents()
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="DocumentFragment"/>
        <ArgumentList/>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="cloneContents" id="::ranges::Range::cloneContents">
        <webidl>    <ref>DocumentFragment</ref>   cloneContents()
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="DocumentFragment"/>
        <ArgumentList/>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="insertNode" id="::ranges::Range::insertNode">
        <webidl>    void               insertNode(in <ref>Node</ref> newNode)
                                        raises(<ref>DOMException</ref>, 
                                               <ref>RangeException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="newNode">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
          <RaiseException name="RangeException"/>
        </Raises>
      </Operation>
      <Operation name="surroundContents" id="::ranges::Range::surroundContents">
        <webidl>    void               surroundContents(in <ref>Node</ref> newParent)
                                        raises(<ref>DOMException</ref>, 
                                               <ref>RangeException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="newParent">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
          <RaiseException name="RangeException"/>
        </Raises>
      </Operation>
      <Operation name="cloneRange" id="::ranges::Range::cloneRange">
        <webidl>    <ref>Range</ref>              cloneRange()
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Range"/>
        <ArgumentList/>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="toString" id="::ranges::Range::toString">
        <webidl>    DOMString          toString()
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <ArgumentList/>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="detach" id="::ranges::Range::detach">
        <webidl>    void               detach()
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList/>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
    </Interface>
    <Interface name="DocumentRange" id="::ranges::DocumentRange">
      <webidl>  interface DocumentRange {
    <ref>Range</ref>              createRange();
  };</webidl>
      <Operation name="createRange" id="::ranges::DocumentRange::createRange">
        <webidl>    <ref>Range</ref>              createRange();</webidl>
        <Type name="Range"/>
        <ArgumentList/>
      </Operation>
    </Interface>
    <Implements name1="Document" name2="DocumentRange">
      <webidl>  <ref>Document</ref> implements <ref>DocumentRange</ref>;</webidl>
    </Implements>
  </Module>
</Definitions>
