<Definitions>
  <Module name="css" id="::css">
    <webidl>module css {

  typedef <ref>dom::Document</ref> Document;
  typedef <ref>dom::Element</ref> Element;
  typedef <ref>dom::DOMImplementation</ref> DOMImplementation;
  typedef <ref>dom::DOMException</ref> DOMException;
  typedef <ref>views::AbstractView</ref> AbstractView;

  interface CSSRuleList {
    readonly attribute unsigned long length;
    getter <ref>CSSRule</ref> item(in unsigned long index);
  };

  [PrototypeRoot]
  interface CSSRule {

    const unsigned short      UNKNOWN_RULE                   = 0;
    const unsigned short      STYLE_RULE                     = 1;
    const unsigned short      CHARSET_RULE                   = 2;
    const unsigned short      IMPORT_RULE                    = 3;
    const unsigned short      MEDIA_RULE                     = 4;
    const unsigned short      FONT_FACE_RULE                 = 5;
    const unsigned short      PAGE_RULE                      = 6;

    readonly attribute unsigned short   type;
             attribute DOMString        cssText setraises(<ref>DOMException</ref>);

    readonly attribute <ref>CSSStyleSheet</ref>    parentStyleSheet;
    readonly attribute <ref>CSSRule</ref>          parentRule;
  };

  interface CSSStyleRule : <ref>CSSRule</ref> {
             attribute DOMString        selectorText setraises(<ref>DOMException</ref>);

    readonly attribute <ref>CSSStyleDeclaration</ref>  style;
  };

  interface CSSMediaRule : <ref>CSSRule</ref> {
    readonly attribute <ref>stylesheets::MediaList</ref>  media;
    readonly attribute <ref>CSSRuleList</ref>      cssRules;
    unsigned long      insertRule(in DOMString rule, 
                                  in unsigned long index)
                                        raises(<ref>DOMException</ref>);
    void               deleteRule(in unsigned long index)
                                        raises(<ref>DOMException</ref>);
  };

  interface CSSFontFaceRule : <ref>CSSRule</ref> {
    readonly attribute <ref>CSSStyleDeclaration</ref>  style;
  };

  interface CSSPageRule : <ref>CSSRule</ref> {
             attribute DOMString        selectorText setraises(<ref>DOMException</ref>);

    readonly attribute <ref>CSSStyleDeclaration</ref>  style;
  };

  interface CSSImportRule : <ref>CSSRule</ref> {
    readonly attribute DOMString        href;
    readonly attribute <ref>stylesheets::MediaList</ref>  media;
    readonly attribute <ref>CSSStyleSheet</ref>    styleSheet;
  };

  interface CSSCharsetRule : <ref>CSSRule</ref> {
             attribute DOMString        encoding setraises(<ref>DOMException</ref>);

  };

  interface CSSUnknownRule : <ref>CSSRule</ref> {
  };

  interface CSSStyleDeclaration {
             attribute DOMString        cssText setraises(<ref>DOMException</ref>);

    DOMString          getPropertyValue(in DOMString propertyName);
    <ref>CSSValue</ref>           getPropertyCSSValue(in DOMString propertyName);
    DOMString          removeProperty(in DOMString propertyName)
                                        raises(<ref>DOMException</ref>);
    DOMString          getPropertyPriority(in DOMString propertyName);
    void               setProperty(in DOMString propertyName, 
                                   in DOMString value, 
                                   in DOMString? priority)
                                        raises(<ref>DOMException</ref>);
    readonly attribute unsigned long    length;
    getter DOMString item(in unsigned long index);
    readonly attribute <ref>CSSRule</ref>          parentRule;
  };

  [PrototypeRoot]
  interface CSSValue {

    const unsigned short      CSS_INHERIT                    = 0;
    const unsigned short      CSS_PRIMITIVE_VALUE            = 1;
    const unsigned short      CSS_VALUE_LIST                 = 2;
    const unsigned short      CSS_CUSTOM                     = 3;

             attribute DOMString        cssText setraises(<ref>DOMException</ref>);

    readonly attribute unsigned short   cssValueType;
  };

  interface CSSPrimitiveValue : <ref>CSSValue</ref> {

    const unsigned short      CSS_UNKNOWN                    = 0;
    const unsigned short      CSS_NUMBER                     = 1;
    const unsigned short      CSS_PERCENTAGE                 = 2;
    const unsigned short      CSS_EMS                        = 3;
    const unsigned short      CSS_EXS                        = 4;
    const unsigned short      CSS_PX                         = 5;
    const unsigned short      CSS_CM                         = 6;
    const unsigned short      CSS_MM                         = 7;
    const unsigned short      CSS_IN                         = 8;
    const unsigned short      CSS_PT                         = 9;
    const unsigned short      CSS_PC                         = 10;
    const unsigned short      CSS_DEG                        = 11;
    const unsigned short      CSS_RAD                        = 12;
    const unsigned short      CSS_GRAD                       = 13;
    const unsigned short      CSS_MS                         = 14;
    const unsigned short      CSS_S                          = 15;
    const unsigned short      CSS_HZ                         = 16;
    const unsigned short      CSS_KHZ                        = 17;
    const unsigned short      CSS_DIMENSION                  = 18;
    const unsigned short      CSS_STRING                     = 19;
    const unsigned short      CSS_URI                        = 20;
    const unsigned short      CSS_IDENT                      = 21;
    const unsigned short      CSS_ATTR                       = 22;
    const unsigned short      CSS_COUNTER                    = 23;
    const unsigned short      CSS_RECT                       = 24;
    const unsigned short      CSS_RGBCOLOR                   = 25;

    readonly attribute unsigned short   primitiveType;
    void               setFloatValue(in unsigned short unitType, 
                                     in float floatValue)
                                        raises(<ref>DOMException</ref>);
    float              getFloatValue(in unsigned short unitType)
                                        raises(<ref>DOMException</ref>);
    void               setStringValue(in unsigned short stringType, 
                                      in DOMString stringValue)
                                        raises(<ref>DOMException</ref>);
    DOMString          getStringValue()
                                        raises(<ref>DOMException</ref>);
    <ref>Counter</ref>            getCounterValue()
                                        raises(<ref>DOMException</ref>);
    <ref>Rect</ref>               getRectValue()
                                        raises(<ref>DOMException</ref>);
    <ref>RGBColor</ref>           getRGBColorValue()
                                        raises(<ref>DOMException</ref>);
  };

  interface CSSValueList : <ref>CSSValue</ref> {
    readonly attribute unsigned long length;
    getter <ref>CSSValue</ref> item(in unsigned long index);
  };

  interface RGBColor {
    readonly attribute <ref>CSSPrimitiveValue</ref>  red;
    readonly attribute <ref>CSSPrimitiveValue</ref>  green;
    readonly attribute <ref>CSSPrimitiveValue</ref>  blue;
  };

  interface Rect {
    readonly attribute <ref>CSSPrimitiveValue</ref>  top;
    readonly attribute <ref>CSSPrimitiveValue</ref>  right;
    readonly attribute <ref>CSSPrimitiveValue</ref>  bottom;
    readonly attribute <ref>CSSPrimitiveValue</ref>  left;
  };

  interface Counter {
    readonly attribute DOMString        identifier;
    readonly attribute DOMString        listStyle;
    readonly attribute DOMString        separator;
  };

  interface ElementCSSInlineStyle {
    readonly attribute <ref>CSSStyleDeclaration</ref>  style;
  };

  interface CSS2Properties {
             attribute DOMString        azimuth setraises(<ref>DOMException</ref>);

             attribute DOMString        background setraises(<ref>DOMException</ref>);

             attribute DOMString        backgroundAttachment setraises(<ref>DOMException</ref>);

             attribute DOMString        backgroundColor setraises(<ref>DOMException</ref>);

             attribute DOMString        backgroundImage setraises(<ref>DOMException</ref>);

             attribute DOMString        backgroundPosition setraises(<ref>DOMException</ref>);

             attribute DOMString        backgroundRepeat setraises(<ref>DOMException</ref>);

             attribute DOMString        border setraises(<ref>DOMException</ref>);

             attribute DOMString        borderCollapse setraises(<ref>DOMException</ref>);

             attribute DOMString        borderColor setraises(<ref>DOMException</ref>);

             attribute DOMString        borderSpacing setraises(<ref>DOMException</ref>);

             attribute DOMString        borderStyle setraises(<ref>DOMException</ref>);

             attribute DOMString        borderTop setraises(<ref>DOMException</ref>);

             attribute DOMString        borderRight setraises(<ref>DOMException</ref>);

             attribute DOMString        borderBottom setraises(<ref>DOMException</ref>);

             attribute DOMString        borderLeft setraises(<ref>DOMException</ref>);

             attribute DOMString        borderTopColor setraises(<ref>DOMException</ref>);

             attribute DOMString        borderRightColor setraises(<ref>DOMException</ref>);

             attribute DOMString        borderBottomColor setraises(<ref>DOMException</ref>);

             attribute DOMString        borderLeftColor setraises(<ref>DOMException</ref>);

             attribute DOMString        borderTopStyle setraises(<ref>DOMException</ref>);

             attribute DOMString        borderRightStyle setraises(<ref>DOMException</ref>);

             attribute DOMString        borderBottomStyle setraises(<ref>DOMException</ref>);

             attribute DOMString        borderLeftStyle setraises(<ref>DOMException</ref>);

             attribute DOMString        borderTopWidth setraises(<ref>DOMException</ref>);

             attribute DOMString        borderRightWidth setraises(<ref>DOMException</ref>);

             attribute DOMString        borderBottomWidth setraises(<ref>DOMException</ref>);

             attribute DOMString        borderLeftWidth setraises(<ref>DOMException</ref>);

             attribute DOMString        borderWidth setraises(<ref>DOMException</ref>);

             attribute DOMString        bottom setraises(<ref>DOMException</ref>);

             attribute DOMString        captionSide setraises(<ref>DOMException</ref>);

             attribute DOMString        clear setraises(<ref>DOMException</ref>);

             attribute DOMString        clip setraises(<ref>DOMException</ref>);

             attribute DOMString        color setraises(<ref>DOMException</ref>);

             attribute DOMString        content setraises(<ref>DOMException</ref>);

             attribute DOMString        counterIncrement setraises(<ref>DOMException</ref>);

             attribute DOMString        counterReset setraises(<ref>DOMException</ref>);

             attribute DOMString        cue setraises(<ref>DOMException</ref>);

             attribute DOMString        cueAfter setraises(<ref>DOMException</ref>);

             attribute DOMString        cueBefore setraises(<ref>DOMException</ref>);

             attribute DOMString        cursor setraises(<ref>DOMException</ref>);

             attribute DOMString        direction setraises(<ref>DOMException</ref>);

             attribute DOMString        display setraises(<ref>DOMException</ref>);

             attribute DOMString        elevation setraises(<ref>DOMException</ref>);

             attribute DOMString        emptyCells setraises(<ref>DOMException</ref>);

             attribute DOMString        cssFloat setraises(<ref>DOMException</ref>);

             attribute DOMString        font setraises(<ref>DOMException</ref>);

             attribute DOMString        fontFamily setraises(<ref>DOMException</ref>);

             attribute DOMString        fontSize setraises(<ref>DOMException</ref>);

             attribute DOMString        fontSizeAdjust setraises(<ref>DOMException</ref>);

             attribute DOMString        fontStretch setraises(<ref>DOMException</ref>);

             attribute DOMString        fontStyle setraises(<ref>DOMException</ref>);

             attribute DOMString        fontVariant setraises(<ref>DOMException</ref>);

             attribute DOMString        fontWeight setraises(<ref>DOMException</ref>);

             attribute DOMString        height setraises(<ref>DOMException</ref>);

             attribute DOMString        left setraises(<ref>DOMException</ref>);

             attribute DOMString        letterSpacing setraises(<ref>DOMException</ref>);

             attribute DOMString        lineHeight setraises(<ref>DOMException</ref>);

             attribute DOMString        listStyle setraises(<ref>DOMException</ref>);

             attribute DOMString        listStyleImage setraises(<ref>DOMException</ref>);

             attribute DOMString        listStylePosition setraises(<ref>DOMException</ref>);

             attribute DOMString        listStyleType setraises(<ref>DOMException</ref>);

             attribute DOMString        margin setraises(<ref>DOMException</ref>);

             attribute DOMString        marginTop setraises(<ref>DOMException</ref>);

             attribute DOMString        marginRight setraises(<ref>DOMException</ref>);

             attribute DOMString        marginBottom setraises(<ref>DOMException</ref>);

             attribute DOMString        marginLeft setraises(<ref>DOMException</ref>);

             attribute DOMString        markerOffset setraises(<ref>DOMException</ref>);

             attribute DOMString        marks setraises(<ref>DOMException</ref>);

             attribute DOMString        maxHeight setraises(<ref>DOMException</ref>);

             attribute DOMString        maxWidth setraises(<ref>DOMException</ref>);

             attribute DOMString        minHeight setraises(<ref>DOMException</ref>);

             attribute DOMString        minWidth setraises(<ref>DOMException</ref>);

             attribute DOMString        orphans setraises(<ref>DOMException</ref>);

             attribute DOMString        outline setraises(<ref>DOMException</ref>);

             attribute DOMString        outlineColor setraises(<ref>DOMException</ref>);

             attribute DOMString        outlineStyle setraises(<ref>DOMException</ref>);

             attribute DOMString        outlineWidth setraises(<ref>DOMException</ref>);

             attribute DOMString        overflow setraises(<ref>DOMException</ref>);

             attribute DOMString        padding setraises(<ref>DOMException</ref>);

             attribute DOMString        paddingTop setraises(<ref>DOMException</ref>);

             attribute DOMString        paddingRight setraises(<ref>DOMException</ref>);

             attribute DOMString        paddingBottom setraises(<ref>DOMException</ref>);

             attribute DOMString        paddingLeft setraises(<ref>DOMException</ref>);

             attribute DOMString        page setraises(<ref>DOMException</ref>);

             attribute DOMString        pageBreakAfter setraises(<ref>DOMException</ref>);

             attribute DOMString        pageBreakBefore setraises(<ref>DOMException</ref>);

             attribute DOMString        pageBreakInside setraises(<ref>DOMException</ref>);

             attribute DOMString        pause setraises(<ref>DOMException</ref>);

             attribute DOMString        pauseAfter setraises(<ref>DOMException</ref>);

             attribute DOMString        pauseBefore setraises(<ref>DOMException</ref>);

             attribute DOMString        pitch setraises(<ref>DOMException</ref>);

             attribute DOMString        pitchRange setraises(<ref>DOMException</ref>);

             attribute DOMString        playDuring setraises(<ref>DOMException</ref>);

             attribute DOMString        position setraises(<ref>DOMException</ref>);

             attribute DOMString        quotes setraises(<ref>DOMException</ref>);

             attribute DOMString        richness setraises(<ref>DOMException</ref>);

             attribute DOMString        right setraises(<ref>DOMException</ref>);

             attribute DOMString        size setraises(<ref>DOMException</ref>);

             attribute DOMString        speak setraises(<ref>DOMException</ref>);

             attribute DOMString        speakHeader setraises(<ref>DOMException</ref>);

             attribute DOMString        speakNumeral setraises(<ref>DOMException</ref>);

             attribute DOMString        speakPunctuation setraises(<ref>DOMException</ref>);

             attribute DOMString        speechRate setraises(<ref>DOMException</ref>);

             attribute DOMString        stress setraises(<ref>DOMException</ref>);

             attribute DOMString        tableLayout setraises(<ref>DOMException</ref>);

             attribute DOMString        textAlign setraises(<ref>DOMException</ref>);

             attribute DOMString        textDecoration setraises(<ref>DOMException</ref>);

             attribute DOMString        textIndent setraises(<ref>DOMException</ref>);

             attribute DOMString        textShadow setraises(<ref>DOMException</ref>);

             attribute DOMString        textTransform setraises(<ref>DOMException</ref>);

             attribute DOMString        top setraises(<ref>DOMException</ref>);

             attribute DOMString        unicodeBidi setraises(<ref>DOMException</ref>);

             attribute DOMString        verticalAlign setraises(<ref>DOMException</ref>);

             attribute DOMString        visibility setraises(<ref>DOMException</ref>);

             attribute DOMString        voiceFamily setraises(<ref>DOMException</ref>);

             attribute DOMString        volume setraises(<ref>DOMException</ref>);

             attribute DOMString        whiteSpace setraises(<ref>DOMException</ref>);

             attribute DOMString        widows setraises(<ref>DOMException</ref>);

             attribute DOMString        width setraises(<ref>DOMException</ref>);

             attribute DOMString        wordSpacing setraises(<ref>DOMException</ref>);

             attribute DOMString        zIndex setraises(<ref>DOMException</ref>);

  };

  interface CSSStyleSheet : <ref>stylesheets::StyleSheet</ref> {
    readonly attribute <ref>CSSRule</ref>          ownerRule;
    readonly attribute <ref>CSSRuleList</ref>      cssRules;
    unsigned long      insertRule(in DOMString rule, 
                                  in unsigned long index)
                                        raises(<ref>DOMException</ref>);
    void               deleteRule(in unsigned long index)
                                        raises(<ref>DOMException</ref>);
  };

  interface ViewCSS  {
    <ref>CSSStyleDeclaration</ref> getComputedStyle(in <ref>Element</ref> elt, 
                                         in DOMString? pseudoElt);
  };

  <ref>AbstractView</ref> implements <ref>ViewCSS</ref>;

  interface DocumentCSS  {
    <ref>CSSStyleDeclaration</ref> getOverrideStyle(in <ref>Element</ref> elt, 
                                         in DOMString? pseudoElt);
  };

  <ref>Document</ref> implements <ref>DocumentCSS</ref>;

  interface DOMImplementationCSS  {
    <ref>CSSStyleSheet</ref>      createCSSStyleSheet(in DOMString title, 
                                           in DOMString media)
                                        raises(<ref>DOMException</ref>);
  };

  <ref>DOMImplementation</ref> implements <ref>DOMImplementationCSS</ref>;
};</webidl>
    <Typedef name="Document" id="::css::Document">
      <webidl>  typedef <ref>dom::Document</ref> Document;</webidl>
      <Type name="domDocument"/>
    </Typedef>
    <Typedef name="Element" id="::css::Element">
      <webidl>  typedef <ref>dom::Element</ref> Element;</webidl>
      <Type name="domElement"/>
    </Typedef>
    <Typedef name="DOMImplementation" id="::css::DOMImplementation">
      <webidl>  typedef <ref>dom::DOMImplementation</ref> DOMImplementation;</webidl>
      <Type name="domDOMImplementation"/>
    </Typedef>
    <Typedef name="DOMException" id="::css::DOMException">
      <webidl>  typedef <ref>dom::DOMException</ref> DOMException;</webidl>
      <Type name="domDOMException"/>
    </Typedef>
    <Typedef name="AbstractView" id="::css::AbstractView">
      <webidl>  typedef <ref>views::AbstractView</ref> AbstractView;</webidl>
      <Type name="viewsAbstractView"/>
    </Typedef>
    <Interface name="CSSRuleList" id="::css::CSSRuleList">
      <webidl>  interface CSSRuleList {
    readonly attribute unsigned long length;
    getter <ref>CSSRule</ref> item(in unsigned long index);
  };</webidl>
      <Attribute readonly="readonly" name="length" id="::css::CSSRuleList::length">
        <webidl>    readonly attribute unsigned long length;</webidl>
        <Type type="unsigned long"/>
      </Attribute>
      <Operation getter="getter" name="item" id="::css::CSSRuleList::item">
        <webidl>    getter <ref>CSSRule</ref> item(in unsigned long index);</webidl>
        <Type name="CSSRule"/>
        <ArgumentList>
          <Argument in="in" name="index">
            <Type type="unsigned long"/>
          </Argument>
        </ArgumentList>
      </Operation>
    </Interface>
    <Interface name="CSSRule" id="::css::CSSRule">
      <webidl>  [PrototypeRoot]
  interface CSSRule {

    const unsigned short      UNKNOWN_RULE                   = 0;
    const unsigned short      STYLE_RULE                     = 1;
    const unsigned short      CHARSET_RULE                   = 2;
    const unsigned short      IMPORT_RULE                    = 3;
    const unsigned short      MEDIA_RULE                     = 4;
    const unsigned short      FONT_FACE_RULE                 = 5;
    const unsigned short      PAGE_RULE                      = 6;

    readonly attribute unsigned short   type;
             attribute DOMString        cssText setraises(<ref>DOMException</ref>);

    readonly attribute <ref>CSSStyleSheet</ref>    parentStyleSheet;
    readonly attribute <ref>CSSRule</ref>          parentRule;
  };</webidl>
      <ExtendedAttributeList>
        <ExtendedAttribute name="PrototypeRoot"/>
      </ExtendedAttributeList>
      <Const name="UNKNOWN_RULE" value="0" id="::css::CSSRule::UNKNOWN_RULE">
        <webidl>    const unsigned short      UNKNOWN_RULE                   = 0;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="STYLE_RULE" value="1" id="::css::CSSRule::STYLE_RULE">
        <webidl>    const unsigned short      STYLE_RULE                     = 1;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CHARSET_RULE" value="2" id="::css::CSSRule::CHARSET_RULE">
        <webidl>    const unsigned short      CHARSET_RULE                   = 2;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="IMPORT_RULE" value="3" id="::css::CSSRule::IMPORT_RULE">
        <webidl>    const unsigned short      IMPORT_RULE                    = 3;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="MEDIA_RULE" value="4" id="::css::CSSRule::MEDIA_RULE">
        <webidl>    const unsigned short      MEDIA_RULE                     = 4;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="FONT_FACE_RULE" value="5" id="::css::CSSRule::FONT_FACE_RULE">
        <webidl>    const unsigned short      FONT_FACE_RULE                 = 5;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="PAGE_RULE" value="6" id="::css::CSSRule::PAGE_RULE">
        <webidl>    const unsigned short      PAGE_RULE                      = 6;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Attribute readonly="readonly" name="type" id="::css::CSSRule::type">
        <webidl>    readonly attribute unsigned short   type;</webidl>
        <Type type="unsigned short"/>
      </Attribute>
      <Attribute name="cssText" id="::css::CSSRule::cssText">
        <webidl>             attribute DOMString        cssText setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute readonly="readonly" name="parentStyleSheet" id="::css::CSSRule::parentStyleSheet">
        <webidl>    readonly attribute <ref>CSSStyleSheet</ref>    parentStyleSheet;</webidl>
        <Type name="CSSStyleSheet"/>
      </Attribute>
      <Attribute readonly="readonly" name="parentRule" id="::css::CSSRule::parentRule">
        <webidl>    readonly attribute <ref>CSSRule</ref>          parentRule;</webidl>
        <Type name="CSSRule"/>
      </Attribute>
    </Interface>
    <Interface name="CSSStyleRule" id="::css::CSSStyleRule">
      <webidl>  interface CSSStyleRule : <ref>CSSRule</ref> {
             attribute DOMString        selectorText setraises(<ref>DOMException</ref>);

    readonly attribute <ref>CSSStyleDeclaration</ref>  style;
  };</webidl>
      <InterfaceInheritance>
        <Name name="CSSRule"/>
      </InterfaceInheritance>
      <Attribute name="selectorText" id="::css::CSSStyleRule::selectorText">
        <webidl>             attribute DOMString        selectorText setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute readonly="readonly" name="style" id="::css::CSSStyleRule::style">
        <webidl>    readonly attribute <ref>CSSStyleDeclaration</ref>  style;</webidl>
        <Type name="CSSStyleDeclaration"/>
      </Attribute>
    </Interface>
    <Interface name="CSSMediaRule" id="::css::CSSMediaRule">
      <webidl>  interface CSSMediaRule : <ref>CSSRule</ref> {
    readonly attribute <ref>stylesheets::MediaList</ref>  media;
    readonly attribute <ref>CSSRuleList</ref>      cssRules;
    unsigned long      insertRule(in DOMString rule, 
                                  in unsigned long index)
                                        raises(<ref>DOMException</ref>);
    void               deleteRule(in unsigned long index)
                                        raises(<ref>DOMException</ref>);
  };</webidl>
      <InterfaceInheritance>
        <Name name="CSSRule"/>
      </InterfaceInheritance>
      <Attribute readonly="readonly" name="media" id="::css::CSSMediaRule::media">
        <webidl>    readonly attribute <ref>stylesheets::MediaList</ref>  media;</webidl>
        <Type name="stylesheetsMediaList"/>
      </Attribute>
      <Attribute readonly="readonly" name="cssRules" id="::css::CSSMediaRule::cssRules">
        <webidl>    readonly attribute <ref>CSSRuleList</ref>      cssRules;</webidl>
        <Type name="CSSRuleList"/>
      </Attribute>
      <Operation name="insertRule" id="::css::CSSMediaRule::insertRule">
        <webidl>    unsigned long      insertRule(in DOMString rule, 
                                  in unsigned long index)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="unsigned long"/>
        <ArgumentList>
          <Argument in="in" name="rule">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="index">
            <Type type="unsigned long"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="deleteRule" id="::css::CSSMediaRule::deleteRule">
        <webidl>    void               deleteRule(in unsigned long index)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="index">
            <Type type="unsigned long"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
    </Interface>
    <Interface name="CSSFontFaceRule" id="::css::CSSFontFaceRule">
      <webidl>  interface CSSFontFaceRule : <ref>CSSRule</ref> {
    readonly attribute <ref>CSSStyleDeclaration</ref>  style;
  };</webidl>
      <InterfaceInheritance>
        <Name name="CSSRule"/>
      </InterfaceInheritance>
      <Attribute readonly="readonly" name="style" id="::css::CSSFontFaceRule::style">
        <webidl>    readonly attribute <ref>CSSStyleDeclaration</ref>  style;</webidl>
        <Type name="CSSStyleDeclaration"/>
      </Attribute>
    </Interface>
    <Interface name="CSSPageRule" id="::css::CSSPageRule">
      <webidl>  interface CSSPageRule : <ref>CSSRule</ref> {
             attribute DOMString        selectorText setraises(<ref>DOMException</ref>);

    readonly attribute <ref>CSSStyleDeclaration</ref>  style;
  };</webidl>
      <InterfaceInheritance>
        <Name name="CSSRule"/>
      </InterfaceInheritance>
      <Attribute name="selectorText" id="::css::CSSPageRule::selectorText">
        <webidl>             attribute DOMString        selectorText setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute readonly="readonly" name="style" id="::css::CSSPageRule::style">
        <webidl>    readonly attribute <ref>CSSStyleDeclaration</ref>  style;</webidl>
        <Type name="CSSStyleDeclaration"/>
      </Attribute>
    </Interface>
    <Interface name="CSSImportRule" id="::css::CSSImportRule">
      <webidl>  interface CSSImportRule : <ref>CSSRule</ref> {
    readonly attribute DOMString        href;
    readonly attribute <ref>stylesheets::MediaList</ref>  media;
    readonly attribute <ref>CSSStyleSheet</ref>    styleSheet;
  };</webidl>
      <InterfaceInheritance>
        <Name name="CSSRule"/>
      </InterfaceInheritance>
      <Attribute readonly="readonly" name="href" id="::css::CSSImportRule::href">
        <webidl>    readonly attribute DOMString        href;</webidl>
        <Type type="DOMString"/>
      </Attribute>
      <Attribute readonly="readonly" name="media" id="::css::CSSImportRule::media">
        <webidl>    readonly attribute <ref>stylesheets::MediaList</ref>  media;</webidl>
        <Type name="stylesheetsMediaList"/>
      </Attribute>
      <Attribute readonly="readonly" name="styleSheet" id="::css::CSSImportRule::styleSheet">
        <webidl>    readonly attribute <ref>CSSStyleSheet</ref>    styleSheet;</webidl>
        <Type name="CSSStyleSheet"/>
      </Attribute>
    </Interface>
    <Interface name="CSSCharsetRule" id="::css::CSSCharsetRule">
      <webidl>  interface CSSCharsetRule : <ref>CSSRule</ref> {
             attribute DOMString        encoding setraises(<ref>DOMException</ref>);

  };</webidl>
      <InterfaceInheritance>
        <Name name="CSSRule"/>
      </InterfaceInheritance>
      <Attribute name="encoding" id="::css::CSSCharsetRule::encoding">
        <webidl>             attribute DOMString        encoding setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
    </Interface>
    <Interface name="CSSUnknownRule" id="::css::CSSUnknownRule">
      <webidl>  interface CSSUnknownRule : <ref>CSSRule</ref> {
  };</webidl>
      <InterfaceInheritance>
        <Name name="CSSRule"/>
      </InterfaceInheritance>
    </Interface>
    <Interface name="CSSStyleDeclaration" id="::css::CSSStyleDeclaration">
      <webidl>  interface CSSStyleDeclaration {
             attribute DOMString        cssText setraises(<ref>DOMException</ref>);

    DOMString          getPropertyValue(in DOMString propertyName);
    <ref>CSSValue</ref>           getPropertyCSSValue(in DOMString propertyName);
    DOMString          removeProperty(in DOMString propertyName)
                                        raises(<ref>DOMException</ref>);
    DOMString          getPropertyPriority(in DOMString propertyName);
    void               setProperty(in DOMString propertyName, 
                                   in DOMString value, 
                                   in DOMString? priority)
                                        raises(<ref>DOMException</ref>);
    readonly attribute unsigned long    length;
    getter DOMString item(in unsigned long index);
    readonly attribute <ref>CSSRule</ref>          parentRule;
  };</webidl>
      <Attribute name="cssText" id="::css::CSSStyleDeclaration::cssText">
        <webidl>             attribute DOMString        cssText setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Operation name="getPropertyValue" id="::css::CSSStyleDeclaration::getPropertyValue">
        <webidl>    DOMString          getPropertyValue(in DOMString propertyName);</webidl>
        <Type type="DOMString"/>
        <ArgumentList>
          <Argument in="in" name="propertyName">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="getPropertyCSSValue" id="::css::CSSStyleDeclaration::getPropertyCSSValue">
        <webidl>    <ref>CSSValue</ref>           getPropertyCSSValue(in DOMString propertyName);</webidl>
        <Type name="CSSValue"/>
        <ArgumentList>
          <Argument in="in" name="propertyName">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="removeProperty" id="::css::CSSStyleDeclaration::removeProperty">
        <webidl>    DOMString          removeProperty(in DOMString propertyName)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <ArgumentList>
          <Argument in="in" name="propertyName">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="getPropertyPriority" id="::css::CSSStyleDeclaration::getPropertyPriority">
        <webidl>    DOMString          getPropertyPriority(in DOMString propertyName);</webidl>
        <Type type="DOMString"/>
        <ArgumentList>
          <Argument in="in" name="propertyName">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="setProperty" id="::css::CSSStyleDeclaration::setProperty">
        <webidl>    void               setProperty(in DOMString propertyName, 
                                   in DOMString value, 
                                   in DOMString? priority)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="propertyName">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="value">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="priority">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Attribute readonly="readonly" name="length" id="::css::CSSStyleDeclaration::length">
        <webidl>    readonly attribute unsigned long    length;</webidl>
        <Type type="unsigned long"/>
      </Attribute>
      <Operation getter="getter" name="item" id="::css::CSSStyleDeclaration::item">
        <webidl>    getter DOMString item(in unsigned long index);</webidl>
        <Type type="DOMString"/>
        <ArgumentList>
          <Argument in="in" name="index">
            <Type type="unsigned long"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Attribute readonly="readonly" name="parentRule" id="::css::CSSStyleDeclaration::parentRule">
        <webidl>    readonly attribute <ref>CSSRule</ref>          parentRule;</webidl>
        <Type name="CSSRule"/>
      </Attribute>
    </Interface>
    <Interface name="CSSValue" id="::css::CSSValue">
      <webidl>  [PrototypeRoot]
  interface CSSValue {

    const unsigned short      CSS_INHERIT                    = 0;
    const unsigned short      CSS_PRIMITIVE_VALUE            = 1;
    const unsigned short      CSS_VALUE_LIST                 = 2;
    const unsigned short      CSS_CUSTOM                     = 3;

             attribute DOMString        cssText setraises(<ref>DOMException</ref>);

    readonly attribute unsigned short   cssValueType;
  };</webidl>
      <ExtendedAttributeList>
        <ExtendedAttribute name="PrototypeRoot"/>
      </ExtendedAttributeList>
      <Const name="CSS_INHERIT" value="0" id="::css::CSSValue::CSS_INHERIT">
        <webidl>    const unsigned short      CSS_INHERIT                    = 0;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_PRIMITIVE_VALUE" value="1" id="::css::CSSValue::CSS_PRIMITIVE_VALUE">
        <webidl>    const unsigned short      CSS_PRIMITIVE_VALUE            = 1;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_VALUE_LIST" value="2" id="::css::CSSValue::CSS_VALUE_LIST">
        <webidl>    const unsigned short      CSS_VALUE_LIST                 = 2;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_CUSTOM" value="3" id="::css::CSSValue::CSS_CUSTOM">
        <webidl>    const unsigned short      CSS_CUSTOM                     = 3;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Attribute name="cssText" id="::css::CSSValue::cssText">
        <webidl>             attribute DOMString        cssText setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute readonly="readonly" name="cssValueType" id="::css::CSSValue::cssValueType">
        <webidl>    readonly attribute unsigned short   cssValueType;</webidl>
        <Type type="unsigned short"/>
      </Attribute>
    </Interface>
    <Interface name="CSSPrimitiveValue" id="::css::CSSPrimitiveValue">
      <webidl>  interface CSSPrimitiveValue : <ref>CSSValue</ref> {

    const unsigned short      CSS_UNKNOWN                    = 0;
    const unsigned short      CSS_NUMBER                     = 1;
    const unsigned short      CSS_PERCENTAGE                 = 2;
    const unsigned short      CSS_EMS                        = 3;
    const unsigned short      CSS_EXS                        = 4;
    const unsigned short      CSS_PX                         = 5;
    const unsigned short      CSS_CM                         = 6;
    const unsigned short      CSS_MM                         = 7;
    const unsigned short      CSS_IN                         = 8;
    const unsigned short      CSS_PT                         = 9;
    const unsigned short      CSS_PC                         = 10;
    const unsigned short      CSS_DEG                        = 11;
    const unsigned short      CSS_RAD                        = 12;
    const unsigned short      CSS_GRAD                       = 13;
    const unsigned short      CSS_MS                         = 14;
    const unsigned short      CSS_S                          = 15;
    const unsigned short      CSS_HZ                         = 16;
    const unsigned short      CSS_KHZ                        = 17;
    const unsigned short      CSS_DIMENSION                  = 18;
    const unsigned short      CSS_STRING                     = 19;
    const unsigned short      CSS_URI                        = 20;
    const unsigned short      CSS_IDENT                      = 21;
    const unsigned short      CSS_ATTR                       = 22;
    const unsigned short      CSS_COUNTER                    = 23;
    const unsigned short      CSS_RECT                       = 24;
    const unsigned short      CSS_RGBCOLOR                   = 25;

    readonly attribute unsigned short   primitiveType;
    void               setFloatValue(in unsigned short unitType, 
                                     in float floatValue)
                                        raises(<ref>DOMException</ref>);
    float              getFloatValue(in unsigned short unitType)
                                        raises(<ref>DOMException</ref>);
    void               setStringValue(in unsigned short stringType, 
                                      in DOMString stringValue)
                                        raises(<ref>DOMException</ref>);
    DOMString          getStringValue()
                                        raises(<ref>DOMException</ref>);
    <ref>Counter</ref>            getCounterValue()
                                        raises(<ref>DOMException</ref>);
    <ref>Rect</ref>               getRectValue()
                                        raises(<ref>DOMException</ref>);
    <ref>RGBColor</ref>           getRGBColorValue()
                                        raises(<ref>DOMException</ref>);
  };</webidl>
      <InterfaceInheritance>
        <Name name="CSSValue"/>
      </InterfaceInheritance>
      <Const name="CSS_UNKNOWN" value="0" id="::css::CSSPrimitiveValue::CSS_UNKNOWN">
        <webidl>    const unsigned short      CSS_UNKNOWN                    = 0;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_NUMBER" value="1" id="::css::CSSPrimitiveValue::CSS_NUMBER">
        <webidl>    const unsigned short      CSS_NUMBER                     = 1;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_PERCENTAGE" value="2" id="::css::CSSPrimitiveValue::CSS_PERCENTAGE">
        <webidl>    const unsigned short      CSS_PERCENTAGE                 = 2;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_EMS" value="3" id="::css::CSSPrimitiveValue::CSS_EMS">
        <webidl>    const unsigned short      CSS_EMS                        = 3;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_EXS" value="4" id="::css::CSSPrimitiveValue::CSS_EXS">
        <webidl>    const unsigned short      CSS_EXS                        = 4;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_PX" value="5" id="::css::CSSPrimitiveValue::CSS_PX">
        <webidl>    const unsigned short      CSS_PX                         = 5;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_CM" value="6" id="::css::CSSPrimitiveValue::CSS_CM">
        <webidl>    const unsigned short      CSS_CM                         = 6;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_MM" value="7" id="::css::CSSPrimitiveValue::CSS_MM">
        <webidl>    const unsigned short      CSS_MM                         = 7;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_IN" value="8" id="::css::CSSPrimitiveValue::CSS_IN">
        <webidl>    const unsigned short      CSS_IN                         = 8;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_PT" value="9" id="::css::CSSPrimitiveValue::CSS_PT">
        <webidl>    const unsigned short      CSS_PT                         = 9;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_PC" value="10" id="::css::CSSPrimitiveValue::CSS_PC">
        <webidl>    const unsigned short      CSS_PC                         = 10;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_DEG" value="11" id="::css::CSSPrimitiveValue::CSS_DEG">
        <webidl>    const unsigned short      CSS_DEG                        = 11;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_RAD" value="12" id="::css::CSSPrimitiveValue::CSS_RAD">
        <webidl>    const unsigned short      CSS_RAD                        = 12;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_GRAD" value="13" id="::css::CSSPrimitiveValue::CSS_GRAD">
        <webidl>    const unsigned short      CSS_GRAD                       = 13;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_MS" value="14" id="::css::CSSPrimitiveValue::CSS_MS">
        <webidl>    const unsigned short      CSS_MS                         = 14;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_S" value="15" id="::css::CSSPrimitiveValue::CSS_S">
        <webidl>    const unsigned short      CSS_S                          = 15;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_HZ" value="16" id="::css::CSSPrimitiveValue::CSS_HZ">
        <webidl>    const unsigned short      CSS_HZ                         = 16;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_KHZ" value="17" id="::css::CSSPrimitiveValue::CSS_KHZ">
        <webidl>    const unsigned short      CSS_KHZ                        = 17;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_DIMENSION" value="18" id="::css::CSSPrimitiveValue::CSS_DIMENSION">
        <webidl>    const unsigned short      CSS_DIMENSION                  = 18;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_STRING" value="19" id="::css::CSSPrimitiveValue::CSS_STRING">
        <webidl>    const unsigned short      CSS_STRING                     = 19;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_URI" value="20" id="::css::CSSPrimitiveValue::CSS_URI">
        <webidl>    const unsigned short      CSS_URI                        = 20;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_IDENT" value="21" id="::css::CSSPrimitiveValue::CSS_IDENT">
        <webidl>    const unsigned short      CSS_IDENT                      = 21;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_ATTR" value="22" id="::css::CSSPrimitiveValue::CSS_ATTR">
        <webidl>    const unsigned short      CSS_ATTR                       = 22;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_COUNTER" value="23" id="::css::CSSPrimitiveValue::CSS_COUNTER">
        <webidl>    const unsigned short      CSS_COUNTER                    = 23;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_RECT" value="24" id="::css::CSSPrimitiveValue::CSS_RECT">
        <webidl>    const unsigned short      CSS_RECT                       = 24;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CSS_RGBCOLOR" value="25" id="::css::CSSPrimitiveValue::CSS_RGBCOLOR">
        <webidl>    const unsigned short      CSS_RGBCOLOR                   = 25;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Attribute readonly="readonly" name="primitiveType" id="::css::CSSPrimitiveValue::primitiveType">
        <webidl>    readonly attribute unsigned short   primitiveType;</webidl>
        <Type type="unsigned short"/>
      </Attribute>
      <Operation name="setFloatValue" id="::css::CSSPrimitiveValue::setFloatValue">
        <webidl>    void               setFloatValue(in unsigned short unitType, 
                                     in float floatValue)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="unitType">
            <Type type="unsigned short"/>
          </Argument>
          <Argument in="in" name="floatValue">
            <Type type="float"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="getFloatValue" id="::css::CSSPrimitiveValue::getFloatValue">
        <webidl>    float              getFloatValue(in unsigned short unitType)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="float"/>
        <ArgumentList>
          <Argument in="in" name="unitType">
            <Type type="unsigned short"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="setStringValue" id="::css::CSSPrimitiveValue::setStringValue">
        <webidl>    void               setStringValue(in unsigned short stringType, 
                                      in DOMString stringValue)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="stringType">
            <Type type="unsigned short"/>
          </Argument>
          <Argument in="in" name="stringValue">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="getStringValue" id="::css::CSSPrimitiveValue::getStringValue">
        <webidl>    DOMString          getStringValue()
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <ArgumentList/>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="getCounterValue" id="::css::CSSPrimitiveValue::getCounterValue">
        <webidl>    <ref>Counter</ref>            getCounterValue()
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Counter"/>
        <ArgumentList/>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="getRectValue" id="::css::CSSPrimitiveValue::getRectValue">
        <webidl>    <ref>Rect</ref>               getRectValue()
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Rect"/>
        <ArgumentList/>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="getRGBColorValue" id="::css::CSSPrimitiveValue::getRGBColorValue">
        <webidl>    <ref>RGBColor</ref>           getRGBColorValue()
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="RGBColor"/>
        <ArgumentList/>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
    </Interface>
    <Interface name="CSSValueList" id="::css::CSSValueList">
      <webidl>  interface CSSValueList : <ref>CSSValue</ref> {
    readonly attribute unsigned long length;
    getter <ref>CSSValue</ref> item(in unsigned long index);
  };</webidl>
      <InterfaceInheritance>
        <Name name="CSSValue"/>
      </InterfaceInheritance>
      <Attribute readonly="readonly" name="length" id="::css::CSSValueList::length">
        <webidl>    readonly attribute unsigned long length;</webidl>
        <Type type="unsigned long"/>
      </Attribute>
      <Operation getter="getter" name="item" id="::css::CSSValueList::item">
        <webidl>    getter <ref>CSSValue</ref> item(in unsigned long index);</webidl>
        <Type name="CSSValue"/>
        <ArgumentList>
          <Argument in="in" name="index">
            <Type type="unsigned long"/>
          </Argument>
        </ArgumentList>
      </Operation>
    </Interface>
    <Interface name="RGBColor" id="::css::RGBColor">
      <webidl>  interface RGBColor {
    readonly attribute <ref>CSSPrimitiveValue</ref>  red;
    readonly attribute <ref>CSSPrimitiveValue</ref>  green;
    readonly attribute <ref>CSSPrimitiveValue</ref>  blue;
  };</webidl>
      <Attribute readonly="readonly" name="red" id="::css::RGBColor::red">
        <webidl>    readonly attribute <ref>CSSPrimitiveValue</ref>  red;</webidl>
        <Type name="CSSPrimitiveValue"/>
      </Attribute>
      <Attribute readonly="readonly" name="green" id="::css::RGBColor::green">
        <webidl>    readonly attribute <ref>CSSPrimitiveValue</ref>  green;</webidl>
        <Type name="CSSPrimitiveValue"/>
      </Attribute>
      <Attribute readonly="readonly" name="blue" id="::css::RGBColor::blue">
        <webidl>    readonly attribute <ref>CSSPrimitiveValue</ref>  blue;</webidl>
        <Type name="CSSPrimitiveValue"/>
      </Attribute>
    </Interface>
    <Interface name="Rect" id="::css::Rect">
      <webidl>  interface Rect {
    readonly attribute <ref>CSSPrimitiveValue</ref>  top;
    readonly attribute <ref>CSSPrimitiveValue</ref>  right;
    readonly attribute <ref>CSSPrimitiveValue</ref>  bottom;
    readonly attribute <ref>CSSPrimitiveValue</ref>  left;
  };</webidl>
      <Attribute readonly="readonly" name="top" id="::css::Rect::top">
        <webidl>    readonly attribute <ref>CSSPrimitiveValue</ref>  top;</webidl>
        <Type name="CSSPrimitiveValue"/>
      </Attribute>
      <Attribute readonly="readonly" name="right" id="::css::Rect::right">
        <webidl>    readonly attribute <ref>CSSPrimitiveValue</ref>  right;</webidl>
        <Type name="CSSPrimitiveValue"/>
      </Attribute>
      <Attribute readonly="readonly" name="bottom" id="::css::Rect::bottom">
        <webidl>    readonly attribute <ref>CSSPrimitiveValue</ref>  bottom;</webidl>
        <Type name="CSSPrimitiveValue"/>
      </Attribute>
      <Attribute readonly="readonly" name="left" id="::css::Rect::left">
        <webidl>    readonly attribute <ref>CSSPrimitiveValue</ref>  left;</webidl>
        <Type name="CSSPrimitiveValue"/>
      </Attribute>
    </Interface>
    <Interface name="Counter" id="::css::Counter">
      <webidl>  interface Counter {
    readonly attribute DOMString        identifier;
    readonly attribute DOMString        listStyle;
    readonly attribute DOMString        separator;
  };</webidl>
      <Attribute readonly="readonly" name="identifier" id="::css::Counter::identifier">
        <webidl>    readonly attribute DOMString        identifier;</webidl>
        <Type type="DOMString"/>
      </Attribute>
      <Attribute readonly="readonly" name="listStyle" id="::css::Counter::listStyle">
        <webidl>    readonly attribute DOMString        listStyle;</webidl>
        <Type type="DOMString"/>
      </Attribute>
      <Attribute readonly="readonly" name="separator" id="::css::Counter::separator">
        <webidl>    readonly attribute DOMString        separator;</webidl>
        <Type type="DOMString"/>
      </Attribute>
    </Interface>
    <Interface name="ElementCSSInlineStyle" id="::css::ElementCSSInlineStyle">
      <webidl>  interface ElementCSSInlineStyle {
    readonly attribute <ref>CSSStyleDeclaration</ref>  style;
  };</webidl>
      <Attribute readonly="readonly" name="style" id="::css::ElementCSSInlineStyle::style">
        <webidl>    readonly attribute <ref>CSSStyleDeclaration</ref>  style;</webidl>
        <Type name="CSSStyleDeclaration"/>
      </Attribute>
    </Interface>
    <Interface name="CSS2Properties" id="::css::CSS2Properties">
      <webidl>  interface CSS2Properties {
             attribute DOMString        azimuth setraises(<ref>DOMException</ref>);

             attribute DOMString        background setraises(<ref>DOMException</ref>);

             attribute DOMString        backgroundAttachment setraises(<ref>DOMException</ref>);

             attribute DOMString        backgroundColor setraises(<ref>DOMException</ref>);

             attribute DOMString        backgroundImage setraises(<ref>DOMException</ref>);

             attribute DOMString        backgroundPosition setraises(<ref>DOMException</ref>);

             attribute DOMString        backgroundRepeat setraises(<ref>DOMException</ref>);

             attribute DOMString        border setraises(<ref>DOMException</ref>);

             attribute DOMString        borderCollapse setraises(<ref>DOMException</ref>);

             attribute DOMString        borderColor setraises(<ref>DOMException</ref>);

             attribute DOMString        borderSpacing setraises(<ref>DOMException</ref>);

             attribute DOMString        borderStyle setraises(<ref>DOMException</ref>);

             attribute DOMString        borderTop setraises(<ref>DOMException</ref>);

             attribute DOMString        borderRight setraises(<ref>DOMException</ref>);

             attribute DOMString        borderBottom setraises(<ref>DOMException</ref>);

             attribute DOMString        borderLeft setraises(<ref>DOMException</ref>);

             attribute DOMString        borderTopColor setraises(<ref>DOMException</ref>);

             attribute DOMString        borderRightColor setraises(<ref>DOMException</ref>);

             attribute DOMString        borderBottomColor setraises(<ref>DOMException</ref>);

             attribute DOMString        borderLeftColor setraises(<ref>DOMException</ref>);

             attribute DOMString        borderTopStyle setraises(<ref>DOMException</ref>);

             attribute DOMString        borderRightStyle setraises(<ref>DOMException</ref>);

             attribute DOMString        borderBottomStyle setraises(<ref>DOMException</ref>);

             attribute DOMString        borderLeftStyle setraises(<ref>DOMException</ref>);

             attribute DOMString        borderTopWidth setraises(<ref>DOMException</ref>);

             attribute DOMString        borderRightWidth setraises(<ref>DOMException</ref>);

             attribute DOMString        borderBottomWidth setraises(<ref>DOMException</ref>);

             attribute DOMString        borderLeftWidth setraises(<ref>DOMException</ref>);

             attribute DOMString        borderWidth setraises(<ref>DOMException</ref>);

             attribute DOMString        bottom setraises(<ref>DOMException</ref>);

             attribute DOMString        captionSide setraises(<ref>DOMException</ref>);

             attribute DOMString        clear setraises(<ref>DOMException</ref>);

             attribute DOMString        clip setraises(<ref>DOMException</ref>);

             attribute DOMString        color setraises(<ref>DOMException</ref>);

             attribute DOMString        content setraises(<ref>DOMException</ref>);

             attribute DOMString        counterIncrement setraises(<ref>DOMException</ref>);

             attribute DOMString        counterReset setraises(<ref>DOMException</ref>);

             attribute DOMString        cue setraises(<ref>DOMException</ref>);

             attribute DOMString        cueAfter setraises(<ref>DOMException</ref>);

             attribute DOMString        cueBefore setraises(<ref>DOMException</ref>);

             attribute DOMString        cursor setraises(<ref>DOMException</ref>);

             attribute DOMString        direction setraises(<ref>DOMException</ref>);

             attribute DOMString        display setraises(<ref>DOMException</ref>);

             attribute DOMString        elevation setraises(<ref>DOMException</ref>);

             attribute DOMString        emptyCells setraises(<ref>DOMException</ref>);

             attribute DOMString        cssFloat setraises(<ref>DOMException</ref>);

             attribute DOMString        font setraises(<ref>DOMException</ref>);

             attribute DOMString        fontFamily setraises(<ref>DOMException</ref>);

             attribute DOMString        fontSize setraises(<ref>DOMException</ref>);

             attribute DOMString        fontSizeAdjust setraises(<ref>DOMException</ref>);

             attribute DOMString        fontStretch setraises(<ref>DOMException</ref>);

             attribute DOMString        fontStyle setraises(<ref>DOMException</ref>);

             attribute DOMString        fontVariant setraises(<ref>DOMException</ref>);

             attribute DOMString        fontWeight setraises(<ref>DOMException</ref>);

             attribute DOMString        height setraises(<ref>DOMException</ref>);

             attribute DOMString        left setraises(<ref>DOMException</ref>);

             attribute DOMString        letterSpacing setraises(<ref>DOMException</ref>);

             attribute DOMString        lineHeight setraises(<ref>DOMException</ref>);

             attribute DOMString        listStyle setraises(<ref>DOMException</ref>);

             attribute DOMString        listStyleImage setraises(<ref>DOMException</ref>);

             attribute DOMString        listStylePosition setraises(<ref>DOMException</ref>);

             attribute DOMString        listStyleType setraises(<ref>DOMException</ref>);

             attribute DOMString        margin setraises(<ref>DOMException</ref>);

             attribute DOMString        marginTop setraises(<ref>DOMException</ref>);

             attribute DOMString        marginRight setraises(<ref>DOMException</ref>);

             attribute DOMString        marginBottom setraises(<ref>DOMException</ref>);

             attribute DOMString        marginLeft setraises(<ref>DOMException</ref>);

             attribute DOMString        markerOffset setraises(<ref>DOMException</ref>);

             attribute DOMString        marks setraises(<ref>DOMException</ref>);

             attribute DOMString        maxHeight setraises(<ref>DOMException</ref>);

             attribute DOMString        maxWidth setraises(<ref>DOMException</ref>);

             attribute DOMString        minHeight setraises(<ref>DOMException</ref>);

             attribute DOMString        minWidth setraises(<ref>DOMException</ref>);

             attribute DOMString        orphans setraises(<ref>DOMException</ref>);

             attribute DOMString        outline setraises(<ref>DOMException</ref>);

             attribute DOMString        outlineColor setraises(<ref>DOMException</ref>);

             attribute DOMString        outlineStyle setraises(<ref>DOMException</ref>);

             attribute DOMString        outlineWidth setraises(<ref>DOMException</ref>);

             attribute DOMString        overflow setraises(<ref>DOMException</ref>);

             attribute DOMString        padding setraises(<ref>DOMException</ref>);

             attribute DOMString        paddingTop setraises(<ref>DOMException</ref>);

             attribute DOMString        paddingRight setraises(<ref>DOMException</ref>);

             attribute DOMString        paddingBottom setraises(<ref>DOMException</ref>);

             attribute DOMString        paddingLeft setraises(<ref>DOMException</ref>);

             attribute DOMString        page setraises(<ref>DOMException</ref>);

             attribute DOMString        pageBreakAfter setraises(<ref>DOMException</ref>);

             attribute DOMString        pageBreakBefore setraises(<ref>DOMException</ref>);

             attribute DOMString        pageBreakInside setraises(<ref>DOMException</ref>);

             attribute DOMString        pause setraises(<ref>DOMException</ref>);

             attribute DOMString        pauseAfter setraises(<ref>DOMException</ref>);

             attribute DOMString        pauseBefore setraises(<ref>DOMException</ref>);

             attribute DOMString        pitch setraises(<ref>DOMException</ref>);

             attribute DOMString        pitchRange setraises(<ref>DOMException</ref>);

             attribute DOMString        playDuring setraises(<ref>DOMException</ref>);

             attribute DOMString        position setraises(<ref>DOMException</ref>);

             attribute DOMString        quotes setraises(<ref>DOMException</ref>);

             attribute DOMString        richness setraises(<ref>DOMException</ref>);

             attribute DOMString        right setraises(<ref>DOMException</ref>);

             attribute DOMString        size setraises(<ref>DOMException</ref>);

             attribute DOMString        speak setraises(<ref>DOMException</ref>);

             attribute DOMString        speakHeader setraises(<ref>DOMException</ref>);

             attribute DOMString        speakNumeral setraises(<ref>DOMException</ref>);

             attribute DOMString        speakPunctuation setraises(<ref>DOMException</ref>);

             attribute DOMString        speechRate setraises(<ref>DOMException</ref>);

             attribute DOMString        stress setraises(<ref>DOMException</ref>);

             attribute DOMString        tableLayout setraises(<ref>DOMException</ref>);

             attribute DOMString        textAlign setraises(<ref>DOMException</ref>);

             attribute DOMString        textDecoration setraises(<ref>DOMException</ref>);

             attribute DOMString        textIndent setraises(<ref>DOMException</ref>);

             attribute DOMString        textShadow setraises(<ref>DOMException</ref>);

             attribute DOMString        textTransform setraises(<ref>DOMException</ref>);

             attribute DOMString        top setraises(<ref>DOMException</ref>);

             attribute DOMString        unicodeBidi setraises(<ref>DOMException</ref>);

             attribute DOMString        verticalAlign setraises(<ref>DOMException</ref>);

             attribute DOMString        visibility setraises(<ref>DOMException</ref>);

             attribute DOMString        voiceFamily setraises(<ref>DOMException</ref>);

             attribute DOMString        volume setraises(<ref>DOMException</ref>);

             attribute DOMString        whiteSpace setraises(<ref>DOMException</ref>);

             attribute DOMString        widows setraises(<ref>DOMException</ref>);

             attribute DOMString        width setraises(<ref>DOMException</ref>);

             attribute DOMString        wordSpacing setraises(<ref>DOMException</ref>);

             attribute DOMString        zIndex setraises(<ref>DOMException</ref>);

  };</webidl>
      <Attribute name="azimuth" id="::css::CSS2Properties::azimuth">
        <webidl>             attribute DOMString        azimuth setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="background" id="::css::CSS2Properties::background">
        <webidl>             attribute DOMString        background setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="backgroundAttachment" id="::css::CSS2Properties::backgroundAttachment">
        <webidl>             attribute DOMString        backgroundAttachment setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="backgroundColor" id="::css::CSS2Properties::backgroundColor">
        <webidl>             attribute DOMString        backgroundColor setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="backgroundImage" id="::css::CSS2Properties::backgroundImage">
        <webidl>             attribute DOMString        backgroundImage setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="backgroundPosition" id="::css::CSS2Properties::backgroundPosition">
        <webidl>             attribute DOMString        backgroundPosition setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="backgroundRepeat" id="::css::CSS2Properties::backgroundRepeat">
        <webidl>             attribute DOMString        backgroundRepeat setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="border" id="::css::CSS2Properties::border">
        <webidl>             attribute DOMString        border setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="borderCollapse" id="::css::CSS2Properties::borderCollapse">
        <webidl>             attribute DOMString        borderCollapse setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="borderColor" id="::css::CSS2Properties::borderColor">
        <webidl>             attribute DOMString        borderColor setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="borderSpacing" id="::css::CSS2Properties::borderSpacing">
        <webidl>             attribute DOMString        borderSpacing setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="borderStyle" id="::css::CSS2Properties::borderStyle">
        <webidl>             attribute DOMString        borderStyle setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="borderTop" id="::css::CSS2Properties::borderTop">
        <webidl>             attribute DOMString        borderTop setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="borderRight" id="::css::CSS2Properties::borderRight">
        <webidl>             attribute DOMString        borderRight setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="borderBottom" id="::css::CSS2Properties::borderBottom">
        <webidl>             attribute DOMString        borderBottom setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="borderLeft" id="::css::CSS2Properties::borderLeft">
        <webidl>             attribute DOMString        borderLeft setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="borderTopColor" id="::css::CSS2Properties::borderTopColor">
        <webidl>             attribute DOMString        borderTopColor setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="borderRightColor" id="::css::CSS2Properties::borderRightColor">
        <webidl>             attribute DOMString        borderRightColor setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="borderBottomColor" id="::css::CSS2Properties::borderBottomColor">
        <webidl>             attribute DOMString        borderBottomColor setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="borderLeftColor" id="::css::CSS2Properties::borderLeftColor">
        <webidl>             attribute DOMString        borderLeftColor setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="borderTopStyle" id="::css::CSS2Properties::borderTopStyle">
        <webidl>             attribute DOMString        borderTopStyle setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="borderRightStyle" id="::css::CSS2Properties::borderRightStyle">
        <webidl>             attribute DOMString        borderRightStyle setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="borderBottomStyle" id="::css::CSS2Properties::borderBottomStyle">
        <webidl>             attribute DOMString        borderBottomStyle setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="borderLeftStyle" id="::css::CSS2Properties::borderLeftStyle">
        <webidl>             attribute DOMString        borderLeftStyle setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="borderTopWidth" id="::css::CSS2Properties::borderTopWidth">
        <webidl>             attribute DOMString        borderTopWidth setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="borderRightWidth" id="::css::CSS2Properties::borderRightWidth">
        <webidl>             attribute DOMString        borderRightWidth setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="borderBottomWidth" id="::css::CSS2Properties::borderBottomWidth">
        <webidl>             attribute DOMString        borderBottomWidth setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="borderLeftWidth" id="::css::CSS2Properties::borderLeftWidth">
        <webidl>             attribute DOMString        borderLeftWidth setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="borderWidth" id="::css::CSS2Properties::borderWidth">
        <webidl>             attribute DOMString        borderWidth setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="bottom" id="::css::CSS2Properties::bottom">
        <webidl>             attribute DOMString        bottom setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="captionSide" id="::css::CSS2Properties::captionSide">
        <webidl>             attribute DOMString        captionSide setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="clear" id="::css::CSS2Properties::clear">
        <webidl>             attribute DOMString        clear setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="clip" id="::css::CSS2Properties::clip">
        <webidl>             attribute DOMString        clip setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="color" id="::css::CSS2Properties::color">
        <webidl>             attribute DOMString        color setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="content" id="::css::CSS2Properties::content">
        <webidl>             attribute DOMString        content setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="counterIncrement" id="::css::CSS2Properties::counterIncrement">
        <webidl>             attribute DOMString        counterIncrement setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="counterReset" id="::css::CSS2Properties::counterReset">
        <webidl>             attribute DOMString        counterReset setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="cue" id="::css::CSS2Properties::cue">
        <webidl>             attribute DOMString        cue setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="cueAfter" id="::css::CSS2Properties::cueAfter">
        <webidl>             attribute DOMString        cueAfter setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="cueBefore" id="::css::CSS2Properties::cueBefore">
        <webidl>             attribute DOMString        cueBefore setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="cursor" id="::css::CSS2Properties::cursor">
        <webidl>             attribute DOMString        cursor setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="direction" id="::css::CSS2Properties::direction">
        <webidl>             attribute DOMString        direction setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="display" id="::css::CSS2Properties::display">
        <webidl>             attribute DOMString        display setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="elevation" id="::css::CSS2Properties::elevation">
        <webidl>             attribute DOMString        elevation setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="emptyCells" id="::css::CSS2Properties::emptyCells">
        <webidl>             attribute DOMString        emptyCells setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="cssFloat" id="::css::CSS2Properties::cssFloat">
        <webidl>             attribute DOMString        cssFloat setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="font" id="::css::CSS2Properties::font">
        <webidl>             attribute DOMString        font setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="fontFamily" id="::css::CSS2Properties::fontFamily">
        <webidl>             attribute DOMString        fontFamily setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="fontSize" id="::css::CSS2Properties::fontSize">
        <webidl>             attribute DOMString        fontSize setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="fontSizeAdjust" id="::css::CSS2Properties::fontSizeAdjust">
        <webidl>             attribute DOMString        fontSizeAdjust setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="fontStretch" id="::css::CSS2Properties::fontStretch">
        <webidl>             attribute DOMString        fontStretch setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="fontStyle" id="::css::CSS2Properties::fontStyle">
        <webidl>             attribute DOMString        fontStyle setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="fontVariant" id="::css::CSS2Properties::fontVariant">
        <webidl>             attribute DOMString        fontVariant setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="fontWeight" id="::css::CSS2Properties::fontWeight">
        <webidl>             attribute DOMString        fontWeight setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="height" id="::css::CSS2Properties::height">
        <webidl>             attribute DOMString        height setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="left" id="::css::CSS2Properties::left">
        <webidl>             attribute DOMString        left setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="letterSpacing" id="::css::CSS2Properties::letterSpacing">
        <webidl>             attribute DOMString        letterSpacing setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="lineHeight" id="::css::CSS2Properties::lineHeight">
        <webidl>             attribute DOMString        lineHeight setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="listStyle" id="::css::CSS2Properties::listStyle">
        <webidl>             attribute DOMString        listStyle setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="listStyleImage" id="::css::CSS2Properties::listStyleImage">
        <webidl>             attribute DOMString        listStyleImage setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="listStylePosition" id="::css::CSS2Properties::listStylePosition">
        <webidl>             attribute DOMString        listStylePosition setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="listStyleType" id="::css::CSS2Properties::listStyleType">
        <webidl>             attribute DOMString        listStyleType setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="margin" id="::css::CSS2Properties::margin">
        <webidl>             attribute DOMString        margin setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="marginTop" id="::css::CSS2Properties::marginTop">
        <webidl>             attribute DOMString        marginTop setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="marginRight" id="::css::CSS2Properties::marginRight">
        <webidl>             attribute DOMString        marginRight setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="marginBottom" id="::css::CSS2Properties::marginBottom">
        <webidl>             attribute DOMString        marginBottom setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="marginLeft" id="::css::CSS2Properties::marginLeft">
        <webidl>             attribute DOMString        marginLeft setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="markerOffset" id="::css::CSS2Properties::markerOffset">
        <webidl>             attribute DOMString        markerOffset setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="marks" id="::css::CSS2Properties::marks">
        <webidl>             attribute DOMString        marks setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="maxHeight" id="::css::CSS2Properties::maxHeight">
        <webidl>             attribute DOMString        maxHeight setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="maxWidth" id="::css::CSS2Properties::maxWidth">
        <webidl>             attribute DOMString        maxWidth setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="minHeight" id="::css::CSS2Properties::minHeight">
        <webidl>             attribute DOMString        minHeight setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="minWidth" id="::css::CSS2Properties::minWidth">
        <webidl>             attribute DOMString        minWidth setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="orphans" id="::css::CSS2Properties::orphans">
        <webidl>             attribute DOMString        orphans setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="outline" id="::css::CSS2Properties::outline">
        <webidl>             attribute DOMString        outline setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="outlineColor" id="::css::CSS2Properties::outlineColor">
        <webidl>             attribute DOMString        outlineColor setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="outlineStyle" id="::css::CSS2Properties::outlineStyle">
        <webidl>             attribute DOMString        outlineStyle setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="outlineWidth" id="::css::CSS2Properties::outlineWidth">
        <webidl>             attribute DOMString        outlineWidth setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="overflow" id="::css::CSS2Properties::overflow">
        <webidl>             attribute DOMString        overflow setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="padding" id="::css::CSS2Properties::padding">
        <webidl>             attribute DOMString        padding setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="paddingTop" id="::css::CSS2Properties::paddingTop">
        <webidl>             attribute DOMString        paddingTop setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="paddingRight" id="::css::CSS2Properties::paddingRight">
        <webidl>             attribute DOMString        paddingRight setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="paddingBottom" id="::css::CSS2Properties::paddingBottom">
        <webidl>             attribute DOMString        paddingBottom setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="paddingLeft" id="::css::CSS2Properties::paddingLeft">
        <webidl>             attribute DOMString        paddingLeft setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="page" id="::css::CSS2Properties::page">
        <webidl>             attribute DOMString        page setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="pageBreakAfter" id="::css::CSS2Properties::pageBreakAfter">
        <webidl>             attribute DOMString        pageBreakAfter setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="pageBreakBefore" id="::css::CSS2Properties::pageBreakBefore">
        <webidl>             attribute DOMString        pageBreakBefore setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="pageBreakInside" id="::css::CSS2Properties::pageBreakInside">
        <webidl>             attribute DOMString        pageBreakInside setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="pause" id="::css::CSS2Properties::pause">
        <webidl>             attribute DOMString        pause setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="pauseAfter" id="::css::CSS2Properties::pauseAfter">
        <webidl>             attribute DOMString        pauseAfter setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="pauseBefore" id="::css::CSS2Properties::pauseBefore">
        <webidl>             attribute DOMString        pauseBefore setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="pitch" id="::css::CSS2Properties::pitch">
        <webidl>             attribute DOMString        pitch setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="pitchRange" id="::css::CSS2Properties::pitchRange">
        <webidl>             attribute DOMString        pitchRange setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="playDuring" id="::css::CSS2Properties::playDuring">
        <webidl>             attribute DOMString        playDuring setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="position" id="::css::CSS2Properties::position">
        <webidl>             attribute DOMString        position setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="quotes" id="::css::CSS2Properties::quotes">
        <webidl>             attribute DOMString        quotes setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="richness" id="::css::CSS2Properties::richness">
        <webidl>             attribute DOMString        richness setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="right" id="::css::CSS2Properties::right">
        <webidl>             attribute DOMString        right setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="size" id="::css::CSS2Properties::size">
        <webidl>             attribute DOMString        size setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="speak" id="::css::CSS2Properties::speak">
        <webidl>             attribute DOMString        speak setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="speakHeader" id="::css::CSS2Properties::speakHeader">
        <webidl>             attribute DOMString        speakHeader setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="speakNumeral" id="::css::CSS2Properties::speakNumeral">
        <webidl>             attribute DOMString        speakNumeral setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="speakPunctuation" id="::css::CSS2Properties::speakPunctuation">
        <webidl>             attribute DOMString        speakPunctuation setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="speechRate" id="::css::CSS2Properties::speechRate">
        <webidl>             attribute DOMString        speechRate setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="stress" id="::css::CSS2Properties::stress">
        <webidl>             attribute DOMString        stress setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="tableLayout" id="::css::CSS2Properties::tableLayout">
        <webidl>             attribute DOMString        tableLayout setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="textAlign" id="::css::CSS2Properties::textAlign">
        <webidl>             attribute DOMString        textAlign setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="textDecoration" id="::css::CSS2Properties::textDecoration">
        <webidl>             attribute DOMString        textDecoration setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="textIndent" id="::css::CSS2Properties::textIndent">
        <webidl>             attribute DOMString        textIndent setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="textShadow" id="::css::CSS2Properties::textShadow">
        <webidl>             attribute DOMString        textShadow setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="textTransform" id="::css::CSS2Properties::textTransform">
        <webidl>             attribute DOMString        textTransform setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="top" id="::css::CSS2Properties::top">
        <webidl>             attribute DOMString        top setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="unicodeBidi" id="::css::CSS2Properties::unicodeBidi">
        <webidl>             attribute DOMString        unicodeBidi setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="verticalAlign" id="::css::CSS2Properties::verticalAlign">
        <webidl>             attribute DOMString        verticalAlign setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="visibility" id="::css::CSS2Properties::visibility">
        <webidl>             attribute DOMString        visibility setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="voiceFamily" id="::css::CSS2Properties::voiceFamily">
        <webidl>             attribute DOMString        voiceFamily setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="volume" id="::css::CSS2Properties::volume">
        <webidl>             attribute DOMString        volume setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="whiteSpace" id="::css::CSS2Properties::whiteSpace">
        <webidl>             attribute DOMString        whiteSpace setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="widows" id="::css::CSS2Properties::widows">
        <webidl>             attribute DOMString        widows setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="width" id="::css::CSS2Properties::width">
        <webidl>             attribute DOMString        width setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="wordSpacing" id="::css::CSS2Properties::wordSpacing">
        <webidl>             attribute DOMString        wordSpacing setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="zIndex" id="::css::CSS2Properties::zIndex">
        <webidl>             attribute DOMString        zIndex setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
    </Interface>
    <Interface name="CSSStyleSheet" id="::css::CSSStyleSheet">
      <webidl>  interface CSSStyleSheet : <ref>stylesheets::StyleSheet</ref> {
    readonly attribute <ref>CSSRule</ref>          ownerRule;
    readonly attribute <ref>CSSRuleList</ref>      cssRules;
    unsigned long      insertRule(in DOMString rule, 
                                  in unsigned long index)
                                        raises(<ref>DOMException</ref>);
    void               deleteRule(in unsigned long index)
                                        raises(<ref>DOMException</ref>);
  };</webidl>
      <InterfaceInheritance>
        <Name name="stylesheetsStyleSheet"/>
      </InterfaceInheritance>
      <Attribute readonly="readonly" name="ownerRule" id="::css::CSSStyleSheet::ownerRule">
        <webidl>    readonly attribute <ref>CSSRule</ref>          ownerRule;</webidl>
        <Type name="CSSRule"/>
      </Attribute>
      <Attribute readonly="readonly" name="cssRules" id="::css::CSSStyleSheet::cssRules">
        <webidl>    readonly attribute <ref>CSSRuleList</ref>      cssRules;</webidl>
        <Type name="CSSRuleList"/>
      </Attribute>
      <Operation name="insertRule" id="::css::CSSStyleSheet::insertRule">
        <webidl>    unsigned long      insertRule(in DOMString rule, 
                                  in unsigned long index)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="unsigned long"/>
        <ArgumentList>
          <Argument in="in" name="rule">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="index">
            <Type type="unsigned long"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="deleteRule" id="::css::CSSStyleSheet::deleteRule">
        <webidl>    void               deleteRule(in unsigned long index)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="index">
            <Type type="unsigned long"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
    </Interface>
    <Interface name="ViewCSS" id="::css::ViewCSS">
      <webidl>  interface ViewCSS  {
    <ref>CSSStyleDeclaration</ref> getComputedStyle(in <ref>Element</ref> elt, 
                                         in DOMString? pseudoElt);
  };</webidl>
      <Operation name="getComputedStyle" id="::css::ViewCSS::getComputedStyle">
        <webidl>    <ref>CSSStyleDeclaration</ref> getComputedStyle(in <ref>Element</ref> elt, 
                                         in DOMString? pseudoElt);</webidl>
        <Type name="CSSStyleDeclaration"/>
        <ArgumentList>
          <Argument in="in" name="elt">
            <Type name="Element"/>
          </Argument>
          <Argument in="in" name="pseudoElt">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
        </ArgumentList>
      </Operation>
    </Interface>
    <Implements name1="AbstractView" name2="ViewCSS">
      <webidl>  <ref>AbstractView</ref> implements <ref>ViewCSS</ref>;</webidl>
    </Implements>
    <Interface name="DocumentCSS" id="::css::DocumentCSS">
      <webidl>  interface DocumentCSS  {
    <ref>CSSStyleDeclaration</ref> getOverrideStyle(in <ref>Element</ref> elt, 
                                         in DOMString? pseudoElt);
  };</webidl>
      <Operation name="getOverrideStyle" id="::css::DocumentCSS::getOverrideStyle">
        <webidl>    <ref>CSSStyleDeclaration</ref> getOverrideStyle(in <ref>Element</ref> elt, 
                                         in DOMString? pseudoElt);</webidl>
        <Type name="CSSStyleDeclaration"/>
        <ArgumentList>
          <Argument in="in" name="elt">
            <Type name="Element"/>
          </Argument>
          <Argument in="in" name="pseudoElt">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
        </ArgumentList>
      </Operation>
    </Interface>
    <Implements name1="Document" name2="DocumentCSS">
      <webidl>  <ref>Document</ref> implements <ref>DocumentCSS</ref>;</webidl>
    </Implements>
    <Interface name="DOMImplementationCSS" id="::css::DOMImplementationCSS">
      <webidl>  interface DOMImplementationCSS  {
    <ref>CSSStyleSheet</ref>      createCSSStyleSheet(in DOMString title, 
                                           in DOMString media)
                                        raises(<ref>DOMException</ref>);
  };</webidl>
      <Operation name="createCSSStyleSheet" id="::css::DOMImplementationCSS::createCSSStyleSheet">
        <webidl>    <ref>CSSStyleSheet</ref>      createCSSStyleSheet(in DOMString title, 
                                           in DOMString media)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="CSSStyleSheet"/>
        <ArgumentList>
          <Argument in="in" name="title">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="media">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
    </Interface>
    <Implements name1="DOMImplementation" name2="DOMImplementationCSS">
      <webidl>  <ref>DOMImplementation</ref> implements <ref>DOMImplementationCSS</ref>;</webidl>
    </Implements>
  </Module>
</Definitions>
