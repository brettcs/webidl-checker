<Definitions>
  <Module name="dom" id="::dom">
    <webidl>module dom {

  typedef   unsigned long long DOMTimeStamp;

  typedef   any DOMUserData;

  typedef   object DOMObject;

  exception DOMException {

    const unsigned short INDEX_SIZE_ERR              = 1;
    const unsigned short DOMSTRING_SIZE_ERR          = 2;
    const unsigned short HIERARCHY_REQUEST_ERR       = 3;
    const unsigned short WRONG_DOCUMENT_ERR          = 4;
    const unsigned short INVALID_CHARACTER_ERR       = 5;
    const unsigned short NO_DATA_ALLOWED_ERR         = 6;
    const unsigned short NO_MODIFICATION_ALLOWED_ERR = 7;
    const unsigned short NOT_FOUND_ERR               = 8;
    const unsigned short NOT_SUPPORTED_ERR           = 9;
    const unsigned short INUSE_ATTRIBUTE_ERR         = 10;
    const unsigned short INVALID_STATE_ERR           = 11;
    const unsigned short SYNTAX_ERR                  = 12;
    const unsigned short INVALID_MODIFICATION_ERR    = 13;
    const unsigned short NAMESPACE_ERR               = 14;
    const unsigned short INVALID_ACCESS_ERR          = 15;
    const unsigned short VALIDATION_ERR              = 16;
    const unsigned short TYPE_MISMATCH_ERR           = 17;

    unsigned short code;
  };

  interface DOMStringList {
    getter DOMString? item(in unsigned long index);
    readonly attribute unsigned long length;
    boolean contains(in DOMString? str);
  };

  interface NameList {
    DOMString?          getName(in unsigned long index);
    DOMString?          getNamespaceURI(in unsigned long index);
    readonly attribute unsigned long   length;
    boolean            contains(in DOMString? str);
    boolean            containsNS(in DOMString? namespaceURI, 
                                  in DOMString? name);
  };

  interface DOMImplementationList {
    getter <ref>DOMImplementation</ref> item(in unsigned long index);
    readonly attribute unsigned long length;
  };

  interface DOMImplementationSource {
    <ref>DOMImplementation</ref>  getDOMImplementation(in DOMString features);
    <ref>DOMImplementationList</ref> getDOMImplementationList(in DOMString features);
  };

  interface DOMImplementation {
    boolean            hasFeature(in DOMString feature, 
                                  in DOMString version);
    <ref>DocumentType</ref>       createDocumentType(in DOMString qualifiedName, 
                                          in DOMString? publicId, 
                                          in DOMString? systemId)
                                        raises(<ref>DOMException</ref>);
    <ref>Document</ref>           createDocument(in DOMString? namespaceURI, 
                                      in DOMString? qualifiedName, 
                                      in <ref>DocumentType</ref> doctype)
                                        raises(<ref>DOMException</ref>);
    <ref>DOMObject</ref>          getFeature(in DOMString feature, 
                                  in DOMString version);
  };

  [PrototypeRoot]
  interface Node {

    const unsigned short ELEMENT_NODE                   = 1;
    const unsigned short ATTRIBUTE_NODE                 = 2;
    const unsigned short TEXT_NODE                      = 3;
    const unsigned short CDATA_SECTION_NODE             = 4;
    const unsigned short ENTITY_REFERENCE_NODE          = 5;
    const unsigned short ENTITY_NODE                    = 6;
    const unsigned short PROCESSING_INSTRUCTION_NODE    = 7;
    const unsigned short COMMENT_NODE                   = 8;
    const unsigned short DOCUMENT_NODE                  = 9;
    const unsigned short DOCUMENT_TYPE_NODE             = 10;
    const unsigned short DOCUMENT_FRAGMENT_NODE         = 11;
    const unsigned short NOTATION_NODE                  = 12;

    readonly attribute DOMString       nodeName;
             attribute DOMString?      nodeValue getraises(<ref>DOMException</ref>) setraises(<ref>DOMException</ref>);

    readonly attribute unsigned short  nodeType;
    readonly attribute <ref>Node</ref>            parentNode;
    readonly attribute <ref>NodeList</ref>        childNodes;
    readonly attribute <ref>Node</ref>            firstChild;
    readonly attribute <ref>Node</ref>            lastChild;
    readonly attribute <ref>Node</ref>            previousSibling;
    readonly attribute <ref>Node</ref>            nextSibling;
    readonly attribute <ref>NamedNodeMap</ref>    attributes;
    readonly attribute <ref>Document</ref>        ownerDocument;
    <ref>Node</ref>               insertBefore(in <ref>Node</ref> newChild, 
                                    in <ref>Node</ref> refChild)
                                        raises(<ref>DOMException</ref>);
    <ref>Node</ref>               replaceChild(in <ref>Node</ref> newChild, 
                                    in <ref>Node</ref> oldChild)
                                        raises(<ref>DOMException</ref>);
    <ref>Node</ref>               removeChild(in <ref>Node</ref> oldChild)
                                        raises(<ref>DOMException</ref>);
    <ref>Node</ref>               appendChild(in <ref>Node</ref> newChild)
                                        raises(<ref>DOMException</ref>);
    boolean            hasChildNodes();
    <ref>Node</ref>               cloneNode(in boolean deep);
    void               normalize();
    boolean            isSupported(in DOMString feature, 
                                   in DOMString version);
    readonly attribute DOMString?      namespaceURI;
             attribute DOMString?      prefix setraises(<ref>DOMException</ref>);

    readonly attribute DOMString?      localName;
    boolean            hasAttributes();
    readonly attribute DOMString?      baseURI;

    const unsigned short      DOCUMENT_POSITION_DISCONNECTED = 0x01;
    const unsigned short      DOCUMENT_POSITION_PRECEDING    = 0x02;
    const unsigned short      DOCUMENT_POSITION_FOLLOWING    = 0x04;
    const unsigned short      DOCUMENT_POSITION_CONTAINS     = 0x08;
    const unsigned short      DOCUMENT_POSITION_CONTAINED_BY = 0x10;
    const unsigned short      DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 0x20;

    unsigned short     compareDocumentPosition(in <ref>Node</ref> other)
                                        raises(<ref>DOMException</ref>);
             attribute DOMString?      textContent getraises(<ref>DOMException</ref>) setraises(<ref>DOMException</ref>);

    boolean            isSameNode(in <ref>Node</ref> other);
    DOMString?         lookupPrefix(in DOMString? namespaceURI);
    boolean            isDefaultNamespace(in DOMString? namespaceURI);
    DOMString?         lookupNamespaceURI(in DOMString? prefix);
    boolean            isEqualNode(in <ref>Node</ref> arg);
    <ref>DOMObject</ref>          getFeature(in DOMString feature, 
                                  in DOMString version);
    <ref>DOMUserData</ref>        setUserData(in DOMString key, 
                                   in <ref>DOMUserData</ref> data, 
                                   in <ref>UserDataHandler</ref> handler);
    <ref>DOMUserData</ref>        getUserData(in DOMString key);
  };

  interface NodeList {
    getter <ref>Node</ref> item(in unsigned long index);
    readonly attribute unsigned long length;
  };

  interface NamedNodeMap {
    <ref>Node</ref>               getNamedItem(in DOMString name);
    <ref>Node</ref>               setNamedItem(in <ref>Node</ref> arg)
                                        raises(<ref>DOMException</ref>);
    <ref>Node</ref>               removeNamedItem(in DOMString name)
                                        raises(<ref>DOMException</ref>);
    getter <ref>Node</ref>        item(in unsigned long index);
    readonly attribute unsigned long   length;
    <ref>Node</ref>               getNamedItemNS(in DOMString? namespaceURI, 
                                      in DOMString? localName)
                                        raises(<ref>DOMException</ref>);
    <ref>Node</ref>               setNamedItemNS(in <ref>Node</ref> arg)
                                        raises(<ref>DOMException</ref>);
    <ref>Node</ref>               removeNamedItemNS(in DOMString? namespaceURI, 
                                         in DOMString? localName)
                                        raises(<ref>DOMException</ref>);
  };

  interface CharacterData : <ref>Node</ref> {
             attribute DOMString       data getraises(<ref>DOMException</ref>) setraises(<ref>DOMException</ref>);

    readonly attribute unsigned long   length;
    DOMString          substringData(in unsigned long offset, 
                                     in unsigned long count)
                                        raises(<ref>DOMException</ref>);
    void               appendData(in DOMString arg)
                                        raises(<ref>DOMException</ref>);
    void               insertData(in unsigned long offset, 
                                  in DOMString arg)
                                        raises(<ref>DOMException</ref>);
    void               deleteData(in unsigned long offset, 
                                  in unsigned long count)
                                        raises(<ref>DOMException</ref>);
    void               replaceData(in unsigned long offset, 
                                   in unsigned long count, 
                                   in DOMString arg)
                                        raises(<ref>DOMException</ref>);
  };

  interface Attr : <ref>Node</ref> {
    readonly attribute DOMString       name;
    readonly attribute boolean         specified;
             attribute DOMString       value setraises(<ref>DOMException</ref>);

    readonly attribute <ref>Element</ref>         ownerElement;
    readonly attribute <ref>TypeInfo</ref>        schemaTypeInfo;
    readonly attribute boolean         isId;
  };

  interface Element : <ref>Node</ref> {
    readonly attribute DOMString       tagName;
    DOMString          getAttribute(in DOMString name);
    void               setAttribute(in DOMString name, 
                                    in DOMString value)
                                        raises(<ref>DOMException</ref>);
    void               removeAttribute(in DOMString name)
                                        raises(<ref>DOMException</ref>);
    <ref>Attr</ref>               getAttributeNode(in DOMString name);
    <ref>Attr</ref>               setAttributeNode(in <ref>Attr</ref> newAttr)
                                        raises(<ref>DOMException</ref>);
    <ref>Attr</ref>               removeAttributeNode(in <ref>Attr</ref> oldAttr)
                                        raises(<ref>DOMException</ref>);
    <ref>NodeList</ref>           getElementsByTagName(in DOMString name);
    DOMString          getAttributeNS(in DOMString? namespaceURI, 
                                      in DOMString localName)
                                        raises(<ref>DOMException</ref>);
    void               setAttributeNS(in DOMString? namespaceURI, 
                                      in DOMString qualifiedName, 
                                      in DOMString value)
                                        raises(<ref>DOMException</ref>);
    void               removeAttributeNS(in DOMString? namespaceURI, 
                                         in DOMString localName)
                                        raises(<ref>DOMException</ref>);
    <ref>Attr</ref>               getAttributeNodeNS(in DOMString? namespaceURI, 
                                          in DOMString localName)
                                        raises(<ref>DOMException</ref>);
    <ref>Attr</ref>               setAttributeNodeNS(in <ref>Attr</ref> newAttr)
                                        raises(<ref>DOMException</ref>);
    <ref>NodeList</ref>           getElementsByTagNameNS(in DOMString? namespaceURI, 
                                              in DOMString localName)
                                        raises(<ref>DOMException</ref>);
    boolean            hasAttribute(in DOMString name);
    boolean            hasAttributeNS(in DOMString? namespaceURI, 
                                      in DOMString localName)
                                        raises(<ref>DOMException</ref>);
    readonly attribute <ref>TypeInfo</ref>        schemaTypeInfo;
    void               setIdAttribute(in DOMString name, 
                                      in boolean isId)
                                        raises(<ref>DOMException</ref>);
    void               setIdAttributeNS(in DOMString? namespaceURI, 
                                        in DOMString localName, 
                                        in boolean isId)
                                        raises(<ref>DOMException</ref>);
    void               setIdAttributeNode(in <ref>Attr</ref> idAttr, 
                                          in boolean isId)
                                        raises(<ref>DOMException</ref>);
  };

  interface Text : <ref>CharacterData</ref> {
    <ref>Text</ref>               splitText(in unsigned long offset)
                                        raises(<ref>DOMException</ref>);
    readonly attribute boolean         isElementContentWhitespace;
    readonly attribute DOMString       wholeText;
    <ref>Text</ref>               replaceWholeText(in DOMString content)
                                        raises(<ref>DOMException</ref>);
  };

  interface Comment : <ref>CharacterData</ref> {
  };

  interface TypeInfo {
    readonly attribute DOMString?      typeName;
    readonly attribute DOMString?      typeNamespace;

    const unsigned long       DERIVATION_RESTRICTION         = 0x00000001;
    const unsigned long       DERIVATION_EXTENSION           = 0x00000002;
    const unsigned long       DERIVATION_UNION               = 0x00000004;
    const unsigned long       DERIVATION_LIST                = 0x00000008;

    boolean            isDerivedFrom(in DOMString? typeNamespaceArg, 
                                     in DOMString typeNameArg, 
                                     in unsigned long derivationMethod);
  };

  [Callback]
  interface UserDataHandler {

    const unsigned short      NODE_CLONED                    = 1;
    const unsigned short      NODE_IMPORTED                  = 2;
    const unsigned short      NODE_DELETED                   = 3;
    const unsigned short      NODE_RENAMED                   = 4;
    const unsigned short      NODE_ADOPTED                   = 5;

    void               handle(in unsigned short operation, 
                              in DOMString key, 
                              in <ref>DOMUserData</ref> data, 
                              in <ref>Node</ref> src, 
                              in <ref>Node</ref> dst);
  };

  interface DOMError {

    const unsigned short      SEVERITY_WARNING               = 1;
    const unsigned short      SEVERITY_ERROR                 = 2;
    const unsigned short      SEVERITY_FATAL_ERROR           = 3;

    readonly attribute unsigned short  severity;
    readonly attribute DOMString       message;
    readonly attribute DOMString       type;
    readonly attribute <ref>DOMObject</ref>       relatedException;
    readonly attribute <ref>DOMObject</ref>       relatedData;
    readonly attribute <ref>DOMLocator</ref>      location;
  };

  interface DOMErrorHandler {
    boolean            handleError(in <ref>DOMError</ref> error);
  };

  interface DOMLocator {
    readonly attribute long            lineNumber;
    readonly attribute long            columnNumber;
    readonly attribute long            byteOffset;
    readonly attribute long            utf16Offset;
    readonly attribute <ref>Node</ref>            relatedNode;
    readonly attribute DOMString?      uri;
  };

  interface DOMConfiguration {
    void               setParameter(in DOMString name, 
                                    in <ref>DOMUserData</ref> value)
                                        raises(<ref>DOMException</ref>);
    <ref>DOMUserData</ref>        getParameter(in DOMString name)
                                        raises(<ref>DOMException</ref>);
    boolean            canSetParameter(in DOMString name, 
                                       in <ref>DOMUserData</ref> value);
    readonly attribute <ref>DOMStringList</ref>   parameterNames;
  };

  interface CDATASection : <ref>Text</ref> {
  };

  interface DocumentType : <ref>Node</ref> {
    readonly attribute DOMString       name;
    readonly attribute <ref>NamedNodeMap</ref>    entities;
    readonly attribute <ref>NamedNodeMap</ref>    notations;
    readonly attribute DOMString?      publicId;
    readonly attribute DOMString?      systemId;
    readonly attribute DOMString?      internalSubset;
  };

  interface Notation : <ref>Node</ref> {
    readonly attribute DOMString?      publicId;
    readonly attribute DOMString?      systemId;
  };

  interface Entity : <ref>Node</ref> {
    readonly attribute DOMString?      publicId;
    readonly attribute DOMString?      systemId;
    readonly attribute DOMString?      notationName;
    readonly attribute DOMString?      inputEncoding;
    readonly attribute DOMString?      xmlEncoding;
    readonly attribute DOMString?      xmlVersion;
  };

  interface EntityReference : <ref>Node</ref> {
  };

  interface ProcessingInstruction : <ref>Node</ref> {
    readonly attribute DOMString       target;
             attribute DOMString       data setraises(<ref>DOMException</ref>);

  };

  interface DocumentFragment : <ref>Node</ref> {
  };

  interface Document : <ref>Node</ref> {
    readonly attribute <ref>DocumentType</ref>    doctype;
    readonly attribute <ref>DOMImplementation</ref> implementation;
    readonly attribute <ref>Element</ref>         documentElement;
    <ref>Element</ref>            createElement(in DOMString tagName)
                                        raises(<ref>DOMException</ref>);
    <ref>DocumentFragment</ref>   createDocumentFragment();
    <ref>Text</ref>               createTextNode(in DOMString data);
    <ref>Comment</ref>            createComment(in DOMString data);
    <ref>CDATASection</ref>       createCDATASection(in DOMString data)
                                        raises(<ref>DOMException</ref>);
    <ref>ProcessingInstruction</ref> createProcessingInstruction(in DOMString target, 
                                                      in DOMString data)
                                        raises(<ref>DOMException</ref>);
    <ref>Attr</ref>               createAttribute(in DOMString name)
                                        raises(<ref>DOMException</ref>);
    <ref>EntityReference</ref>    createEntityReference(in DOMString name)
                                        raises(<ref>DOMException</ref>);
    <ref>NodeList</ref>           getElementsByTagName(in DOMString tagname);
    <ref>Node</ref>               importNode(in <ref>Node</ref> importedNode, 
                                  in boolean deep)
                                        raises(<ref>DOMException</ref>);
    <ref>Element</ref>            createElementNS(in DOMString? namespaceURI, 
                                       in DOMString qualifiedName)
                                        raises(<ref>DOMException</ref>);
    <ref>Attr</ref>               createAttributeNS(in DOMString? namespaceURI, 
                                         in DOMString qualifiedName)
                                        raises(<ref>DOMException</ref>);
    <ref>NodeList</ref>           getElementsByTagNameNS(in DOMString? namespaceURI, 
                                              in DOMString localName);
    <ref>Element</ref>            getElementById(in DOMString elementId);
    readonly attribute DOMString?      inputEncoding;
    readonly attribute DOMString?      xmlEncoding;
             attribute boolean         xmlStandalone setraises(<ref>DOMException</ref>);

             attribute DOMString?      xmlVersion setraises(<ref>DOMException</ref>);

             attribute boolean         strictErrorChecking;
             attribute DOMString?      documentURI;
    <ref>Node</ref>               adoptNode(in <ref>Node</ref> source)
                                        raises(<ref>DOMException</ref>);
    readonly attribute <ref>DOMConfiguration</ref> domConfig;
    void               normalizeDocument();
    <ref>Node</ref>               renameNode(in <ref>Node</ref> n, 
                                  in DOMString? namespaceURI, 
                                  in DOMString qualifiedName)
                                        raises(<ref>DOMException</ref>);
  };
};</webidl>
    <Typedef name="DOMTimeStamp" id="::dom::DOMTimeStamp">
      <webidl>  typedef   unsigned long long DOMTimeStamp;</webidl>
      <Type type="unsigned long long"/>
    </Typedef>
    <Typedef name="DOMUserData" id="::dom::DOMUserData">
      <webidl>  typedef   any DOMUserData;</webidl>
      <Type type="any"/>
    </Typedef>
    <Typedef name="DOMObject" id="::dom::DOMObject">
      <webidl>  typedef   object DOMObject;</webidl>
      <Type type="object"/>
    </Typedef>
    <Exception name="DOMException" id="::dom::DOMException">
      <webidl>  exception DOMException {

    const unsigned short INDEX_SIZE_ERR              = 1;
    const unsigned short DOMSTRING_SIZE_ERR          = 2;
    const unsigned short HIERARCHY_REQUEST_ERR       = 3;
    const unsigned short WRONG_DOCUMENT_ERR          = 4;
    const unsigned short INVALID_CHARACTER_ERR       = 5;
    const unsigned short NO_DATA_ALLOWED_ERR         = 6;
    const unsigned short NO_MODIFICATION_ALLOWED_ERR = 7;
    const unsigned short NOT_FOUND_ERR               = 8;
    const unsigned short NOT_SUPPORTED_ERR           = 9;
    const unsigned short INUSE_ATTRIBUTE_ERR         = 10;
    const unsigned short INVALID_STATE_ERR           = 11;
    const unsigned short SYNTAX_ERR                  = 12;
    const unsigned short INVALID_MODIFICATION_ERR    = 13;
    const unsigned short NAMESPACE_ERR               = 14;
    const unsigned short INVALID_ACCESS_ERR          = 15;
    const unsigned short VALIDATION_ERR              = 16;
    const unsigned short TYPE_MISMATCH_ERR           = 17;

    unsigned short code;
  };</webidl>
      <Const name="INDEX_SIZE_ERR" value="1" id="::dom::DOMException::INDEX_SIZE_ERR">
        <Type type="unsigned short"/>
      </Const>
      <Const name="DOMSTRING_SIZE_ERR" value="2" id="::dom::DOMException::DOMSTRING_SIZE_ERR">
        <Type type="unsigned short"/>
      </Const>
      <Const name="HIERARCHY_REQUEST_ERR" value="3" id="::dom::DOMException::HIERARCHY_REQUEST_ERR">
        <Type type="unsigned short"/>
      </Const>
      <Const name="WRONG_DOCUMENT_ERR" value="4" id="::dom::DOMException::WRONG_DOCUMENT_ERR">
        <Type type="unsigned short"/>
      </Const>
      <Const name="INVALID_CHARACTER_ERR" value="5" id="::dom::DOMException::INVALID_CHARACTER_ERR">
        <Type type="unsigned short"/>
      </Const>
      <Const name="NO_DATA_ALLOWED_ERR" value="6" id="::dom::DOMException::NO_DATA_ALLOWED_ERR">
        <Type type="unsigned short"/>
      </Const>
      <Const name="NO_MODIFICATION_ALLOWED_ERR" value="7" id="::dom::DOMException::NO_MODIFICATION_ALLOWED_ERR">
        <Type type="unsigned short"/>
      </Const>
      <Const name="NOT_FOUND_ERR" value="8" id="::dom::DOMException::NOT_FOUND_ERR">
        <Type type="unsigned short"/>
      </Const>
      <Const name="NOT_SUPPORTED_ERR" value="9" id="::dom::DOMException::NOT_SUPPORTED_ERR">
        <Type type="unsigned short"/>
      </Const>
      <Const name="INUSE_ATTRIBUTE_ERR" value="10" id="::dom::DOMException::INUSE_ATTRIBUTE_ERR">
        <Type type="unsigned short"/>
      </Const>
      <Const name="INVALID_STATE_ERR" value="11" id="::dom::DOMException::INVALID_STATE_ERR">
        <Type type="unsigned short"/>
      </Const>
      <Const name="SYNTAX_ERR" value="12" id="::dom::DOMException::SYNTAX_ERR">
        <Type type="unsigned short"/>
      </Const>
      <Const name="INVALID_MODIFICATION_ERR" value="13" id="::dom::DOMException::INVALID_MODIFICATION_ERR">
        <Type type="unsigned short"/>
      </Const>
      <Const name="NAMESPACE_ERR" value="14" id="::dom::DOMException::NAMESPACE_ERR">
        <Type type="unsigned short"/>
      </Const>
      <Const name="INVALID_ACCESS_ERR" value="15" id="::dom::DOMException::INVALID_ACCESS_ERR">
        <Type type="unsigned short"/>
      </Const>
      <Const name="VALIDATION_ERR" value="16" id="::dom::DOMException::VALIDATION_ERR">
        <Type type="unsigned short"/>
      </Const>
      <Const name="TYPE_MISMATCH_ERR" value="17" id="::dom::DOMException::TYPE_MISMATCH_ERR">
        <Type type="unsigned short"/>
      </Const>
      <ExceptionField name="code" id="::dom::DOMException::code">
        <Type type="unsigned short"/>
      </ExceptionField>
    </Exception>
    <Interface name="DOMStringList" id="::dom::DOMStringList">
      <webidl>  interface DOMStringList {
    getter DOMString? item(in unsigned long index);
    readonly attribute unsigned long length;
    boolean contains(in DOMString? str);
  };</webidl>
      <Operation getter="getter" name="item" id="::dom::DOMStringList::item">
        <webidl>    getter DOMString? item(in unsigned long index);</webidl>
        <Type type="DOMString" nullable="nullable"/>
        <ArgumentList>
          <Argument in="in" name="index">
            <Type type="unsigned long"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Attribute readonly="readonly" name="length" id="::dom::DOMStringList::length">
        <webidl>    readonly attribute unsigned long length;</webidl>
        <Type type="unsigned long"/>
      </Attribute>
      <Operation name="contains" id="::dom::DOMStringList::contains">
        <webidl>    boolean contains(in DOMString? str);</webidl>
        <Type type="boolean"/>
        <ArgumentList>
          <Argument in="in" name="str">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
        </ArgumentList>
      </Operation>
    </Interface>
    <Interface name="NameList" id="::dom::NameList">
      <webidl>  interface NameList {
    DOMString?          getName(in unsigned long index);
    DOMString?          getNamespaceURI(in unsigned long index);
    readonly attribute unsigned long   length;
    boolean            contains(in DOMString? str);
    boolean            containsNS(in DOMString? namespaceURI, 
                                  in DOMString? name);
  };</webidl>
      <Operation name="getName" id="::dom::NameList::getName">
        <webidl>    DOMString?          getName(in unsigned long index);</webidl>
        <Type type="DOMString" nullable="nullable"/>
        <ArgumentList>
          <Argument in="in" name="index">
            <Type type="unsigned long"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="getNamespaceURI" id="::dom::NameList::getNamespaceURI">
        <webidl>    DOMString?          getNamespaceURI(in unsigned long index);</webidl>
        <Type type="DOMString" nullable="nullable"/>
        <ArgumentList>
          <Argument in="in" name="index">
            <Type type="unsigned long"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Attribute readonly="readonly" name="length" id="::dom::NameList::length">
        <webidl>    readonly attribute unsigned long   length;</webidl>
        <Type type="unsigned long"/>
      </Attribute>
      <Operation name="contains" id="::dom::NameList::contains">
        <webidl>    boolean            contains(in DOMString? str);</webidl>
        <Type type="boolean"/>
        <ArgumentList>
          <Argument in="in" name="str">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="containsNS" id="::dom::NameList::containsNS">
        <webidl>    boolean            containsNS(in DOMString? namespaceURI, 
                                  in DOMString? name);</webidl>
        <Type type="boolean"/>
        <ArgumentList>
          <Argument in="in" name="namespaceURI">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="name">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
        </ArgumentList>
      </Operation>
    </Interface>
    <Interface name="DOMImplementationList" id="::dom::DOMImplementationList">
      <webidl>  interface DOMImplementationList {
    getter <ref>DOMImplementation</ref> item(in unsigned long index);
    readonly attribute unsigned long length;
  };</webidl>
      <Operation getter="getter" name="item" id="::dom::DOMImplementationList::item">
        <webidl>    getter <ref>DOMImplementation</ref> item(in unsigned long index);</webidl>
        <Type name="DOMImplementation"/>
        <ArgumentList>
          <Argument in="in" name="index">
            <Type type="unsigned long"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Attribute readonly="readonly" name="length" id="::dom::DOMImplementationList::length">
        <webidl>    readonly attribute unsigned long length;</webidl>
        <Type type="unsigned long"/>
      </Attribute>
    </Interface>
    <Interface name="DOMImplementationSource" id="::dom::DOMImplementationSource">
      <webidl>  interface DOMImplementationSource {
    <ref>DOMImplementation</ref>  getDOMImplementation(in DOMString features);
    <ref>DOMImplementationList</ref> getDOMImplementationList(in DOMString features);
  };</webidl>
      <Operation name="getDOMImplementation" id="::dom::DOMImplementationSource::getDOMImplementation">
        <webidl>    <ref>DOMImplementation</ref>  getDOMImplementation(in DOMString features);</webidl>
        <Type name="DOMImplementation"/>
        <ArgumentList>
          <Argument in="in" name="features">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="getDOMImplementationList" id="::dom::DOMImplementationSource::getDOMImplementationList">
        <webidl>    <ref>DOMImplementationList</ref> getDOMImplementationList(in DOMString features);</webidl>
        <Type name="DOMImplementationList"/>
        <ArgumentList>
          <Argument in="in" name="features">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
    </Interface>
    <Interface name="DOMImplementation" id="::dom::DOMImplementation">
      <webidl>  interface DOMImplementation {
    boolean            hasFeature(in DOMString feature, 
                                  in DOMString version);
    <ref>DocumentType</ref>       createDocumentType(in DOMString qualifiedName, 
                                          in DOMString? publicId, 
                                          in DOMString? systemId)
                                        raises(<ref>DOMException</ref>);
    <ref>Document</ref>           createDocument(in DOMString? namespaceURI, 
                                      in DOMString? qualifiedName, 
                                      in <ref>DocumentType</ref> doctype)
                                        raises(<ref>DOMException</ref>);
    <ref>DOMObject</ref>          getFeature(in DOMString feature, 
                                  in DOMString version);
  };</webidl>
      <Operation name="hasFeature" id="::dom::DOMImplementation::hasFeature">
        <webidl>    boolean            hasFeature(in DOMString feature, 
                                  in DOMString version);</webidl>
        <Type type="boolean"/>
        <ArgumentList>
          <Argument in="in" name="feature">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="version">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="createDocumentType" id="::dom::DOMImplementation::createDocumentType">
        <webidl>    <ref>DocumentType</ref>       createDocumentType(in DOMString qualifiedName, 
                                          in DOMString? publicId, 
                                          in DOMString? systemId)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="DocumentType"/>
        <ArgumentList>
          <Argument in="in" name="qualifiedName">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="publicId">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="systemId">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="createDocument" id="::dom::DOMImplementation::createDocument">
        <webidl>    <ref>Document</ref>           createDocument(in DOMString? namespaceURI, 
                                      in DOMString? qualifiedName, 
                                      in <ref>DocumentType</ref> doctype)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Document"/>
        <ArgumentList>
          <Argument in="in" name="namespaceURI">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="qualifiedName">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="doctype">
            <Type name="DocumentType"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="getFeature" id="::dom::DOMImplementation::getFeature">
        <webidl>    <ref>DOMObject</ref>          getFeature(in DOMString feature, 
                                  in DOMString version);</webidl>
        <Type name="DOMObject"/>
        <ArgumentList>
          <Argument in="in" name="feature">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="version">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
    </Interface>
    <Interface name="Node" id="::dom::Node">
      <webidl>  [PrototypeRoot]
  interface Node {

    const unsigned short ELEMENT_NODE                   = 1;
    const unsigned short ATTRIBUTE_NODE                 = 2;
    const unsigned short TEXT_NODE                      = 3;
    const unsigned short CDATA_SECTION_NODE             = 4;
    const unsigned short ENTITY_REFERENCE_NODE          = 5;
    const unsigned short ENTITY_NODE                    = 6;
    const unsigned short PROCESSING_INSTRUCTION_NODE    = 7;
    const unsigned short COMMENT_NODE                   = 8;
    const unsigned short DOCUMENT_NODE                  = 9;
    const unsigned short DOCUMENT_TYPE_NODE             = 10;
    const unsigned short DOCUMENT_FRAGMENT_NODE         = 11;
    const unsigned short NOTATION_NODE                  = 12;

    readonly attribute DOMString       nodeName;
             attribute DOMString?      nodeValue getraises(<ref>DOMException</ref>) setraises(<ref>DOMException</ref>);

    readonly attribute unsigned short  nodeType;
    readonly attribute <ref>Node</ref>            parentNode;
    readonly attribute <ref>NodeList</ref>        childNodes;
    readonly attribute <ref>Node</ref>            firstChild;
    readonly attribute <ref>Node</ref>            lastChild;
    readonly attribute <ref>Node</ref>            previousSibling;
    readonly attribute <ref>Node</ref>            nextSibling;
    readonly attribute <ref>NamedNodeMap</ref>    attributes;
    readonly attribute <ref>Document</ref>        ownerDocument;
    <ref>Node</ref>               insertBefore(in <ref>Node</ref> newChild, 
                                    in <ref>Node</ref> refChild)
                                        raises(<ref>DOMException</ref>);
    <ref>Node</ref>               replaceChild(in <ref>Node</ref> newChild, 
                                    in <ref>Node</ref> oldChild)
                                        raises(<ref>DOMException</ref>);
    <ref>Node</ref>               removeChild(in <ref>Node</ref> oldChild)
                                        raises(<ref>DOMException</ref>);
    <ref>Node</ref>               appendChild(in <ref>Node</ref> newChild)
                                        raises(<ref>DOMException</ref>);
    boolean            hasChildNodes();
    <ref>Node</ref>               cloneNode(in boolean deep);
    void               normalize();
    boolean            isSupported(in DOMString feature, 
                                   in DOMString version);
    readonly attribute DOMString?      namespaceURI;
             attribute DOMString?      prefix setraises(<ref>DOMException</ref>);

    readonly attribute DOMString?      localName;
    boolean            hasAttributes();
    readonly attribute DOMString?      baseURI;

    const unsigned short      DOCUMENT_POSITION_DISCONNECTED = 0x01;
    const unsigned short      DOCUMENT_POSITION_PRECEDING    = 0x02;
    const unsigned short      DOCUMENT_POSITION_FOLLOWING    = 0x04;
    const unsigned short      DOCUMENT_POSITION_CONTAINS     = 0x08;
    const unsigned short      DOCUMENT_POSITION_CONTAINED_BY = 0x10;
    const unsigned short      DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 0x20;

    unsigned short     compareDocumentPosition(in <ref>Node</ref> other)
                                        raises(<ref>DOMException</ref>);
             attribute DOMString?      textContent getraises(<ref>DOMException</ref>) setraises(<ref>DOMException</ref>);

    boolean            isSameNode(in <ref>Node</ref> other);
    DOMString?         lookupPrefix(in DOMString? namespaceURI);
    boolean            isDefaultNamespace(in DOMString? namespaceURI);
    DOMString?         lookupNamespaceURI(in DOMString? prefix);
    boolean            isEqualNode(in <ref>Node</ref> arg);
    <ref>DOMObject</ref>          getFeature(in DOMString feature, 
                                  in DOMString version);
    <ref>DOMUserData</ref>        setUserData(in DOMString key, 
                                   in <ref>DOMUserData</ref> data, 
                                   in <ref>UserDataHandler</ref> handler);
    <ref>DOMUserData</ref>        getUserData(in DOMString key);
  };</webidl>
      <ExtendedAttributeList>
        <ExtendedAttribute name="PrototypeRoot"/>
      </ExtendedAttributeList>
      <Const name="ELEMENT_NODE" value="1" id="::dom::Node::ELEMENT_NODE">
        <webidl>    const unsigned short ELEMENT_NODE                   = 1;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="ATTRIBUTE_NODE" value="2" id="::dom::Node::ATTRIBUTE_NODE">
        <webidl>    const unsigned short ATTRIBUTE_NODE                 = 2;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="TEXT_NODE" value="3" id="::dom::Node::TEXT_NODE">
        <webidl>    const unsigned short TEXT_NODE                      = 3;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="CDATA_SECTION_NODE" value="4" id="::dom::Node::CDATA_SECTION_NODE">
        <webidl>    const unsigned short CDATA_SECTION_NODE             = 4;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="ENTITY_REFERENCE_NODE" value="5" id="::dom::Node::ENTITY_REFERENCE_NODE">
        <webidl>    const unsigned short ENTITY_REFERENCE_NODE          = 5;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="ENTITY_NODE" value="6" id="::dom::Node::ENTITY_NODE">
        <webidl>    const unsigned short ENTITY_NODE                    = 6;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="PROCESSING_INSTRUCTION_NODE" value="7" id="::dom::Node::PROCESSING_INSTRUCTION_NODE">
        <webidl>    const unsigned short PROCESSING_INSTRUCTION_NODE    = 7;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="COMMENT_NODE" value="8" id="::dom::Node::COMMENT_NODE">
        <webidl>    const unsigned short COMMENT_NODE                   = 8;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="DOCUMENT_NODE" value="9" id="::dom::Node::DOCUMENT_NODE">
        <webidl>    const unsigned short DOCUMENT_NODE                  = 9;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="DOCUMENT_TYPE_NODE" value="10" id="::dom::Node::DOCUMENT_TYPE_NODE">
        <webidl>    const unsigned short DOCUMENT_TYPE_NODE             = 10;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="DOCUMENT_FRAGMENT_NODE" value="11" id="::dom::Node::DOCUMENT_FRAGMENT_NODE">
        <webidl>    const unsigned short DOCUMENT_FRAGMENT_NODE         = 11;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="NOTATION_NODE" value="12" id="::dom::Node::NOTATION_NODE">
        <webidl>    const unsigned short NOTATION_NODE                  = 12;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Attribute readonly="readonly" name="nodeName" id="::dom::Node::nodeName">
        <webidl>    readonly attribute DOMString       nodeName;</webidl>
        <Type type="DOMString"/>
      </Attribute>
      <Attribute name="nodeValue" id="::dom::Node::nodeValue">
        <webidl>             attribute DOMString?      nodeValue getraises(<ref>DOMException</ref>) setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString" nullable="nullable"/>
        <GetRaises>
          <RaiseException name="DOMException"/>
        </GetRaises>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute readonly="readonly" name="nodeType" id="::dom::Node::nodeType">
        <webidl>    readonly attribute unsigned short  nodeType;</webidl>
        <Type type="unsigned short"/>
      </Attribute>
      <Attribute readonly="readonly" name="parentNode" id="::dom::Node::parentNode">
        <webidl>    readonly attribute <ref>Node</ref>            parentNode;</webidl>
        <Type name="Node"/>
      </Attribute>
      <Attribute readonly="readonly" name="childNodes" id="::dom::Node::childNodes">
        <webidl>    readonly attribute <ref>NodeList</ref>        childNodes;</webidl>
        <Type name="NodeList"/>
      </Attribute>
      <Attribute readonly="readonly" name="firstChild" id="::dom::Node::firstChild">
        <webidl>    readonly attribute <ref>Node</ref>            firstChild;</webidl>
        <Type name="Node"/>
      </Attribute>
      <Attribute readonly="readonly" name="lastChild" id="::dom::Node::lastChild">
        <webidl>    readonly attribute <ref>Node</ref>            lastChild;</webidl>
        <Type name="Node"/>
      </Attribute>
      <Attribute readonly="readonly" name="previousSibling" id="::dom::Node::previousSibling">
        <webidl>    readonly attribute <ref>Node</ref>            previousSibling;</webidl>
        <Type name="Node"/>
      </Attribute>
      <Attribute readonly="readonly" name="nextSibling" id="::dom::Node::nextSibling">
        <webidl>    readonly attribute <ref>Node</ref>            nextSibling;</webidl>
        <Type name="Node"/>
      </Attribute>
      <Attribute readonly="readonly" name="attributes" id="::dom::Node::attributes">
        <webidl>    readonly attribute <ref>NamedNodeMap</ref>    attributes;</webidl>
        <Type name="NamedNodeMap"/>
      </Attribute>
      <Attribute readonly="readonly" name="ownerDocument" id="::dom::Node::ownerDocument">
        <webidl>    readonly attribute <ref>Document</ref>        ownerDocument;</webidl>
        <Type name="Document"/>
      </Attribute>
      <Operation name="insertBefore" id="::dom::Node::insertBefore">
        <webidl>    <ref>Node</ref>               insertBefore(in <ref>Node</ref> newChild, 
                                    in <ref>Node</ref> refChild)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Node"/>
        <ArgumentList>
          <Argument in="in" name="newChild">
            <Type name="Node"/>
          </Argument>
          <Argument in="in" name="refChild">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="replaceChild" id="::dom::Node::replaceChild">
        <webidl>    <ref>Node</ref>               replaceChild(in <ref>Node</ref> newChild, 
                                    in <ref>Node</ref> oldChild)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Node"/>
        <ArgumentList>
          <Argument in="in" name="newChild">
            <Type name="Node"/>
          </Argument>
          <Argument in="in" name="oldChild">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="removeChild" id="::dom::Node::removeChild">
        <webidl>    <ref>Node</ref>               removeChild(in <ref>Node</ref> oldChild)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Node"/>
        <ArgumentList>
          <Argument in="in" name="oldChild">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="appendChild" id="::dom::Node::appendChild">
        <webidl>    <ref>Node</ref>               appendChild(in <ref>Node</ref> newChild)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Node"/>
        <ArgumentList>
          <Argument in="in" name="newChild">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="hasChildNodes" id="::dom::Node::hasChildNodes">
        <webidl>    boolean            hasChildNodes();</webidl>
        <Type type="boolean"/>
        <ArgumentList/>
      </Operation>
      <Operation name="cloneNode" id="::dom::Node::cloneNode">
        <webidl>    <ref>Node</ref>               cloneNode(in boolean deep);</webidl>
        <Type name="Node"/>
        <ArgumentList>
          <Argument in="in" name="deep">
            <Type type="boolean"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="normalize" id="::dom::Node::normalize">
        <webidl>    void               normalize();</webidl>
        <Type type="void"/>
        <ArgumentList/>
      </Operation>
      <Operation name="isSupported" id="::dom::Node::isSupported">
        <webidl>    boolean            isSupported(in DOMString feature, 
                                   in DOMString version);</webidl>
        <Type type="boolean"/>
        <ArgumentList>
          <Argument in="in" name="feature">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="version">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Attribute readonly="readonly" name="namespaceURI" id="::dom::Node::namespaceURI">
        <webidl>    readonly attribute DOMString?      namespaceURI;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute name="prefix" id="::dom::Node::prefix">
        <webidl>             attribute DOMString?      prefix setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString" nullable="nullable"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute readonly="readonly" name="localName" id="::dom::Node::localName">
        <webidl>    readonly attribute DOMString?      localName;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Operation name="hasAttributes" id="::dom::Node::hasAttributes">
        <webidl>    boolean            hasAttributes();</webidl>
        <Type type="boolean"/>
        <ArgumentList/>
      </Operation>
      <Attribute readonly="readonly" name="baseURI" id="::dom::Node::baseURI">
        <webidl>    readonly attribute DOMString?      baseURI;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Const name="DOCUMENT_POSITION_DISCONNECTED" value="0x01" id="::dom::Node::DOCUMENT_POSITION_DISCONNECTED">
        <webidl>    const unsigned short      DOCUMENT_POSITION_DISCONNECTED = 0x01;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="DOCUMENT_POSITION_PRECEDING" value="0x02" id="::dom::Node::DOCUMENT_POSITION_PRECEDING">
        <webidl>    const unsigned short      DOCUMENT_POSITION_PRECEDING    = 0x02;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="DOCUMENT_POSITION_FOLLOWING" value="0x04" id="::dom::Node::DOCUMENT_POSITION_FOLLOWING">
        <webidl>    const unsigned short      DOCUMENT_POSITION_FOLLOWING    = 0x04;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="DOCUMENT_POSITION_CONTAINS" value="0x08" id="::dom::Node::DOCUMENT_POSITION_CONTAINS">
        <webidl>    const unsigned short      DOCUMENT_POSITION_CONTAINS     = 0x08;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="DOCUMENT_POSITION_CONTAINED_BY" value="0x10" id="::dom::Node::DOCUMENT_POSITION_CONTAINED_BY">
        <webidl>    const unsigned short      DOCUMENT_POSITION_CONTAINED_BY = 0x10;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC" value="0x20" id="::dom::Node::DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC">
        <webidl>    const unsigned short      DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 0x20;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Operation name="compareDocumentPosition" id="::dom::Node::compareDocumentPosition">
        <webidl>    unsigned short     compareDocumentPosition(in <ref>Node</ref> other)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="unsigned short"/>
        <ArgumentList>
          <Argument in="in" name="other">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Attribute name="textContent" id="::dom::Node::textContent">
        <webidl>             attribute DOMString?      textContent getraises(<ref>DOMException</ref>) setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString" nullable="nullable"/>
        <GetRaises>
          <RaiseException name="DOMException"/>
        </GetRaises>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Operation name="isSameNode" id="::dom::Node::isSameNode">
        <webidl>    boolean            isSameNode(in <ref>Node</ref> other);</webidl>
        <Type type="boolean"/>
        <ArgumentList>
          <Argument in="in" name="other">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="lookupPrefix" id="::dom::Node::lookupPrefix">
        <webidl>    DOMString?         lookupPrefix(in DOMString? namespaceURI);</webidl>
        <Type type="DOMString" nullable="nullable"/>
        <ArgumentList>
          <Argument in="in" name="namespaceURI">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="isDefaultNamespace" id="::dom::Node::isDefaultNamespace">
        <webidl>    boolean            isDefaultNamespace(in DOMString? namespaceURI);</webidl>
        <Type type="boolean"/>
        <ArgumentList>
          <Argument in="in" name="namespaceURI">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="lookupNamespaceURI" id="::dom::Node::lookupNamespaceURI">
        <webidl>    DOMString?         lookupNamespaceURI(in DOMString? prefix);</webidl>
        <Type type="DOMString" nullable="nullable"/>
        <ArgumentList>
          <Argument in="in" name="prefix">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="isEqualNode" id="::dom::Node::isEqualNode">
        <webidl>    boolean            isEqualNode(in <ref>Node</ref> arg);</webidl>
        <Type type="boolean"/>
        <ArgumentList>
          <Argument in="in" name="arg">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="getFeature" id="::dom::Node::getFeature">
        <webidl>    <ref>DOMObject</ref>          getFeature(in DOMString feature, 
                                  in DOMString version);</webidl>
        <Type name="DOMObject"/>
        <ArgumentList>
          <Argument in="in" name="feature">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="version">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="setUserData" id="::dom::Node::setUserData">
        <webidl>    <ref>DOMUserData</ref>        setUserData(in DOMString key, 
                                   in <ref>DOMUserData</ref> data, 
                                   in <ref>UserDataHandler</ref> handler);</webidl>
        <Type name="DOMUserData"/>
        <ArgumentList>
          <Argument in="in" name="key">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="data">
            <Type name="DOMUserData"/>
          </Argument>
          <Argument in="in" name="handler">
            <Type name="UserDataHandler"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="getUserData" id="::dom::Node::getUserData">
        <webidl>    <ref>DOMUserData</ref>        getUserData(in DOMString key);</webidl>
        <Type name="DOMUserData"/>
        <ArgumentList>
          <Argument in="in" name="key">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
    </Interface>
    <Interface name="NodeList" id="::dom::NodeList">
      <webidl>  interface NodeList {
    getter <ref>Node</ref> item(in unsigned long index);
    readonly attribute unsigned long length;
  };</webidl>
      <Operation getter="getter" name="item" id="::dom::NodeList::item">
        <webidl>    getter <ref>Node</ref> item(in unsigned long index);</webidl>
        <Type name="Node"/>
        <ArgumentList>
          <Argument in="in" name="index">
            <Type type="unsigned long"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Attribute readonly="readonly" name="length" id="::dom::NodeList::length">
        <webidl>    readonly attribute unsigned long length;</webidl>
        <Type type="unsigned long"/>
      </Attribute>
    </Interface>
    <Interface name="NamedNodeMap" id="::dom::NamedNodeMap">
      <webidl>  interface NamedNodeMap {
    <ref>Node</ref>               getNamedItem(in DOMString name);
    <ref>Node</ref>               setNamedItem(in <ref>Node</ref> arg)
                                        raises(<ref>DOMException</ref>);
    <ref>Node</ref>               removeNamedItem(in DOMString name)
                                        raises(<ref>DOMException</ref>);
    getter <ref>Node</ref>        item(in unsigned long index);
    readonly attribute unsigned long   length;
    <ref>Node</ref>               getNamedItemNS(in DOMString? namespaceURI, 
                                      in DOMString? localName)
                                        raises(<ref>DOMException</ref>);
    <ref>Node</ref>               setNamedItemNS(in <ref>Node</ref> arg)
                                        raises(<ref>DOMException</ref>);
    <ref>Node</ref>               removeNamedItemNS(in DOMString? namespaceURI, 
                                         in DOMString? localName)
                                        raises(<ref>DOMException</ref>);
  };</webidl>
      <Operation name="getNamedItem" id="::dom::NamedNodeMap::getNamedItem">
        <webidl>    <ref>Node</ref>               getNamedItem(in DOMString name);</webidl>
        <Type name="Node"/>
        <ArgumentList>
          <Argument in="in" name="name">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="setNamedItem" id="::dom::NamedNodeMap::setNamedItem">
        <webidl>    <ref>Node</ref>               setNamedItem(in <ref>Node</ref> arg)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Node"/>
        <ArgumentList>
          <Argument in="in" name="arg">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="removeNamedItem" id="::dom::NamedNodeMap::removeNamedItem">
        <webidl>    <ref>Node</ref>               removeNamedItem(in DOMString name)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Node"/>
        <ArgumentList>
          <Argument in="in" name="name">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation getter="getter" name="item" id="::dom::NamedNodeMap::item">
        <webidl>    getter <ref>Node</ref>        item(in unsigned long index);</webidl>
        <Type name="Node"/>
        <ArgumentList>
          <Argument in="in" name="index">
            <Type type="unsigned long"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Attribute readonly="readonly" name="length" id="::dom::NamedNodeMap::length">
        <webidl>    readonly attribute unsigned long   length;</webidl>
        <Type type="unsigned long"/>
      </Attribute>
      <Operation name="getNamedItemNS" id="::dom::NamedNodeMap::getNamedItemNS">
        <webidl>    <ref>Node</ref>               getNamedItemNS(in DOMString? namespaceURI, 
                                      in DOMString? localName)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Node"/>
        <ArgumentList>
          <Argument in="in" name="namespaceURI">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="localName">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="setNamedItemNS" id="::dom::NamedNodeMap::setNamedItemNS">
        <webidl>    <ref>Node</ref>               setNamedItemNS(in <ref>Node</ref> arg)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Node"/>
        <ArgumentList>
          <Argument in="in" name="arg">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="removeNamedItemNS" id="::dom::NamedNodeMap::removeNamedItemNS">
        <webidl>    <ref>Node</ref>               removeNamedItemNS(in DOMString? namespaceURI, 
                                         in DOMString? localName)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Node"/>
        <ArgumentList>
          <Argument in="in" name="namespaceURI">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="localName">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
    </Interface>
    <Interface name="CharacterData" id="::dom::CharacterData">
      <webidl>  interface CharacterData : <ref>Node</ref> {
             attribute DOMString       data getraises(<ref>DOMException</ref>) setraises(<ref>DOMException</ref>);

    readonly attribute unsigned long   length;
    DOMString          substringData(in unsigned long offset, 
                                     in unsigned long count)
                                        raises(<ref>DOMException</ref>);
    void               appendData(in DOMString arg)
                                        raises(<ref>DOMException</ref>);
    void               insertData(in unsigned long offset, 
                                  in DOMString arg)
                                        raises(<ref>DOMException</ref>);
    void               deleteData(in unsigned long offset, 
                                  in unsigned long count)
                                        raises(<ref>DOMException</ref>);
    void               replaceData(in unsigned long offset, 
                                   in unsigned long count, 
                                   in DOMString arg)
                                        raises(<ref>DOMException</ref>);
  };</webidl>
      <InterfaceInheritance>
        <Name name="Node"/>
      </InterfaceInheritance>
      <Attribute name="data" id="::dom::CharacterData::data">
        <webidl>             attribute DOMString       data getraises(<ref>DOMException</ref>) setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <GetRaises>
          <RaiseException name="DOMException"/>
        </GetRaises>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute readonly="readonly" name="length" id="::dom::CharacterData::length">
        <webidl>    readonly attribute unsigned long   length;</webidl>
        <Type type="unsigned long"/>
      </Attribute>
      <Operation name="substringData" id="::dom::CharacterData::substringData">
        <webidl>    DOMString          substringData(in unsigned long offset, 
                                     in unsigned long count)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <ArgumentList>
          <Argument in="in" name="offset">
            <Type type="unsigned long"/>
          </Argument>
          <Argument in="in" name="count">
            <Type type="unsigned long"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="appendData" id="::dom::CharacterData::appendData">
        <webidl>    void               appendData(in DOMString arg)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="arg">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="insertData" id="::dom::CharacterData::insertData">
        <webidl>    void               insertData(in unsigned long offset, 
                                  in DOMString arg)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="offset">
            <Type type="unsigned long"/>
          </Argument>
          <Argument in="in" name="arg">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="deleteData" id="::dom::CharacterData::deleteData">
        <webidl>    void               deleteData(in unsigned long offset, 
                                  in unsigned long count)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="offset">
            <Type type="unsigned long"/>
          </Argument>
          <Argument in="in" name="count">
            <Type type="unsigned long"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="replaceData" id="::dom::CharacterData::replaceData">
        <webidl>    void               replaceData(in unsigned long offset, 
                                   in unsigned long count, 
                                   in DOMString arg)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="offset">
            <Type type="unsigned long"/>
          </Argument>
          <Argument in="in" name="count">
            <Type type="unsigned long"/>
          </Argument>
          <Argument in="in" name="arg">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
    </Interface>
    <Interface name="Attr" id="::dom::Attr">
      <webidl>  interface Attr : <ref>Node</ref> {
    readonly attribute DOMString       name;
    readonly attribute boolean         specified;
             attribute DOMString       value setraises(<ref>DOMException</ref>);

    readonly attribute <ref>Element</ref>         ownerElement;
    readonly attribute <ref>TypeInfo</ref>        schemaTypeInfo;
    readonly attribute boolean         isId;
  };</webidl>
      <InterfaceInheritance>
        <Name name="Node"/>
      </InterfaceInheritance>
      <Attribute readonly="readonly" name="name" id="::dom::Attr::name">
        <webidl>    readonly attribute DOMString       name;</webidl>
        <Type type="DOMString"/>
      </Attribute>
      <Attribute readonly="readonly" name="specified" id="::dom::Attr::specified">
        <webidl>    readonly attribute boolean         specified;</webidl>
        <Type type="boolean"/>
      </Attribute>
      <Attribute name="value" id="::dom::Attr::value">
        <webidl>             attribute DOMString       value setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute readonly="readonly" name="ownerElement" id="::dom::Attr::ownerElement">
        <webidl>    readonly attribute <ref>Element</ref>         ownerElement;</webidl>
        <Type name="Element"/>
      </Attribute>
      <Attribute readonly="readonly" name="schemaTypeInfo" id="::dom::Attr::schemaTypeInfo">
        <webidl>    readonly attribute <ref>TypeInfo</ref>        schemaTypeInfo;</webidl>
        <Type name="TypeInfo"/>
      </Attribute>
      <Attribute readonly="readonly" name="isId" id="::dom::Attr::isId">
        <webidl>    readonly attribute boolean         isId;</webidl>
        <Type type="boolean"/>
      </Attribute>
    </Interface>
    <Interface name="Element" id="::dom::Element">
      <webidl>  interface Element : <ref>Node</ref> {
    readonly attribute DOMString       tagName;
    DOMString          getAttribute(in DOMString name);
    void               setAttribute(in DOMString name, 
                                    in DOMString value)
                                        raises(<ref>DOMException</ref>);
    void               removeAttribute(in DOMString name)
                                        raises(<ref>DOMException</ref>);
    <ref>Attr</ref>               getAttributeNode(in DOMString name);
    <ref>Attr</ref>               setAttributeNode(in <ref>Attr</ref> newAttr)
                                        raises(<ref>DOMException</ref>);
    <ref>Attr</ref>               removeAttributeNode(in <ref>Attr</ref> oldAttr)
                                        raises(<ref>DOMException</ref>);
    <ref>NodeList</ref>           getElementsByTagName(in DOMString name);
    DOMString          getAttributeNS(in DOMString? namespaceURI, 
                                      in DOMString localName)
                                        raises(<ref>DOMException</ref>);
    void               setAttributeNS(in DOMString? namespaceURI, 
                                      in DOMString qualifiedName, 
                                      in DOMString value)
                                        raises(<ref>DOMException</ref>);
    void               removeAttributeNS(in DOMString? namespaceURI, 
                                         in DOMString localName)
                                        raises(<ref>DOMException</ref>);
    <ref>Attr</ref>               getAttributeNodeNS(in DOMString? namespaceURI, 
                                          in DOMString localName)
                                        raises(<ref>DOMException</ref>);
    <ref>Attr</ref>               setAttributeNodeNS(in <ref>Attr</ref> newAttr)
                                        raises(<ref>DOMException</ref>);
    <ref>NodeList</ref>           getElementsByTagNameNS(in DOMString? namespaceURI, 
                                              in DOMString localName)
                                        raises(<ref>DOMException</ref>);
    boolean            hasAttribute(in DOMString name);
    boolean            hasAttributeNS(in DOMString? namespaceURI, 
                                      in DOMString localName)
                                        raises(<ref>DOMException</ref>);
    readonly attribute <ref>TypeInfo</ref>        schemaTypeInfo;
    void               setIdAttribute(in DOMString name, 
                                      in boolean isId)
                                        raises(<ref>DOMException</ref>);
    void               setIdAttributeNS(in DOMString? namespaceURI, 
                                        in DOMString localName, 
                                        in boolean isId)
                                        raises(<ref>DOMException</ref>);
    void               setIdAttributeNode(in <ref>Attr</ref> idAttr, 
                                          in boolean isId)
                                        raises(<ref>DOMException</ref>);
  };</webidl>
      <InterfaceInheritance>
        <Name name="Node"/>
      </InterfaceInheritance>
      <Attribute readonly="readonly" name="tagName" id="::dom::Element::tagName">
        <webidl>    readonly attribute DOMString       tagName;</webidl>
        <Type type="DOMString"/>
      </Attribute>
      <Operation name="getAttribute" id="::dom::Element::getAttribute">
        <webidl>    DOMString          getAttribute(in DOMString name);</webidl>
        <Type type="DOMString"/>
        <ArgumentList>
          <Argument in="in" name="name">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="setAttribute" id="::dom::Element::setAttribute">
        <webidl>    void               setAttribute(in DOMString name, 
                                    in DOMString value)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="name">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="value">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="removeAttribute" id="::dom::Element::removeAttribute">
        <webidl>    void               removeAttribute(in DOMString name)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="name">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="getAttributeNode" id="::dom::Element::getAttributeNode">
        <webidl>    <ref>Attr</ref>               getAttributeNode(in DOMString name);</webidl>
        <Type name="Attr"/>
        <ArgumentList>
          <Argument in="in" name="name">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="setAttributeNode" id="::dom::Element::setAttributeNode">
        <webidl>    <ref>Attr</ref>               setAttributeNode(in <ref>Attr</ref> newAttr)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Attr"/>
        <ArgumentList>
          <Argument in="in" name="newAttr">
            <Type name="Attr"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="removeAttributeNode" id="::dom::Element::removeAttributeNode">
        <webidl>    <ref>Attr</ref>               removeAttributeNode(in <ref>Attr</ref> oldAttr)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Attr"/>
        <ArgumentList>
          <Argument in="in" name="oldAttr">
            <Type name="Attr"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="getElementsByTagName" id="::dom::Element::getElementsByTagName">
        <webidl>    <ref>NodeList</ref>           getElementsByTagName(in DOMString name);</webidl>
        <Type name="NodeList"/>
        <ArgumentList>
          <Argument in="in" name="name">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="getAttributeNS" id="::dom::Element::getAttributeNS">
        <webidl>    DOMString          getAttributeNS(in DOMString? namespaceURI, 
                                      in DOMString localName)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <ArgumentList>
          <Argument in="in" name="namespaceURI">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="localName">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="setAttributeNS" id="::dom::Element::setAttributeNS">
        <webidl>    void               setAttributeNS(in DOMString? namespaceURI, 
                                      in DOMString qualifiedName, 
                                      in DOMString value)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="namespaceURI">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="qualifiedName">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="value">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="removeAttributeNS" id="::dom::Element::removeAttributeNS">
        <webidl>    void               removeAttributeNS(in DOMString? namespaceURI, 
                                         in DOMString localName)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="namespaceURI">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="localName">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="getAttributeNodeNS" id="::dom::Element::getAttributeNodeNS">
        <webidl>    <ref>Attr</ref>               getAttributeNodeNS(in DOMString? namespaceURI, 
                                          in DOMString localName)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Attr"/>
        <ArgumentList>
          <Argument in="in" name="namespaceURI">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="localName">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="setAttributeNodeNS" id="::dom::Element::setAttributeNodeNS">
        <webidl>    <ref>Attr</ref>               setAttributeNodeNS(in <ref>Attr</ref> newAttr)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Attr"/>
        <ArgumentList>
          <Argument in="in" name="newAttr">
            <Type name="Attr"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="getElementsByTagNameNS" id="::dom::Element::getElementsByTagNameNS">
        <webidl>    <ref>NodeList</ref>           getElementsByTagNameNS(in DOMString? namespaceURI, 
                                              in DOMString localName)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="NodeList"/>
        <ArgumentList>
          <Argument in="in" name="namespaceURI">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="localName">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="hasAttribute" id="::dom::Element::hasAttribute">
        <webidl>    boolean            hasAttribute(in DOMString name);</webidl>
        <Type type="boolean"/>
        <ArgumentList>
          <Argument in="in" name="name">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="hasAttributeNS" id="::dom::Element::hasAttributeNS">
        <webidl>    boolean            hasAttributeNS(in DOMString? namespaceURI, 
                                      in DOMString localName)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="boolean"/>
        <ArgumentList>
          <Argument in="in" name="namespaceURI">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="localName">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Attribute readonly="readonly" name="schemaTypeInfo" id="::dom::Element::schemaTypeInfo">
        <webidl>    readonly attribute <ref>TypeInfo</ref>        schemaTypeInfo;</webidl>
        <Type name="TypeInfo"/>
      </Attribute>
      <Operation name="setIdAttribute" id="::dom::Element::setIdAttribute">
        <webidl>    void               setIdAttribute(in DOMString name, 
                                      in boolean isId)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="name">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="isId">
            <Type type="boolean"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="setIdAttributeNS" id="::dom::Element::setIdAttributeNS">
        <webidl>    void               setIdAttributeNS(in DOMString? namespaceURI, 
                                        in DOMString localName, 
                                        in boolean isId)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="namespaceURI">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="localName">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="isId">
            <Type type="boolean"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="setIdAttributeNode" id="::dom::Element::setIdAttributeNode">
        <webidl>    void               setIdAttributeNode(in <ref>Attr</ref> idAttr, 
                                          in boolean isId)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="idAttr">
            <Type name="Attr"/>
          </Argument>
          <Argument in="in" name="isId">
            <Type type="boolean"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
    </Interface>
    <Interface name="Text" id="::dom::Text">
      <webidl>  interface Text : <ref>CharacterData</ref> {
    <ref>Text</ref>               splitText(in unsigned long offset)
                                        raises(<ref>DOMException</ref>);
    readonly attribute boolean         isElementContentWhitespace;
    readonly attribute DOMString       wholeText;
    <ref>Text</ref>               replaceWholeText(in DOMString content)
                                        raises(<ref>DOMException</ref>);
  };</webidl>
      <InterfaceInheritance>
        <Name name="CharacterData"/>
      </InterfaceInheritance>
      <Operation name="splitText" id="::dom::Text::splitText">
        <webidl>    <ref>Text</ref>               splitText(in unsigned long offset)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Text"/>
        <ArgumentList>
          <Argument in="in" name="offset">
            <Type type="unsigned long"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Attribute readonly="readonly" name="isElementContentWhitespace" id="::dom::Text::isElementContentWhitespace">
        <webidl>    readonly attribute boolean         isElementContentWhitespace;</webidl>
        <Type type="boolean"/>
      </Attribute>
      <Attribute readonly="readonly" name="wholeText" id="::dom::Text::wholeText">
        <webidl>    readonly attribute DOMString       wholeText;</webidl>
        <Type type="DOMString"/>
      </Attribute>
      <Operation name="replaceWholeText" id="::dom::Text::replaceWholeText">
        <webidl>    <ref>Text</ref>               replaceWholeText(in DOMString content)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Text"/>
        <ArgumentList>
          <Argument in="in" name="content">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
    </Interface>
    <Interface name="Comment" id="::dom::Comment">
      <webidl>  interface Comment : <ref>CharacterData</ref> {
  };</webidl>
      <InterfaceInheritance>
        <Name name="CharacterData"/>
      </InterfaceInheritance>
    </Interface>
    <Interface name="TypeInfo" id="::dom::TypeInfo">
      <webidl>  interface TypeInfo {
    readonly attribute DOMString?      typeName;
    readonly attribute DOMString?      typeNamespace;

    const unsigned long       DERIVATION_RESTRICTION         = 0x00000001;
    const unsigned long       DERIVATION_EXTENSION           = 0x00000002;
    const unsigned long       DERIVATION_UNION               = 0x00000004;
    const unsigned long       DERIVATION_LIST                = 0x00000008;

    boolean            isDerivedFrom(in DOMString? typeNamespaceArg, 
                                     in DOMString typeNameArg, 
                                     in unsigned long derivationMethod);
  };</webidl>
      <Attribute readonly="readonly" name="typeName" id="::dom::TypeInfo::typeName">
        <webidl>    readonly attribute DOMString?      typeName;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute readonly="readonly" name="typeNamespace" id="::dom::TypeInfo::typeNamespace">
        <webidl>    readonly attribute DOMString?      typeNamespace;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Const name="DERIVATION_RESTRICTION" value="0x00000001" id="::dom::TypeInfo::DERIVATION_RESTRICTION">
        <webidl>    const unsigned long       DERIVATION_RESTRICTION         = 0x00000001;</webidl>
        <Type type="unsigned long"/>
      </Const>
      <Const name="DERIVATION_EXTENSION" value="0x00000002" id="::dom::TypeInfo::DERIVATION_EXTENSION">
        <webidl>    const unsigned long       DERIVATION_EXTENSION           = 0x00000002;</webidl>
        <Type type="unsigned long"/>
      </Const>
      <Const name="DERIVATION_UNION" value="0x00000004" id="::dom::TypeInfo::DERIVATION_UNION">
        <webidl>    const unsigned long       DERIVATION_UNION               = 0x00000004;</webidl>
        <Type type="unsigned long"/>
      </Const>
      <Const name="DERIVATION_LIST" value="0x00000008" id="::dom::TypeInfo::DERIVATION_LIST">
        <webidl>    const unsigned long       DERIVATION_LIST                = 0x00000008;</webidl>
        <Type type="unsigned long"/>
      </Const>
      <Operation name="isDerivedFrom" id="::dom::TypeInfo::isDerivedFrom">
        <webidl>    boolean            isDerivedFrom(in DOMString? typeNamespaceArg, 
                                     in DOMString typeNameArg, 
                                     in unsigned long derivationMethod);</webidl>
        <Type type="boolean"/>
        <ArgumentList>
          <Argument in="in" name="typeNamespaceArg">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="typeNameArg">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="derivationMethod">
            <Type type="unsigned long"/>
          </Argument>
        </ArgumentList>
      </Operation>
    </Interface>
    <Interface name="UserDataHandler" id="::dom::UserDataHandler">
      <webidl>  [Callback]
  interface UserDataHandler {

    const unsigned short      NODE_CLONED                    = 1;
    const unsigned short      NODE_IMPORTED                  = 2;
    const unsigned short      NODE_DELETED                   = 3;
    const unsigned short      NODE_RENAMED                   = 4;
    const unsigned short      NODE_ADOPTED                   = 5;

    void               handle(in unsigned short operation, 
                              in DOMString key, 
                              in <ref>DOMUserData</ref> data, 
                              in <ref>Node</ref> src, 
                              in <ref>Node</ref> dst);
  };</webidl>
      <ExtendedAttributeList>
        <ExtendedAttribute name="Callback"/>
      </ExtendedAttributeList>
      <Const name="NODE_CLONED" value="1" id="::dom::UserDataHandler::NODE_CLONED">
        <webidl>    const unsigned short      NODE_CLONED                    = 1;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="NODE_IMPORTED" value="2" id="::dom::UserDataHandler::NODE_IMPORTED">
        <webidl>    const unsigned short      NODE_IMPORTED                  = 2;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="NODE_DELETED" value="3" id="::dom::UserDataHandler::NODE_DELETED">
        <webidl>    const unsigned short      NODE_DELETED                   = 3;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="NODE_RENAMED" value="4" id="::dom::UserDataHandler::NODE_RENAMED">
        <webidl>    const unsigned short      NODE_RENAMED                   = 4;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="NODE_ADOPTED" value="5" id="::dom::UserDataHandler::NODE_ADOPTED">
        <webidl>    const unsigned short      NODE_ADOPTED                   = 5;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Operation name="handle" id="::dom::UserDataHandler::handle">
        <webidl>    void               handle(in unsigned short operation, 
                              in DOMString key, 
                              in <ref>DOMUserData</ref> data, 
                              in <ref>Node</ref> src, 
                              in <ref>Node</ref> dst);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="operation">
            <Type type="unsigned short"/>
          </Argument>
          <Argument in="in" name="key">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="data">
            <Type name="DOMUserData"/>
          </Argument>
          <Argument in="in" name="src">
            <Type name="Node"/>
          </Argument>
          <Argument in="in" name="dst">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
      </Operation>
    </Interface>
    <Interface name="DOMError" id="::dom::DOMError">
      <webidl>  interface DOMError {

    const unsigned short      SEVERITY_WARNING               = 1;
    const unsigned short      SEVERITY_ERROR                 = 2;
    const unsigned short      SEVERITY_FATAL_ERROR           = 3;

    readonly attribute unsigned short  severity;
    readonly attribute DOMString       message;
    readonly attribute DOMString       type;
    readonly attribute <ref>DOMObject</ref>       relatedException;
    readonly attribute <ref>DOMObject</ref>       relatedData;
    readonly attribute <ref>DOMLocator</ref>      location;
  };</webidl>
      <Const name="SEVERITY_WARNING" value="1" id="::dom::DOMError::SEVERITY_WARNING">
        <webidl>    const unsigned short      SEVERITY_WARNING               = 1;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="SEVERITY_ERROR" value="2" id="::dom::DOMError::SEVERITY_ERROR">
        <webidl>    const unsigned short      SEVERITY_ERROR                 = 2;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="SEVERITY_FATAL_ERROR" value="3" id="::dom::DOMError::SEVERITY_FATAL_ERROR">
        <webidl>    const unsigned short      SEVERITY_FATAL_ERROR           = 3;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Attribute readonly="readonly" name="severity" id="::dom::DOMError::severity">
        <webidl>    readonly attribute unsigned short  severity;</webidl>
        <Type type="unsigned short"/>
      </Attribute>
      <Attribute readonly="readonly" name="message" id="::dom::DOMError::message">
        <webidl>    readonly attribute DOMString       message;</webidl>
        <Type type="DOMString"/>
      </Attribute>
      <Attribute readonly="readonly" name="type" id="::dom::DOMError::type">
        <webidl>    readonly attribute DOMString       type;</webidl>
        <Type type="DOMString"/>
      </Attribute>
      <Attribute readonly="readonly" name="relatedException" id="::dom::DOMError::relatedException">
        <webidl>    readonly attribute <ref>DOMObject</ref>       relatedException;</webidl>
        <Type name="DOMObject"/>
      </Attribute>
      <Attribute readonly="readonly" name="relatedData" id="::dom::DOMError::relatedData">
        <webidl>    readonly attribute <ref>DOMObject</ref>       relatedData;</webidl>
        <Type name="DOMObject"/>
      </Attribute>
      <Attribute readonly="readonly" name="location" id="::dom::DOMError::location">
        <webidl>    readonly attribute <ref>DOMLocator</ref>      location;</webidl>
        <Type name="DOMLocator"/>
      </Attribute>
    </Interface>
    <Interface name="DOMErrorHandler" id="::dom::DOMErrorHandler">
      <webidl>  interface DOMErrorHandler {
    boolean            handleError(in <ref>DOMError</ref> error);
  };</webidl>
      <Operation name="handleError" id="::dom::DOMErrorHandler::handleError">
        <webidl>    boolean            handleError(in <ref>DOMError</ref> error);</webidl>
        <Type type="boolean"/>
        <ArgumentList>
          <Argument in="in" name="error">
            <Type name="DOMError"/>
          </Argument>
        </ArgumentList>
      </Operation>
    </Interface>
    <Interface name="DOMLocator" id="::dom::DOMLocator">
      <webidl>  interface DOMLocator {
    readonly attribute long            lineNumber;
    readonly attribute long            columnNumber;
    readonly attribute long            byteOffset;
    readonly attribute long            utf16Offset;
    readonly attribute <ref>Node</ref>            relatedNode;
    readonly attribute DOMString?      uri;
  };</webidl>
      <Attribute readonly="readonly" name="lineNumber" id="::dom::DOMLocator::lineNumber">
        <webidl>    readonly attribute long            lineNumber;</webidl>
        <Type type="long"/>
      </Attribute>
      <Attribute readonly="readonly" name="columnNumber" id="::dom::DOMLocator::columnNumber">
        <webidl>    readonly attribute long            columnNumber;</webidl>
        <Type type="long"/>
      </Attribute>
      <Attribute readonly="readonly" name="byteOffset" id="::dom::DOMLocator::byteOffset">
        <webidl>    readonly attribute long            byteOffset;</webidl>
        <Type type="long"/>
      </Attribute>
      <Attribute readonly="readonly" name="utf16Offset" id="::dom::DOMLocator::utf16Offset">
        <webidl>    readonly attribute long            utf16Offset;</webidl>
        <Type type="long"/>
      </Attribute>
      <Attribute readonly="readonly" name="relatedNode" id="::dom::DOMLocator::relatedNode">
        <webidl>    readonly attribute <ref>Node</ref>            relatedNode;</webidl>
        <Type name="Node"/>
      </Attribute>
      <Attribute readonly="readonly" name="uri" id="::dom::DOMLocator::uri">
        <webidl>    readonly attribute DOMString?      uri;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
    </Interface>
    <Interface name="DOMConfiguration" id="::dom::DOMConfiguration">
      <webidl>  interface DOMConfiguration {
    void               setParameter(in DOMString name, 
                                    in <ref>DOMUserData</ref> value)
                                        raises(<ref>DOMException</ref>);
    <ref>DOMUserData</ref>        getParameter(in DOMString name)
                                        raises(<ref>DOMException</ref>);
    boolean            canSetParameter(in DOMString name, 
                                       in <ref>DOMUserData</ref> value);
    readonly attribute <ref>DOMStringList</ref>   parameterNames;
  };</webidl>
      <Operation name="setParameter" id="::dom::DOMConfiguration::setParameter">
        <webidl>    void               setParameter(in DOMString name, 
                                    in <ref>DOMUserData</ref> value)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type type="void"/>
        <ArgumentList>
          <Argument in="in" name="name">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="value">
            <Type name="DOMUserData"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="getParameter" id="::dom::DOMConfiguration::getParameter">
        <webidl>    <ref>DOMUserData</ref>        getParameter(in DOMString name)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="DOMUserData"/>
        <ArgumentList>
          <Argument in="in" name="name">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="canSetParameter" id="::dom::DOMConfiguration::canSetParameter">
        <webidl>    boolean            canSetParameter(in DOMString name, 
                                       in <ref>DOMUserData</ref> value);</webidl>
        <Type type="boolean"/>
        <ArgumentList>
          <Argument in="in" name="name">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="value">
            <Type name="DOMUserData"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Attribute readonly="readonly" name="parameterNames" id="::dom::DOMConfiguration::parameterNames">
        <webidl>    readonly attribute <ref>DOMStringList</ref>   parameterNames;</webidl>
        <Type name="DOMStringList"/>
      </Attribute>
    </Interface>
    <Interface name="CDATASection" id="::dom::CDATASection">
      <webidl>  interface CDATASection : <ref>Text</ref> {
  };</webidl>
      <InterfaceInheritance>
        <Name name="Text"/>
      </InterfaceInheritance>
    </Interface>
    <Interface name="DocumentType" id="::dom::DocumentType">
      <webidl>  interface DocumentType : <ref>Node</ref> {
    readonly attribute DOMString       name;
    readonly attribute <ref>NamedNodeMap</ref>    entities;
    readonly attribute <ref>NamedNodeMap</ref>    notations;
    readonly attribute DOMString?      publicId;
    readonly attribute DOMString?      systemId;
    readonly attribute DOMString?      internalSubset;
  };</webidl>
      <InterfaceInheritance>
        <Name name="Node"/>
      </InterfaceInheritance>
      <Attribute readonly="readonly" name="name" id="::dom::DocumentType::name">
        <webidl>    readonly attribute DOMString       name;</webidl>
        <Type type="DOMString"/>
      </Attribute>
      <Attribute readonly="readonly" name="entities" id="::dom::DocumentType::entities">
        <webidl>    readonly attribute <ref>NamedNodeMap</ref>    entities;</webidl>
        <Type name="NamedNodeMap"/>
      </Attribute>
      <Attribute readonly="readonly" name="notations" id="::dom::DocumentType::notations">
        <webidl>    readonly attribute <ref>NamedNodeMap</ref>    notations;</webidl>
        <Type name="NamedNodeMap"/>
      </Attribute>
      <Attribute readonly="readonly" name="publicId" id="::dom::DocumentType::publicId">
        <webidl>    readonly attribute DOMString?      publicId;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute readonly="readonly" name="systemId" id="::dom::DocumentType::systemId">
        <webidl>    readonly attribute DOMString?      systemId;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute readonly="readonly" name="internalSubset" id="::dom::DocumentType::internalSubset">
        <webidl>    readonly attribute DOMString?      internalSubset;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
    </Interface>
    <Interface name="Notation" id="::dom::Notation">
      <webidl>  interface Notation : <ref>Node</ref> {
    readonly attribute DOMString?      publicId;
    readonly attribute DOMString?      systemId;
  };</webidl>
      <InterfaceInheritance>
        <Name name="Node"/>
      </InterfaceInheritance>
      <Attribute readonly="readonly" name="publicId" id="::dom::Notation::publicId">
        <webidl>    readonly attribute DOMString?      publicId;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute readonly="readonly" name="systemId" id="::dom::Notation::systemId">
        <webidl>    readonly attribute DOMString?      systemId;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
    </Interface>
    <Interface name="Entity" id="::dom::Entity">
      <webidl>  interface Entity : <ref>Node</ref> {
    readonly attribute DOMString?      publicId;
    readonly attribute DOMString?      systemId;
    readonly attribute DOMString?      notationName;
    readonly attribute DOMString?      inputEncoding;
    readonly attribute DOMString?      xmlEncoding;
    readonly attribute DOMString?      xmlVersion;
  };</webidl>
      <InterfaceInheritance>
        <Name name="Node"/>
      </InterfaceInheritance>
      <Attribute readonly="readonly" name="publicId" id="::dom::Entity::publicId">
        <webidl>    readonly attribute DOMString?      publicId;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute readonly="readonly" name="systemId" id="::dom::Entity::systemId">
        <webidl>    readonly attribute DOMString?      systemId;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute readonly="readonly" name="notationName" id="::dom::Entity::notationName">
        <webidl>    readonly attribute DOMString?      notationName;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute readonly="readonly" name="inputEncoding" id="::dom::Entity::inputEncoding">
        <webidl>    readonly attribute DOMString?      inputEncoding;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute readonly="readonly" name="xmlEncoding" id="::dom::Entity::xmlEncoding">
        <webidl>    readonly attribute DOMString?      xmlEncoding;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute readonly="readonly" name="xmlVersion" id="::dom::Entity::xmlVersion">
        <webidl>    readonly attribute DOMString?      xmlVersion;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
    </Interface>
    <Interface name="EntityReference" id="::dom::EntityReference">
      <webidl>  interface EntityReference : <ref>Node</ref> {
  };</webidl>
      <InterfaceInheritance>
        <Name name="Node"/>
      </InterfaceInheritance>
    </Interface>
    <Interface name="ProcessingInstruction" id="::dom::ProcessingInstruction">
      <webidl>  interface ProcessingInstruction : <ref>Node</ref> {
    readonly attribute DOMString       target;
             attribute DOMString       data setraises(<ref>DOMException</ref>);

  };</webidl>
      <InterfaceInheritance>
        <Name name="Node"/>
      </InterfaceInheritance>
      <Attribute readonly="readonly" name="target" id="::dom::ProcessingInstruction::target">
        <webidl>    readonly attribute DOMString       target;</webidl>
        <Type type="DOMString"/>
      </Attribute>
      <Attribute name="data" id="::dom::ProcessingInstruction::data">
        <webidl>             attribute DOMString       data setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
    </Interface>
    <Interface name="DocumentFragment" id="::dom::DocumentFragment">
      <webidl>  interface DocumentFragment : <ref>Node</ref> {
  };</webidl>
      <InterfaceInheritance>
        <Name name="Node"/>
      </InterfaceInheritance>
    </Interface>
    <Interface name="Document" id="::dom::Document">
      <webidl>  interface Document : <ref>Node</ref> {
    readonly attribute <ref>DocumentType</ref>    doctype;
    readonly attribute <ref>DOMImplementation</ref> implementation;
    readonly attribute <ref>Element</ref>         documentElement;
    <ref>Element</ref>            createElement(in DOMString tagName)
                                        raises(<ref>DOMException</ref>);
    <ref>DocumentFragment</ref>   createDocumentFragment();
    <ref>Text</ref>               createTextNode(in DOMString data);
    <ref>Comment</ref>            createComment(in DOMString data);
    <ref>CDATASection</ref>       createCDATASection(in DOMString data)
                                        raises(<ref>DOMException</ref>);
    <ref>ProcessingInstruction</ref> createProcessingInstruction(in DOMString target, 
                                                      in DOMString data)
                                        raises(<ref>DOMException</ref>);
    <ref>Attr</ref>               createAttribute(in DOMString name)
                                        raises(<ref>DOMException</ref>);
    <ref>EntityReference</ref>    createEntityReference(in DOMString name)
                                        raises(<ref>DOMException</ref>);
    <ref>NodeList</ref>           getElementsByTagName(in DOMString tagname);
    <ref>Node</ref>               importNode(in <ref>Node</ref> importedNode, 
                                  in boolean deep)
                                        raises(<ref>DOMException</ref>);
    <ref>Element</ref>            createElementNS(in DOMString? namespaceURI, 
                                       in DOMString qualifiedName)
                                        raises(<ref>DOMException</ref>);
    <ref>Attr</ref>               createAttributeNS(in DOMString? namespaceURI, 
                                         in DOMString qualifiedName)
                                        raises(<ref>DOMException</ref>);
    <ref>NodeList</ref>           getElementsByTagNameNS(in DOMString? namespaceURI, 
                                              in DOMString localName);
    <ref>Element</ref>            getElementById(in DOMString elementId);
    readonly attribute DOMString?      inputEncoding;
    readonly attribute DOMString?      xmlEncoding;
             attribute boolean         xmlStandalone setraises(<ref>DOMException</ref>);

             attribute DOMString?      xmlVersion setraises(<ref>DOMException</ref>);

             attribute boolean         strictErrorChecking;
             attribute DOMString?      documentURI;
    <ref>Node</ref>               adoptNode(in <ref>Node</ref> source)
                                        raises(<ref>DOMException</ref>);
    readonly attribute <ref>DOMConfiguration</ref> domConfig;
    void               normalizeDocument();
    <ref>Node</ref>               renameNode(in <ref>Node</ref> n, 
                                  in DOMString? namespaceURI, 
                                  in DOMString qualifiedName)
                                        raises(<ref>DOMException</ref>);
  };</webidl>
      <InterfaceInheritance>
        <Name name="Node"/>
      </InterfaceInheritance>
      <Attribute readonly="readonly" name="doctype" id="::dom::Document::doctype">
        <webidl>    readonly attribute <ref>DocumentType</ref>    doctype;</webidl>
        <Type name="DocumentType"/>
      </Attribute>
      <Attribute readonly="readonly" name="implementation" id="::dom::Document::implementation">
        <webidl>    readonly attribute <ref>DOMImplementation</ref> implementation;</webidl>
        <Type name="DOMImplementation"/>
      </Attribute>
      <Attribute readonly="readonly" name="documentElement" id="::dom::Document::documentElement">
        <webidl>    readonly attribute <ref>Element</ref>         documentElement;</webidl>
        <Type name="Element"/>
      </Attribute>
      <Operation name="createElement" id="::dom::Document::createElement">
        <webidl>    <ref>Element</ref>            createElement(in DOMString tagName)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Element"/>
        <ArgumentList>
          <Argument in="in" name="tagName">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="createDocumentFragment" id="::dom::Document::createDocumentFragment">
        <webidl>    <ref>DocumentFragment</ref>   createDocumentFragment();</webidl>
        <Type name="DocumentFragment"/>
        <ArgumentList/>
      </Operation>
      <Operation name="createTextNode" id="::dom::Document::createTextNode">
        <webidl>    <ref>Text</ref>               createTextNode(in DOMString data);</webidl>
        <Type name="Text"/>
        <ArgumentList>
          <Argument in="in" name="data">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="createComment" id="::dom::Document::createComment">
        <webidl>    <ref>Comment</ref>            createComment(in DOMString data);</webidl>
        <Type name="Comment"/>
        <ArgumentList>
          <Argument in="in" name="data">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="createCDATASection" id="::dom::Document::createCDATASection">
        <webidl>    <ref>CDATASection</ref>       createCDATASection(in DOMString data)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="CDATASection"/>
        <ArgumentList>
          <Argument in="in" name="data">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="createProcessingInstruction" id="::dom::Document::createProcessingInstruction">
        <webidl>    <ref>ProcessingInstruction</ref> createProcessingInstruction(in DOMString target, 
                                                      in DOMString data)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="ProcessingInstruction"/>
        <ArgumentList>
          <Argument in="in" name="target">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="data">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="createAttribute" id="::dom::Document::createAttribute">
        <webidl>    <ref>Attr</ref>               createAttribute(in DOMString name)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Attr"/>
        <ArgumentList>
          <Argument in="in" name="name">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="createEntityReference" id="::dom::Document::createEntityReference">
        <webidl>    <ref>EntityReference</ref>    createEntityReference(in DOMString name)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="EntityReference"/>
        <ArgumentList>
          <Argument in="in" name="name">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="getElementsByTagName" id="::dom::Document::getElementsByTagName">
        <webidl>    <ref>NodeList</ref>           getElementsByTagName(in DOMString tagname);</webidl>
        <Type name="NodeList"/>
        <ArgumentList>
          <Argument in="in" name="tagname">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="importNode" id="::dom::Document::importNode">
        <webidl>    <ref>Node</ref>               importNode(in <ref>Node</ref> importedNode, 
                                  in boolean deep)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Node"/>
        <ArgumentList>
          <Argument in="in" name="importedNode">
            <Type name="Node"/>
          </Argument>
          <Argument in="in" name="deep">
            <Type type="boolean"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="createElementNS" id="::dom::Document::createElementNS">
        <webidl>    <ref>Element</ref>            createElementNS(in DOMString? namespaceURI, 
                                       in DOMString qualifiedName)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Element"/>
        <ArgumentList>
          <Argument in="in" name="namespaceURI">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="qualifiedName">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="createAttributeNS" id="::dom::Document::createAttributeNS">
        <webidl>    <ref>Attr</ref>               createAttributeNS(in DOMString? namespaceURI, 
                                         in DOMString qualifiedName)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Attr"/>
        <ArgumentList>
          <Argument in="in" name="namespaceURI">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="qualifiedName">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="getElementsByTagNameNS" id="::dom::Document::getElementsByTagNameNS">
        <webidl>    <ref>NodeList</ref>           getElementsByTagNameNS(in DOMString? namespaceURI, 
                                              in DOMString localName);</webidl>
        <Type name="NodeList"/>
        <ArgumentList>
          <Argument in="in" name="namespaceURI">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="localName">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="getElementById" id="::dom::Document::getElementById">
        <webidl>    <ref>Element</ref>            getElementById(in DOMString elementId);</webidl>
        <Type name="Element"/>
        <ArgumentList>
          <Argument in="in" name="elementId">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Attribute readonly="readonly" name="inputEncoding" id="::dom::Document::inputEncoding">
        <webidl>    readonly attribute DOMString?      inputEncoding;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute readonly="readonly" name="xmlEncoding" id="::dom::Document::xmlEncoding">
        <webidl>    readonly attribute DOMString?      xmlEncoding;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute name="xmlStandalone" id="::dom::Document::xmlStandalone">
        <webidl>             attribute boolean         xmlStandalone setraises(<ref>DOMException</ref>);</webidl>
        <Type type="boolean"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="xmlVersion" id="::dom::Document::xmlVersion">
        <webidl>             attribute DOMString?      xmlVersion setraises(<ref>DOMException</ref>);</webidl>
        <Type type="DOMString" nullable="nullable"/>
        <SetRaises>
          <RaiseException name="DOMException"/>
        </SetRaises>
      </Attribute>
      <Attribute name="strictErrorChecking" id="::dom::Document::strictErrorChecking">
        <webidl>             attribute boolean         strictErrorChecking;</webidl>
        <Type type="boolean"/>
      </Attribute>
      <Attribute name="documentURI" id="::dom::Document::documentURI">
        <webidl>             attribute DOMString?      documentURI;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Operation name="adoptNode" id="::dom::Document::adoptNode">
        <webidl>    <ref>Node</ref>               adoptNode(in <ref>Node</ref> source)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Node"/>
        <ArgumentList>
          <Argument in="in" name="source">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Attribute readonly="readonly" name="domConfig" id="::dom::Document::domConfig">
        <webidl>    readonly attribute <ref>DOMConfiguration</ref> domConfig;</webidl>
        <Type name="DOMConfiguration"/>
      </Attribute>
      <Operation name="normalizeDocument" id="::dom::Document::normalizeDocument">
        <webidl>    void               normalizeDocument();</webidl>
        <Type type="void"/>
        <ArgumentList/>
      </Operation>
      <Operation name="renameNode" id="::dom::Document::renameNode">
        <webidl>    <ref>Node</ref>               renameNode(in <ref>Node</ref> n, 
                                  in DOMString? namespaceURI, 
                                  in DOMString qualifiedName)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="Node"/>
        <ArgumentList>
          <Argument in="in" name="n">
            <Type name="Node"/>
          </Argument>
          <Argument in="in" name="namespaceURI">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="qualifiedName">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
    </Interface>
  </Module>
</Definitions>
