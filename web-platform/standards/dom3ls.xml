<Definitions>
  <Module name="ls" id="::ls">
    <webidl>module ls {

  typedef   <ref>Object</ref> LSInputStream;

  typedef   <ref>Object</ref> LSOutputStream;

  typedef   <ref>Object</ref> LSReader;

  typedef   <ref>Object</ref> LSWriter;

  typedef <ref>dom::DOMConfiguration</ref> DOMConfiguration;
  typedef <ref>dom::DOMException</ref> DOMException;
  typedef <ref>dom::Node</ref> Node;
  typedef <ref>dom::Document</ref> Document;
  typedef <ref>dom::Element</ref> Element;

  exception LSException {
    const unsigned short      PARSE_ERR                      = 81;
    const unsigned short      SERIALIZE_ERR                  = 82;

    unsigned short   code;
  };

  interface DOMImplementationLS {

    const unsigned short      MODE_SYNCHRONOUS               = 1;
    const unsigned short      MODE_ASYNCHRONOUS              = 2;

    <ref>LSParser</ref>           createLSParser(in unsigned short mode, 
                                      in DOMString? schemaType)
                                        raises(<ref>DOMException</ref>);
    <ref>LSSerializer</ref>       createLSSerializer();
    <ref>LSInput</ref>            createLSInput();
    <ref>LSOutput</ref>           createLSOutput();
  };

  <ref>DOMImplementation</ref> implements <ref>DOMImplementationLS</ref>;

  interface LSParser {
    readonly attribute <ref>DOMConfiguration</ref> domConfig;
             attribute <ref>LSParserFilter</ref>  filter;
    readonly attribute boolean         async;
    readonly attribute boolean         busy;
    <ref>Document</ref>           parse(in <ref>LSInput</ref> input)
                                        raises(<ref>DOMException</ref>, 
                                               <ref>LSException</ref>);
    <ref>Document</ref>           parseURI(in DOMString uri)
                                        raises(<ref>DOMException</ref>, 
                                               <ref>LSException</ref>);

    const unsigned short      ACTION_APPEND_AS_CHILDREN      = 1;
    const unsigned short      ACTION_REPLACE_CHILDREN        = 2;
    const unsigned short      ACTION_INSERT_BEFORE           = 3;
    const unsigned short      ACTION_INSERT_AFTER            = 4;
    const unsigned short      ACTION_REPLACE                 = 5;

    <ref>Node</ref>               parseWithContext(in <ref>LSInput</ref> input, 
                                        in <ref>Node</ref> contextArg, 
                                        in unsigned short action)
                                        raises(<ref>DOMException</ref>, 
                                               <ref>LSException</ref>);
    void               abort();
  };

  [Callback]
  interface LSInput {
             attribute <ref>LSReader</ref>        characterStream;
             attribute <ref>LSInputStream</ref>   byteStream;
             attribute DOMString?      stringData;
             attribute DOMString?      systemId;
             attribute DOMString?      publicId;
             attribute DOMString?      baseURI;
             attribute DOMString?      encoding;
             attribute boolean         certifiedText;
  };

  [Callback]
  interface LSResourceResolver {
    <ref>LSInput</ref>            resolveResource(in DOMString type, 
                                       in DOMString? namespaceURI, 
                                       in DOMString? publicId, 
                                       in DOMString? systemId, 
                                       in DOMString? baseURI);
  };

  [Callback]
  interface LSParserFilter {

    const short               FILTER_ACCEPT                  = 1;
    const short               FILTER_REJECT                  = 2;
    const short               FILTER_SKIP                    = 3;
    const short               FILTER_INTERRUPT               = 4;

    unsigned short     startElement(in <ref>Element</ref> elementArg);
    unsigned short     acceptNode(in <ref>Node</ref> nodeArg);
    readonly attribute unsigned long   whatToShow;
  };

  interface LSSerializer {
    readonly attribute <ref>DOMConfiguration</ref> domConfig;
             attribute DOMString?      newLine;
             attribute <ref>LSSerializerFilter</ref> filter;
    boolean            write(in <ref>Node</ref> nodeArg, 
                             in <ref>LSOutput</ref> destination)
                                        raises(<ref>LSException</ref>);
    boolean            writeToURI(in <ref>Node</ref> nodeArg, 
                                  in DOMString uri)
                                        raises(<ref>LSException</ref>);
    DOMString          writeToString(in <ref>Node</ref> nodeArg)
                                        raises(<ref>DOMException</ref>, 
                                               <ref>LSException</ref>);
  };

  [Callback]
  interface LSOutput {
             attribute <ref>LSWriter</ref>        characterStream;
             attribute <ref>LSOutputStream</ref>  byteStream;
             attribute DOMString?      systemId;
             attribute DOMString?      encoding;
  };

  interface LSProgressEvent : <ref>events::Event</ref> {
    readonly attribute <ref>LSInput</ref>         input;
    readonly attribute unsigned long   position;
    readonly attribute unsigned long   totalSize;
  };

  interface LSLoadEvent : <ref>events::Event</ref> {
    readonly attribute <ref>Document</ref>        newDocument;
    readonly attribute <ref>LSInput</ref>         input;
  };

  [Callback]
  interface LSSerializerFilter : <ref>traversal::NodeFilter</ref> {
    readonly attribute unsigned long   whatToShow;
  };
};</webidl>
    <Typedef name="LSInputStream" id="::ls::LSInputStream">
      <webidl>  typedef   <ref>Object</ref> LSInputStream;</webidl>
      <Type name="Object"/>
    </Typedef>
    <Typedef name="LSOutputStream" id="::ls::LSOutputStream">
      <webidl>  typedef   <ref>Object</ref> LSOutputStream;</webidl>
      <Type name="Object"/>
    </Typedef>
    <Typedef name="LSReader" id="::ls::LSReader">
      <webidl>  typedef   <ref>Object</ref> LSReader;</webidl>
      <Type name="Object"/>
    </Typedef>
    <Typedef name="LSWriter" id="::ls::LSWriter">
      <webidl>  typedef   <ref>Object</ref> LSWriter;</webidl>
      <Type name="Object"/>
    </Typedef>
    <Typedef name="DOMConfiguration" id="::ls::DOMConfiguration">
      <webidl>  typedef <ref>dom::DOMConfiguration</ref> DOMConfiguration;</webidl>
      <Type name="domDOMConfiguration"/>
    </Typedef>
    <Typedef name="DOMException" id="::ls::DOMException">
      <webidl>  typedef <ref>dom::DOMException</ref> DOMException;</webidl>
      <Type name="domDOMException"/>
    </Typedef>
    <Typedef name="Node" id="::ls::Node">
      <webidl>  typedef <ref>dom::Node</ref> Node;</webidl>
      <Type name="domNode"/>
    </Typedef>
    <Typedef name="Document" id="::ls::Document">
      <webidl>  typedef <ref>dom::Document</ref> Document;</webidl>
      <Type name="domDocument"/>
    </Typedef>
    <Typedef name="Element" id="::ls::Element">
      <webidl>  typedef <ref>dom::Element</ref> Element;</webidl>
      <Type name="domElement"/>
    </Typedef>
    <Exception name="LSException" id="::ls::LSException">
      <webidl>  exception LSException {
    const unsigned short      PARSE_ERR                      = 81;
    const unsigned short      SERIALIZE_ERR                  = 82;

    unsigned short   code;
  };</webidl>
      <Const name="PARSE_ERR" value="81" id="::ls::LSException::PARSE_ERR">
        <Type type="unsigned short"/>
      </Const>
      <Const name="SERIALIZE_ERR" value="82" id="::ls::LSException::SERIALIZE_ERR">
        <Type type="unsigned short"/>
      </Const>
      <ExceptionField name="code" id="::ls::LSException::code">
        <Type type="unsigned short"/>
      </ExceptionField>
    </Exception>
    <Interface name="DOMImplementationLS" id="::ls::DOMImplementationLS">
      <webidl>  interface DOMImplementationLS {

    const unsigned short      MODE_SYNCHRONOUS               = 1;
    const unsigned short      MODE_ASYNCHRONOUS              = 2;

    <ref>LSParser</ref>           createLSParser(in unsigned short mode, 
                                      in DOMString? schemaType)
                                        raises(<ref>DOMException</ref>);
    <ref>LSSerializer</ref>       createLSSerializer();
    <ref>LSInput</ref>            createLSInput();
    <ref>LSOutput</ref>           createLSOutput();
  };</webidl>
      <Const name="MODE_SYNCHRONOUS" value="1" id="::ls::DOMImplementationLS::MODE_SYNCHRONOUS">
        <webidl>    const unsigned short      MODE_SYNCHRONOUS               = 1;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="MODE_ASYNCHRONOUS" value="2" id="::ls::DOMImplementationLS::MODE_ASYNCHRONOUS">
        <webidl>    const unsigned short      MODE_ASYNCHRONOUS              = 2;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Operation name="createLSParser" id="::ls::DOMImplementationLS::createLSParser">
        <webidl>    <ref>LSParser</ref>           createLSParser(in unsigned short mode, 
                                      in DOMString? schemaType)
                                        raises(<ref>DOMException</ref>);</webidl>
        <Type name="LSParser"/>
        <ArgumentList>
          <Argument in="in" name="mode">
            <Type type="unsigned short"/>
          </Argument>
          <Argument in="in" name="schemaType">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="createLSSerializer" id="::ls::DOMImplementationLS::createLSSerializer">
        <webidl>    <ref>LSSerializer</ref>       createLSSerializer();</webidl>
        <Type name="LSSerializer"/>
        <ArgumentList/>
      </Operation>
      <Operation name="createLSInput" id="::ls::DOMImplementationLS::createLSInput">
        <webidl>    <ref>LSInput</ref>            createLSInput();</webidl>
        <Type name="LSInput"/>
        <ArgumentList/>
      </Operation>
      <Operation name="createLSOutput" id="::ls::DOMImplementationLS::createLSOutput">
        <webidl>    <ref>LSOutput</ref>           createLSOutput();</webidl>
        <Type name="LSOutput"/>
        <ArgumentList/>
      </Operation>
    </Interface>
    <Implements name1="DOMImplementation" name2="DOMImplementationLS">
      <webidl>  <ref>DOMImplementation</ref> implements <ref>DOMImplementationLS</ref>;</webidl>
    </Implements>
    <Interface name="LSParser" id="::ls::LSParser">
      <webidl>  interface LSParser {
    readonly attribute <ref>DOMConfiguration</ref> domConfig;
             attribute <ref>LSParserFilter</ref>  filter;
    readonly attribute boolean         async;
    readonly attribute boolean         busy;
    <ref>Document</ref>           parse(in <ref>LSInput</ref> input)
                                        raises(<ref>DOMException</ref>, 
                                               <ref>LSException</ref>);
    <ref>Document</ref>           parseURI(in DOMString uri)
                                        raises(<ref>DOMException</ref>, 
                                               <ref>LSException</ref>);

    const unsigned short      ACTION_APPEND_AS_CHILDREN      = 1;
    const unsigned short      ACTION_REPLACE_CHILDREN        = 2;
    const unsigned short      ACTION_INSERT_BEFORE           = 3;
    const unsigned short      ACTION_INSERT_AFTER            = 4;
    const unsigned short      ACTION_REPLACE                 = 5;

    <ref>Node</ref>               parseWithContext(in <ref>LSInput</ref> input, 
                                        in <ref>Node</ref> contextArg, 
                                        in unsigned short action)
                                        raises(<ref>DOMException</ref>, 
                                               <ref>LSException</ref>);
    void               abort();
  };</webidl>
      <Attribute readonly="readonly" name="domConfig" id="::ls::LSParser::domConfig">
        <webidl>    readonly attribute <ref>DOMConfiguration</ref> domConfig;</webidl>
        <Type name="DOMConfiguration"/>
      </Attribute>
      <Attribute name="filter" id="::ls::LSParser::filter">
        <webidl>             attribute <ref>LSParserFilter</ref>  filter;</webidl>
        <Type name="LSParserFilter"/>
      </Attribute>
      <Attribute readonly="readonly" name="async" id="::ls::LSParser::async">
        <webidl>    readonly attribute boolean         async;</webidl>
        <Type type="boolean"/>
      </Attribute>
      <Attribute readonly="readonly" name="busy" id="::ls::LSParser::busy">
        <webidl>    readonly attribute boolean         busy;</webidl>
        <Type type="boolean"/>
      </Attribute>
      <Operation name="parse" id="::ls::LSParser::parse">
        <webidl>    <ref>Document</ref>           parse(in <ref>LSInput</ref> input)
                                        raises(<ref>DOMException</ref>, 
                                               <ref>LSException</ref>);</webidl>
        <Type name="Document"/>
        <ArgumentList>
          <Argument in="in" name="input">
            <Type name="LSInput"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
          <RaiseException name="LSException"/>
        </Raises>
      </Operation>
      <Operation name="parseURI" id="::ls::LSParser::parseURI">
        <webidl>    <ref>Document</ref>           parseURI(in DOMString uri)
                                        raises(<ref>DOMException</ref>, 
                                               <ref>LSException</ref>);</webidl>
        <Type name="Document"/>
        <ArgumentList>
          <Argument in="in" name="uri">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
          <RaiseException name="LSException"/>
        </Raises>
      </Operation>
      <Const name="ACTION_APPEND_AS_CHILDREN" value="1" id="::ls::LSParser::ACTION_APPEND_AS_CHILDREN">
        <webidl>    const unsigned short      ACTION_APPEND_AS_CHILDREN      = 1;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="ACTION_REPLACE_CHILDREN" value="2" id="::ls::LSParser::ACTION_REPLACE_CHILDREN">
        <webidl>    const unsigned short      ACTION_REPLACE_CHILDREN        = 2;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="ACTION_INSERT_BEFORE" value="3" id="::ls::LSParser::ACTION_INSERT_BEFORE">
        <webidl>    const unsigned short      ACTION_INSERT_BEFORE           = 3;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="ACTION_INSERT_AFTER" value="4" id="::ls::LSParser::ACTION_INSERT_AFTER">
        <webidl>    const unsigned short      ACTION_INSERT_AFTER            = 4;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="ACTION_REPLACE" value="5" id="::ls::LSParser::ACTION_REPLACE">
        <webidl>    const unsigned short      ACTION_REPLACE                 = 5;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Operation name="parseWithContext" id="::ls::LSParser::parseWithContext">
        <webidl>    <ref>Node</ref>               parseWithContext(in <ref>LSInput</ref> input, 
                                        in <ref>Node</ref> contextArg, 
                                        in unsigned short action)
                                        raises(<ref>DOMException</ref>, 
                                               <ref>LSException</ref>);</webidl>
        <Type name="Node"/>
        <ArgumentList>
          <Argument in="in" name="input">
            <Type name="LSInput"/>
          </Argument>
          <Argument in="in" name="contextArg">
            <Type name="Node"/>
          </Argument>
          <Argument in="in" name="action">
            <Type type="unsigned short"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
          <RaiseException name="LSException"/>
        </Raises>
      </Operation>
      <Operation name="abort" id="::ls::LSParser::abort">
        <webidl>    void               abort();</webidl>
        <Type type="void"/>
        <ArgumentList/>
      </Operation>
    </Interface>
    <Interface name="LSInput" id="::ls::LSInput">
      <webidl>  [Callback]
  interface LSInput {
             attribute <ref>LSReader</ref>        characterStream;
             attribute <ref>LSInputStream</ref>   byteStream;
             attribute DOMString?      stringData;
             attribute DOMString?      systemId;
             attribute DOMString?      publicId;
             attribute DOMString?      baseURI;
             attribute DOMString?      encoding;
             attribute boolean         certifiedText;
  };</webidl>
      <ExtendedAttributeList>
        <ExtendedAttribute name="Callback"/>
      </ExtendedAttributeList>
      <Attribute name="characterStream" id="::ls::LSInput::characterStream">
        <webidl>             attribute <ref>LSReader</ref>        characterStream;</webidl>
        <Type name="LSReader"/>
      </Attribute>
      <Attribute name="byteStream" id="::ls::LSInput::byteStream">
        <webidl>             attribute <ref>LSInputStream</ref>   byteStream;</webidl>
        <Type name="LSInputStream"/>
      </Attribute>
      <Attribute name="stringData" id="::ls::LSInput::stringData">
        <webidl>             attribute DOMString?      stringData;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute name="systemId" id="::ls::LSInput::systemId">
        <webidl>             attribute DOMString?      systemId;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute name="publicId" id="::ls::LSInput::publicId">
        <webidl>             attribute DOMString?      publicId;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute name="baseURI" id="::ls::LSInput::baseURI">
        <webidl>             attribute DOMString?      baseURI;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute name="encoding" id="::ls::LSInput::encoding">
        <webidl>             attribute DOMString?      encoding;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute name="certifiedText" id="::ls::LSInput::certifiedText">
        <webidl>             attribute boolean         certifiedText;</webidl>
        <Type type="boolean"/>
      </Attribute>
    </Interface>
    <Interface name="LSResourceResolver" id="::ls::LSResourceResolver">
      <webidl>  [Callback]
  interface LSResourceResolver {
    <ref>LSInput</ref>            resolveResource(in DOMString type, 
                                       in DOMString? namespaceURI, 
                                       in DOMString? publicId, 
                                       in DOMString? systemId, 
                                       in DOMString? baseURI);
  };</webidl>
      <ExtendedAttributeList>
        <ExtendedAttribute name="Callback"/>
      </ExtendedAttributeList>
      <Operation name="resolveResource" id="::ls::LSResourceResolver::resolveResource">
        <webidl>    <ref>LSInput</ref>            resolveResource(in DOMString type, 
                                       in DOMString? namespaceURI, 
                                       in DOMString? publicId, 
                                       in DOMString? systemId, 
                                       in DOMString? baseURI);</webidl>
        <Type name="LSInput"/>
        <ArgumentList>
          <Argument in="in" name="type">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="namespaceURI">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="publicId">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="systemId">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
          <Argument in="in" name="baseURI">
            <Type type="DOMString" nullable="nullable"/>
          </Argument>
        </ArgumentList>
      </Operation>
    </Interface>
    <Interface name="LSParserFilter" id="::ls::LSParserFilter">
      <webidl>  [Callback]
  interface LSParserFilter {

    const short               FILTER_ACCEPT                  = 1;
    const short               FILTER_REJECT                  = 2;
    const short               FILTER_SKIP                    = 3;
    const short               FILTER_INTERRUPT               = 4;

    unsigned short     startElement(in <ref>Element</ref> elementArg);
    unsigned short     acceptNode(in <ref>Node</ref> nodeArg);
    readonly attribute unsigned long   whatToShow;
  };</webidl>
      <ExtendedAttributeList>
        <ExtendedAttribute name="Callback"/>
      </ExtendedAttributeList>
      <Const name="FILTER_ACCEPT" value="1" id="::ls::LSParserFilter::FILTER_ACCEPT">
        <webidl>    const short               FILTER_ACCEPT                  = 1;</webidl>
        <Type type="short"/>
      </Const>
      <Const name="FILTER_REJECT" value="2" id="::ls::LSParserFilter::FILTER_REJECT">
        <webidl>    const short               FILTER_REJECT                  = 2;</webidl>
        <Type type="short"/>
      </Const>
      <Const name="FILTER_SKIP" value="3" id="::ls::LSParserFilter::FILTER_SKIP">
        <webidl>    const short               FILTER_SKIP                    = 3;</webidl>
        <Type type="short"/>
      </Const>
      <Const name="FILTER_INTERRUPT" value="4" id="::ls::LSParserFilter::FILTER_INTERRUPT">
        <webidl>    const short               FILTER_INTERRUPT               = 4;</webidl>
        <Type type="short"/>
      </Const>
      <Operation name="startElement" id="::ls::LSParserFilter::startElement">
        <webidl>    unsigned short     startElement(in <ref>Element</ref> elementArg);</webidl>
        <Type type="unsigned short"/>
        <ArgumentList>
          <Argument in="in" name="elementArg">
            <Type name="Element"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="acceptNode" id="::ls::LSParserFilter::acceptNode">
        <webidl>    unsigned short     acceptNode(in <ref>Node</ref> nodeArg);</webidl>
        <Type type="unsigned short"/>
        <ArgumentList>
          <Argument in="in" name="nodeArg">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Attribute readonly="readonly" name="whatToShow" id="::ls::LSParserFilter::whatToShow">
        <webidl>    readonly attribute unsigned long   whatToShow;</webidl>
        <Type type="unsigned long"/>
      </Attribute>
    </Interface>
    <Interface name="LSSerializer" id="::ls::LSSerializer">
      <webidl>  interface LSSerializer {
    readonly attribute <ref>DOMConfiguration</ref> domConfig;
             attribute DOMString?      newLine;
             attribute <ref>LSSerializerFilter</ref> filter;
    boolean            write(in <ref>Node</ref> nodeArg, 
                             in <ref>LSOutput</ref> destination)
                                        raises(<ref>LSException</ref>);
    boolean            writeToURI(in <ref>Node</ref> nodeArg, 
                                  in DOMString uri)
                                        raises(<ref>LSException</ref>);
    DOMString          writeToString(in <ref>Node</ref> nodeArg)
                                        raises(<ref>DOMException</ref>, 
                                               <ref>LSException</ref>);
  };</webidl>
      <Attribute readonly="readonly" name="domConfig" id="::ls::LSSerializer::domConfig">
        <webidl>    readonly attribute <ref>DOMConfiguration</ref> domConfig;</webidl>
        <Type name="DOMConfiguration"/>
      </Attribute>
      <Attribute name="newLine" id="::ls::LSSerializer::newLine">
        <webidl>             attribute DOMString?      newLine;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute name="filter" id="::ls::LSSerializer::filter">
        <webidl>             attribute <ref>LSSerializerFilter</ref> filter;</webidl>
        <Type name="LSSerializerFilter"/>
      </Attribute>
      <Operation name="write" id="::ls::LSSerializer::write">
        <webidl>    boolean            write(in <ref>Node</ref> nodeArg, 
                             in <ref>LSOutput</ref> destination)
                                        raises(<ref>LSException</ref>);</webidl>
        <Type type="boolean"/>
        <ArgumentList>
          <Argument in="in" name="nodeArg">
            <Type name="Node"/>
          </Argument>
          <Argument in="in" name="destination">
            <Type name="LSOutput"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="LSException"/>
        </Raises>
      </Operation>
      <Operation name="writeToURI" id="::ls::LSSerializer::writeToURI">
        <webidl>    boolean            writeToURI(in <ref>Node</ref> nodeArg, 
                                  in DOMString uri)
                                        raises(<ref>LSException</ref>);</webidl>
        <Type type="boolean"/>
        <ArgumentList>
          <Argument in="in" name="nodeArg">
            <Type name="Node"/>
          </Argument>
          <Argument in="in" name="uri">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="LSException"/>
        </Raises>
      </Operation>
      <Operation name="writeToString" id="::ls::LSSerializer::writeToString">
        <webidl>    DOMString          writeToString(in <ref>Node</ref> nodeArg)
                                        raises(<ref>DOMException</ref>, 
                                               <ref>LSException</ref>);</webidl>
        <Type type="DOMString"/>
        <ArgumentList>
          <Argument in="in" name="nodeArg">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="DOMException"/>
          <RaiseException name="LSException"/>
        </Raises>
      </Operation>
    </Interface>
    <Interface name="LSOutput" id="::ls::LSOutput">
      <webidl>  [Callback]
  interface LSOutput {
             attribute <ref>LSWriter</ref>        characterStream;
             attribute <ref>LSOutputStream</ref>  byteStream;
             attribute DOMString?      systemId;
             attribute DOMString?      encoding;
  };</webidl>
      <ExtendedAttributeList>
        <ExtendedAttribute name="Callback"/>
      </ExtendedAttributeList>
      <Attribute name="characterStream" id="::ls::LSOutput::characterStream">
        <webidl>             attribute <ref>LSWriter</ref>        characterStream;</webidl>
        <Type name="LSWriter"/>
      </Attribute>
      <Attribute name="byteStream" id="::ls::LSOutput::byteStream">
        <webidl>             attribute <ref>LSOutputStream</ref>  byteStream;</webidl>
        <Type name="LSOutputStream"/>
      </Attribute>
      <Attribute name="systemId" id="::ls::LSOutput::systemId">
        <webidl>             attribute DOMString?      systemId;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
      <Attribute name="encoding" id="::ls::LSOutput::encoding">
        <webidl>             attribute DOMString?      encoding;</webidl>
        <Type type="DOMString" nullable="nullable"/>
      </Attribute>
    </Interface>
    <Interface name="LSProgressEvent" id="::ls::LSProgressEvent">
      <webidl>  interface LSProgressEvent : <ref>events::Event</ref> {
    readonly attribute <ref>LSInput</ref>         input;
    readonly attribute unsigned long   position;
    readonly attribute unsigned long   totalSize;
  };</webidl>
      <InterfaceInheritance>
        <Name name="eventsEvent"/>
      </InterfaceInheritance>
      <Attribute readonly="readonly" name="input" id="::ls::LSProgressEvent::input">
        <webidl>    readonly attribute <ref>LSInput</ref>         input;</webidl>
        <Type name="LSInput"/>
      </Attribute>
      <Attribute readonly="readonly" name="position" id="::ls::LSProgressEvent::position">
        <webidl>    readonly attribute unsigned long   position;</webidl>
        <Type type="unsigned long"/>
      </Attribute>
      <Attribute readonly="readonly" name="totalSize" id="::ls::LSProgressEvent::totalSize">
        <webidl>    readonly attribute unsigned long   totalSize;</webidl>
        <Type type="unsigned long"/>
      </Attribute>
    </Interface>
    <Interface name="LSLoadEvent" id="::ls::LSLoadEvent">
      <webidl>  interface LSLoadEvent : <ref>events::Event</ref> {
    readonly attribute <ref>Document</ref>        newDocument;
    readonly attribute <ref>LSInput</ref>         input;
  };</webidl>
      <InterfaceInheritance>
        <Name name="eventsEvent"/>
      </InterfaceInheritance>
      <Attribute readonly="readonly" name="newDocument" id="::ls::LSLoadEvent::newDocument">
        <webidl>    readonly attribute <ref>Document</ref>        newDocument;</webidl>
        <Type name="Document"/>
      </Attribute>
      <Attribute readonly="readonly" name="input" id="::ls::LSLoadEvent::input">
        <webidl>    readonly attribute <ref>LSInput</ref>         input;</webidl>
        <Type name="LSInput"/>
      </Attribute>
    </Interface>
    <Interface name="LSSerializerFilter" id="::ls::LSSerializerFilter">
      <webidl>  [Callback]
  interface LSSerializerFilter : <ref>traversal::NodeFilter</ref> {
    readonly attribute unsigned long   whatToShow;
  };</webidl>
      <ExtendedAttributeList>
        <ExtendedAttribute name="Callback"/>
      </ExtendedAttributeList>
      <InterfaceInheritance>
        <Name name="traversalNodeFilter"/>
      </InterfaceInheritance>
      <Attribute readonly="readonly" name="whatToShow" id="::ls::LSSerializerFilter::whatToShow">
        <webidl>    readonly attribute unsigned long   whatToShow;</webidl>
        <Type type="unsigned long"/>
      </Attribute>
    </Interface>
  </Module>
</Definitions>
