<Definitions>
  <Module name="xpath" id="::xpath">
    <webidl>module xpath {

  typedef <ref>dom::Node</ref> Node;
  typedef <ref>dom::DOMObject</ref> DOMObject;
  typedef <ref>dom::Element</ref> Element;
  typedef <ref>dom::Document</ref> Document;
  typedef <ref>dom::DOMException</ref> DOMException;

  exception XPathException {
    const unsigned short      INVALID_EXPRESSION_ERR         = 51;
    const unsigned short      TYPE_ERR                       = 52;

    unsigned short   code;
  };

  interface XPathEvaluator {
    <ref>XPathExpression</ref>    createExpression(in DOMString expression, 
                                        in <ref>XPathNSResolver</ref> resolver)
                                        raises(<ref>XPathException</ref>, 
                                               <ref>DOMException</ref>);
    <ref>XPathNSResolver</ref>    createNSResolver(in <ref>Node</ref> nodeResolver);
    <ref>DOMObject</ref>          evaluate(in DOMString expression, 
                                in <ref>Node</ref> contextNode, 
                                in <ref>XPathNSResolver</ref> resolver, 
                                in unsigned short type, 
                                in <ref>DOMObject</ref> result)
                                        raises(<ref>XPathException</ref>, 
                                               <ref>DOMException</ref>);
  };

  <ref>Document</ref> implements <ref>XPathEvaluator</ref>;

  interface XPathExpression {
    <ref>DOMObject</ref>          evaluate(in <ref>Node</ref> contextNode, 
                                in unsigned short type, 
                                in <ref>DOMObject</ref> result)
                                        raises(<ref>XPathException</ref>, 
                                               <ref>dom::DOMException</ref>);
  };

  [Callback]
  interface XPathNSResolver {
    DOMString?         lookupNamespaceURI(in DOMString prefix);
  };

  interface XPathResult {

    const unsigned short      ANY_TYPE                       = 0;
    const unsigned short      NUMBER_TYPE                    = 1;
    const unsigned short      STRING_TYPE                    = 2;
    const unsigned short      BOOLEAN_TYPE                   = 3;
    const unsigned short      UNORDERED_NODE_ITERATOR_TYPE   = 4;
    const unsigned short      ORDERED_NODE_ITERATOR_TYPE     = 5;
    const unsigned short      UNORDERED_NODE_SNAPSHOT_TYPE   = 6;
    const unsigned short      ORDERED_NODE_SNAPSHOT_TYPE     = 7;
    const unsigned short      ANY_UNORDERED_NODE_TYPE        = 8;
    const unsigned short      FIRST_ORDERED_NODE_TYPE        = 9;

    readonly attribute unsigned short  resultType;
    readonly attribute double          numberValue getraises(<ref>XPathException</ref>);

    readonly attribute DOMString       stringValue getraises(<ref>XPathException</ref>);

    readonly attribute boolean         booleanValue getraises(<ref>XPathException</ref>);

    readonly attribute <ref>Node</ref>            singleNodeValue getraises(<ref>XPathException</ref>);

    readonly attribute boolean         invalidIteratorState;
    readonly attribute unsigned long   snapshotLength getraises(<ref>XPathException</ref>);

    <ref>Node</ref>               iterateNext()
                                        raises(<ref>XPathException</ref>, 
                                               <ref>DOMException</ref>);
    <ref>Node</ref>               snapshotItem(in unsigned long index)
                                        raises(<ref>XPathException</ref>);
  };

  interface XPathNamespace : <ref>Node</ref> {

    const unsigned short      XPATH_NAMESPACE_NODE           = 13;

    readonly attribute <ref>Element</ref>         ownerElement;
  };
};</webidl>
    <Typedef name="Node" id="::xpath::Node">
      <webidl>  typedef <ref>dom::Node</ref> Node;</webidl>
      <Type name="domNode"/>
    </Typedef>
    <Typedef name="DOMObject" id="::xpath::DOMObject">
      <webidl>  typedef <ref>dom::DOMObject</ref> DOMObject;</webidl>
      <Type name="domDOMObject"/>
    </Typedef>
    <Typedef name="Element" id="::xpath::Element">
      <webidl>  typedef <ref>dom::Element</ref> Element;</webidl>
      <Type name="domElement"/>
    </Typedef>
    <Typedef name="Document" id="::xpath::Document">
      <webidl>  typedef <ref>dom::Document</ref> Document;</webidl>
      <Type name="domDocument"/>
    </Typedef>
    <Typedef name="DOMException" id="::xpath::DOMException">
      <webidl>  typedef <ref>dom::DOMException</ref> DOMException;</webidl>
      <Type name="domDOMException"/>
    </Typedef>
    <Exception name="XPathException" id="::xpath::XPathException">
      <webidl>  exception XPathException {
    const unsigned short      INVALID_EXPRESSION_ERR         = 51;
    const unsigned short      TYPE_ERR                       = 52;

    unsigned short   code;
  };</webidl>
      <Const name="INVALID_EXPRESSION_ERR" value="51" id="::xpath::XPathException::INVALID_EXPRESSION_ERR">
        <Type type="unsigned short"/>
      </Const>
      <Const name="TYPE_ERR" value="52" id="::xpath::XPathException::TYPE_ERR">
        <Type type="unsigned short"/>
      </Const>
      <ExceptionField name="code" id="::xpath::XPathException::code">
        <Type type="unsigned short"/>
      </ExceptionField>
    </Exception>
    <Interface name="XPathEvaluator" id="::xpath::XPathEvaluator">
      <webidl>  interface XPathEvaluator {
    <ref>XPathExpression</ref>    createExpression(in DOMString expression, 
                                        in <ref>XPathNSResolver</ref> resolver)
                                        raises(<ref>XPathException</ref>, 
                                               <ref>DOMException</ref>);
    <ref>XPathNSResolver</ref>    createNSResolver(in <ref>Node</ref> nodeResolver);
    <ref>DOMObject</ref>          evaluate(in DOMString expression, 
                                in <ref>Node</ref> contextNode, 
                                in <ref>XPathNSResolver</ref> resolver, 
                                in unsigned short type, 
                                in <ref>DOMObject</ref> result)
                                        raises(<ref>XPathException</ref>, 
                                               <ref>DOMException</ref>);
  };</webidl>
      <Operation name="createExpression" id="::xpath::XPathEvaluator::createExpression">
        <webidl>    <ref>XPathExpression</ref>    createExpression(in DOMString expression, 
                                        in <ref>XPathNSResolver</ref> resolver)
                                        raises(<ref>XPathException</ref>, 
                                               <ref>DOMException</ref>);</webidl>
        <Type name="XPathExpression"/>
        <ArgumentList>
          <Argument in="in" name="expression">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="resolver">
            <Type name="XPathNSResolver"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="XPathException"/>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="createNSResolver" id="::xpath::XPathEvaluator::createNSResolver">
        <webidl>    <ref>XPathNSResolver</ref>    createNSResolver(in <ref>Node</ref> nodeResolver);</webidl>
        <Type name="XPathNSResolver"/>
        <ArgumentList>
          <Argument in="in" name="nodeResolver">
            <Type name="Node"/>
          </Argument>
        </ArgumentList>
      </Operation>
      <Operation name="evaluate" id="::xpath::XPathEvaluator::evaluate">
        <webidl>    <ref>DOMObject</ref>          evaluate(in DOMString expression, 
                                in <ref>Node</ref> contextNode, 
                                in <ref>XPathNSResolver</ref> resolver, 
                                in unsigned short type, 
                                in <ref>DOMObject</ref> result)
                                        raises(<ref>XPathException</ref>, 
                                               <ref>DOMException</ref>);</webidl>
        <Type name="DOMObject"/>
        <ArgumentList>
          <Argument in="in" name="expression">
            <Type type="DOMString"/>
          </Argument>
          <Argument in="in" name="contextNode">
            <Type name="Node"/>
          </Argument>
          <Argument in="in" name="resolver">
            <Type name="XPathNSResolver"/>
          </Argument>
          <Argument in="in" name="type">
            <Type type="unsigned short"/>
          </Argument>
          <Argument in="in" name="result">
            <Type name="DOMObject"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="XPathException"/>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
    </Interface>
    <Implements name1="Document" name2="XPathEvaluator">
      <webidl>  <ref>Document</ref> implements <ref>XPathEvaluator</ref>;</webidl>
    </Implements>
    <Interface name="XPathExpression" id="::xpath::XPathExpression">
      <webidl>  interface XPathExpression {
    <ref>DOMObject</ref>          evaluate(in <ref>Node</ref> contextNode, 
                                in unsigned short type, 
                                in <ref>DOMObject</ref> result)
                                        raises(<ref>XPathException</ref>, 
                                               <ref>dom::DOMException</ref>);
  };</webidl>
      <Operation name="evaluate" id="::xpath::XPathExpression::evaluate">
        <webidl>    <ref>DOMObject</ref>          evaluate(in <ref>Node</ref> contextNode, 
                                in unsigned short type, 
                                in <ref>DOMObject</ref> result)
                                        raises(<ref>XPathException</ref>, 
                                               <ref>dom::DOMException</ref>);</webidl>
        <Type name="DOMObject"/>
        <ArgumentList>
          <Argument in="in" name="contextNode">
            <Type name="Node"/>
          </Argument>
          <Argument in="in" name="type">
            <Type type="unsigned short"/>
          </Argument>
          <Argument in="in" name="result">
            <Type name="DOMObject"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="XPathException"/>
          <RaiseException name="domDOMException"/>
        </Raises>
      </Operation>
    </Interface>
    <Interface name="XPathNSResolver" id="::xpath::XPathNSResolver">
      <webidl>  [Callback]
  interface XPathNSResolver {
    DOMString?         lookupNamespaceURI(in DOMString prefix);
  };</webidl>
      <ExtendedAttributeList>
        <ExtendedAttribute name="Callback"/>
      </ExtendedAttributeList>
      <Operation name="lookupNamespaceURI" id="::xpath::XPathNSResolver::lookupNamespaceURI">
        <webidl>    DOMString?         lookupNamespaceURI(in DOMString prefix);</webidl>
        <Type type="DOMString" nullable="nullable"/>
        <ArgumentList>
          <Argument in="in" name="prefix">
            <Type type="DOMString"/>
          </Argument>
        </ArgumentList>
      </Operation>
    </Interface>
    <Interface name="XPathResult" id="::xpath::XPathResult">
      <webidl>  interface XPathResult {

    const unsigned short      ANY_TYPE                       = 0;
    const unsigned short      NUMBER_TYPE                    = 1;
    const unsigned short      STRING_TYPE                    = 2;
    const unsigned short      BOOLEAN_TYPE                   = 3;
    const unsigned short      UNORDERED_NODE_ITERATOR_TYPE   = 4;
    const unsigned short      ORDERED_NODE_ITERATOR_TYPE     = 5;
    const unsigned short      UNORDERED_NODE_SNAPSHOT_TYPE   = 6;
    const unsigned short      ORDERED_NODE_SNAPSHOT_TYPE     = 7;
    const unsigned short      ANY_UNORDERED_NODE_TYPE        = 8;
    const unsigned short      FIRST_ORDERED_NODE_TYPE        = 9;

    readonly attribute unsigned short  resultType;
    readonly attribute double          numberValue getraises(<ref>XPathException</ref>);

    readonly attribute DOMString       stringValue getraises(<ref>XPathException</ref>);

    readonly attribute boolean         booleanValue getraises(<ref>XPathException</ref>);

    readonly attribute <ref>Node</ref>            singleNodeValue getraises(<ref>XPathException</ref>);

    readonly attribute boolean         invalidIteratorState;
    readonly attribute unsigned long   snapshotLength getraises(<ref>XPathException</ref>);

    <ref>Node</ref>               iterateNext()
                                        raises(<ref>XPathException</ref>, 
                                               <ref>DOMException</ref>);
    <ref>Node</ref>               snapshotItem(in unsigned long index)
                                        raises(<ref>XPathException</ref>);
  };</webidl>
      <Const name="ANY_TYPE" value="0" id="::xpath::XPathResult::ANY_TYPE">
        <webidl>    const unsigned short      ANY_TYPE                       = 0;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="NUMBER_TYPE" value="1" id="::xpath::XPathResult::NUMBER_TYPE">
        <webidl>    const unsigned short      NUMBER_TYPE                    = 1;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="STRING_TYPE" value="2" id="::xpath::XPathResult::STRING_TYPE">
        <webidl>    const unsigned short      STRING_TYPE                    = 2;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="BOOLEAN_TYPE" value="3" id="::xpath::XPathResult::BOOLEAN_TYPE">
        <webidl>    const unsigned short      BOOLEAN_TYPE                   = 3;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="UNORDERED_NODE_ITERATOR_TYPE" value="4" id="::xpath::XPathResult::UNORDERED_NODE_ITERATOR_TYPE">
        <webidl>    const unsigned short      UNORDERED_NODE_ITERATOR_TYPE   = 4;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="ORDERED_NODE_ITERATOR_TYPE" value="5" id="::xpath::XPathResult::ORDERED_NODE_ITERATOR_TYPE">
        <webidl>    const unsigned short      ORDERED_NODE_ITERATOR_TYPE     = 5;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="UNORDERED_NODE_SNAPSHOT_TYPE" value="6" id="::xpath::XPathResult::UNORDERED_NODE_SNAPSHOT_TYPE">
        <webidl>    const unsigned short      UNORDERED_NODE_SNAPSHOT_TYPE   = 6;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="ORDERED_NODE_SNAPSHOT_TYPE" value="7" id="::xpath::XPathResult::ORDERED_NODE_SNAPSHOT_TYPE">
        <webidl>    const unsigned short      ORDERED_NODE_SNAPSHOT_TYPE     = 7;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="ANY_UNORDERED_NODE_TYPE" value="8" id="::xpath::XPathResult::ANY_UNORDERED_NODE_TYPE">
        <webidl>    const unsigned short      ANY_UNORDERED_NODE_TYPE        = 8;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Const name="FIRST_ORDERED_NODE_TYPE" value="9" id="::xpath::XPathResult::FIRST_ORDERED_NODE_TYPE">
        <webidl>    const unsigned short      FIRST_ORDERED_NODE_TYPE        = 9;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Attribute readonly="readonly" name="resultType" id="::xpath::XPathResult::resultType">
        <webidl>    readonly attribute unsigned short  resultType;</webidl>
        <Type type="unsigned short"/>
      </Attribute>
      <Attribute readonly="readonly" name="numberValue" id="::xpath::XPathResult::numberValue">
        <webidl>    readonly attribute double          numberValue getraises(<ref>XPathException</ref>);</webidl>
        <Type type="double"/>
        <GetRaises>
          <RaiseException name="XPathException"/>
        </GetRaises>
      </Attribute>
      <Attribute readonly="readonly" name="stringValue" id="::xpath::XPathResult::stringValue">
        <webidl>    readonly attribute DOMString       stringValue getraises(<ref>XPathException</ref>);</webidl>
        <Type type="DOMString"/>
        <GetRaises>
          <RaiseException name="XPathException"/>
        </GetRaises>
      </Attribute>
      <Attribute readonly="readonly" name="booleanValue" id="::xpath::XPathResult::booleanValue">
        <webidl>    readonly attribute boolean         booleanValue getraises(<ref>XPathException</ref>);</webidl>
        <Type type="boolean"/>
        <GetRaises>
          <RaiseException name="XPathException"/>
        </GetRaises>
      </Attribute>
      <Attribute readonly="readonly" name="singleNodeValue" id="::xpath::XPathResult::singleNodeValue">
        <webidl>    readonly attribute <ref>Node</ref>            singleNodeValue getraises(<ref>XPathException</ref>);</webidl>
        <Type name="Node"/>
        <GetRaises>
          <RaiseException name="XPathException"/>
        </GetRaises>
      </Attribute>
      <Attribute readonly="readonly" name="invalidIteratorState" id="::xpath::XPathResult::invalidIteratorState">
        <webidl>    readonly attribute boolean         invalidIteratorState;</webidl>
        <Type type="boolean"/>
      </Attribute>
      <Attribute readonly="readonly" name="snapshotLength" id="::xpath::XPathResult::snapshotLength">
        <webidl>    readonly attribute unsigned long   snapshotLength getraises(<ref>XPathException</ref>);</webidl>
        <Type type="unsigned long"/>
        <GetRaises>
          <RaiseException name="XPathException"/>
        </GetRaises>
      </Attribute>
      <Operation name="iterateNext" id="::xpath::XPathResult::iterateNext">
        <webidl>    <ref>Node</ref>               iterateNext()
                                        raises(<ref>XPathException</ref>, 
                                               <ref>DOMException</ref>);</webidl>
        <Type name="Node"/>
        <ArgumentList/>
        <Raises>
          <RaiseException name="XPathException"/>
          <RaiseException name="DOMException"/>
        </Raises>
      </Operation>
      <Operation name="snapshotItem" id="::xpath::XPathResult::snapshotItem">
        <webidl>    <ref>Node</ref>               snapshotItem(in unsigned long index)
                                        raises(<ref>XPathException</ref>);</webidl>
        <Type name="Node"/>
        <ArgumentList>
          <Argument in="in" name="index">
            <Type type="unsigned long"/>
          </Argument>
        </ArgumentList>
        <Raises>
          <RaiseException name="XPathException"/>
        </Raises>
      </Operation>
    </Interface>
    <Interface name="XPathNamespace" id="::xpath::XPathNamespace">
      <webidl>  interface XPathNamespace : <ref>Node</ref> {

    const unsigned short      XPATH_NAMESPACE_NODE           = 13;

    readonly attribute <ref>Element</ref>         ownerElement;
  };</webidl>
      <InterfaceInheritance>
        <Name name="Node"/>
      </InterfaceInheritance>
      <Const name="XPATH_NAMESPACE_NODE" value="13" id="::xpath::XPathNamespace::XPATH_NAMESPACE_NODE">
        <webidl>    const unsigned short      XPATH_NAMESPACE_NODE           = 13;</webidl>
        <Type type="unsigned short"/>
      </Const>
      <Attribute readonly="readonly" name="ownerElement" id="::xpath::XPathNamespace::ownerElement">
        <webidl>    readonly attribute <ref>Element</ref>         ownerElement;</webidl>
        <Type name="Element"/>
      </Attribute>
    </Interface>
  </Module>
</Definitions>
