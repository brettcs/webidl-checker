// commented out for now - bug in widlproc
//interface doubleSpecialKeywordOperation {
//  getter setter getter double (DOMString propertyName);
//};

// there MUST exist at most one stringifier
interface moreThanOneStringifier {
  stringifier DOMString toString();
  stringifier DOMString toLongString();
};

// there MUST exist at most one of each variety of getter, setter, creator and deleter
interface moreThanOneNameGetter {
  getter double getProperty(DOMString propertyName);
  getter double getProperty2(DOMString propertyName);
};

interface moreThanOneIndexSetter {
  getter double getProperty(unsigned long index);
  setter void setProperty(unsigned long index, double value);
  setter void setProperty2(unsigned long index, double value);
};

// Special operations declared using operations MUST NOT  be variadic nor have any optional arguments.
interface specialVariadicOperation {
  getter double getProperty(DOMString... propertyName);
};

interface specialOperationWithOptionalArgument {
  creator void setProperty(unsigned long index, optional double value);
  getter double getProperty(unsigned long index);
};

interface StringifierWithArguments {
  stringifier DOMString toString(double value);
}; 

interface StringifierWrongType {
  stringifier double toString();
}; 

interface StringifierAttributeOnNonString {
  stringifier attribute boolean right;
}; 

interface IndexGetterWithMoreThanOneArgument {
  getter double getProperty(unsigned long index1, unsigned long index2);
};

interface IndexDeleterWithMoreThanOneArgument {
  getter double getProperty(unsigned long index);
  deleter double deleteProperty(unsigned long index1, unsigned long index2);
};

interface IndexGetterWithNonUnsignedLongArgument {
  getter double getProperty(long index);
};

interface IndexSetterWithMoreThanTwoArguments {
  getter double getProperty(unsigned long index);
  setter void setProperty(unsigned long index, double value, unsigned long parameter);
};

interface IndexCreatorWithOnlyOneArgument {
  getter double getProperty(unsigned long index);
  creator void setProperty(unsigned long index);
};

interface IndexCreatorWithWrongFirstArgument {
  getter double getProperty(unsigned long index);
  creator void setProperty(double index, double value);
};

interface NameGetterWithMoreThanOneArgument {
  getter double getProperty(DOMString name, unsigned long index2);
};

interface NameDeleterWithMoreThanOneArgument {
  getter double getProperty(DOMString name);
  deleter double deleteProperty(DOMString name, unsigned long index2);
};

interface NameSetterWithMoreThanTwoArguments {
  getter double getProperty(DOMString name);
  setter void setProperty(DOMString name, double value, unsigned long parameter);
};

interface NameCreatorWithOnlyOneArgument {
  getter double getProperty(DOMString name);
  creator void setProperty(DOMString name);
};

interface SetterWithoutGetter {
  setter void setProperty(DOMString name, double value);
};

interface NamedSetterWithoutNamedGetter {
  setter void setProperty(DOMString name, double value);
  getter double getProperty(unsigned long index);
};

interface IndexedCreatorWithoutIndexedGetter {
  creator void setProperty(unsigned long index, double value);
  getter double getProperty(DOMString name);
};

interface ValidSpecialOperations {
  readonly attribute unsigned long propertyCount;
  getter double getPropertyByIndex(unsigned long index);
  getter double getProperty2(DOMString propertyName);
  legacycaller double compute(double x);
  legacycaller double computeFaster(double x, double speed);
  stringifier;
  setter creator double setProperty(DOMString name, double value);
  setter creator double setProperty(unsigned long index, double value);
};