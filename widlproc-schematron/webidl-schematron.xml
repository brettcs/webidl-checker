<schema xmlns="http://purl.oclc.org/dsdl/schematron" >
     <pattern  id="definedTypes">
       <title>IDL is using defined types</title>
          <rule context="//Type[@name]">
               <assert test="//Interface[@name=current()/@name]"><value-of select="@name"/> type used in <value-of select="ancestor::Interface[1]/@name" />.<value-of select="parent::*[1]/@name" /> declaration undefined.</assert>
          </rule>
     </pattern>
     <pattern>
       <title>Extended attributes are well-known</title>
       <rule context="//ExtendedAttribute[@name]">
	 <assert see="http://dev.w3.org/2006/webapi/WebIDL/#es-extended-attributes" test="@name='AllowAny' or @name='Callback' or @name='Constructor' or @name='NamedConstructor' or @name='NamespaceObject' or @name='NoInterfaceObject' or @name='OverrideBuiltins' or @name='PrototypeRoot' or @name='PutForwards' or @name='Replaceable' or @name='TreatNullAs' or @name='TreatUndefinedAs'">Extended attribute of <value-of select="@name"/> is unknown in WebIDL.</assert>
       </rule>
     </pattern>
     <pattern>
       <title>Extended attribute common rules</title>
       <rule  id="extendedAttributeAppliesToInterface" abstract="true">
	 <assert test="parent::ExtendedAttributeList/parent::Interface">Extended attribute <value-of select="@name"/> used on <value-of select="local-name(parent::ExtendedAttributeList/parent::*)" /> — <value-of select="@name"/> expected only on interfaces.</assert>	 
       </rule>
       <rule  name="Extended attribute takes no argument" id="extendedAttributeNoArg" abstract="true">
	 <assert test="not(@value)">Extended attribute <value-of select="@name"/> used with arguments on <value-of select="concat(local-name(parent::ExtendedAttributeList/parent::*),' ',parent::ExtendedAttributeList/parent::*/@name)"/>.</assert>
       </rule>
       <rule name="Extended attribute cannot be used on an interface that inherits from another" id="extendedAttributeNotWithInheritance" abstract="true">
	 <assert test="not(parent::ExtendedAttributeList/parent::Interface/InterfaceInheritance)">The interface <value-of select="parent::ExtendedAttributeList/parent::Interface/@name"/> has extended attribute <value-of select="@name"/> but inherits from another interface (<value-of select="parent::ExtendedAttributeList/parent::Interface/InterfaceInheritance/Name/@name"/>).</assert>
       </rule>
       <rule name="Extended attribute can only be used on attribute" abstract="true" id="extendedAttributeAppliesToAttribute">
	 <assert test="parent::ExtendedAttributeList/parent::Attribute">Extended attribute <value-of select="@name"/> used on <value-of select="local-name(parent::ExtendedAttributeList/parent::*)" /> — <value-of select="@name"/> expected only on attributes.</assert>
       </rule>
       <rule name="Extended attribute can only be used on read-only attribute" abstract="true" id="extendedAttributeAppliesToReadonlyAttribute">
	 <assert test="parent::ExtendedAttributeList/parent::Attribute">Extended attribute <value-of select="@name"/> used on <value-of select="local-name(parent::ExtendedAttributeList/parent::*)" /> — <value-of select="@name"/> expected only on attributes.</assert>
	 <assert test="not(parent::ExtendedAttributeList/parent::Attribute) or parent::ExtendedAttributeList/parent::Attribute[@readonly='readonly']">Extended attribute <value-of select="@name"/> used on non-readonly attribute <value-of select="ancestor::Interface/@name" />.<value-of select="parent::ExtendedAttributeList/parent::Attribute/@name" /> — <value-of select="@name"/> expected only on readonly attributes.</assert>
       </rule>

     </pattern>
     <pattern>
       <title>Extended attribute Callback</title>
       <rule context="//ExtendedAttribute[@name='Callback']">
	 <extends rule="extendedAttributeAppliesToInterface"/>
	 <assert see="http://dev.w3.org/2006/webapi/WebIDL/#Callback" test="not(@value) or @value='FunctionOnly' or @value='PropertyOnly'">Extended attribute Callback used on <value-of select="parent::ExtendedAttributeList/parent::Interface/@name" /> uses an unknown argument <value-of select="@value"/>.</assert>
	 <extends see="http://dev.w3.org/2006/webapi/WebIDL/#native-objects" rule="extendedAttributeNotWithInheritance"/>
	 <assert see="http://dev.w3.org/2006/webapi/WebIDL/#native-objects" test="not(parent::ExtendedAttributeList/ExtendedAttribute[@name='Constructor' or @name='NamedConstructor'])">The interface <value-of select="parent::ExtendedAttributeList/parent::Interface/@name"/> has both extended attributes Callback and <value-of select="parent::ExtendedAttributeList/ExtendedAttribute[@name='Constructor' or @name='NamedConstructor']/@name"/>).</assert>
	 <assert see="http://dev.w3.org/2006/webapi/WebIDL/#native-objects" test="not(parent::ExtendedAttributeList/parent::Interface/Operation[@getter or @setter or @creator or @deleter or @caller or @stringifier])">The interface <value-of select="parent::ExtendedAttributeList/parent::Interface/@name"/> has a Callback extended attribute, but offers a either  getters, setters, creators, deleters, caller or stringifier.</assert>
	 <!-- @@@ widlproc doesn't show extended attributes on attributes ? -->
	 <assert see="http://dev.w3.org/2006/webapi/WebIDL/#native-objects" test="not(parent::ExtendedAttributeList/parent::Interface/Attribute[ExtendedAttributeList/ExtendedAttribute[@name='PutForwards' or @name='TreatNullAs' or @name='TreatUndefinedAs']])">The interface <value-of select="parent::ExtendedAttributeList/parent::Interface/@name"/> has a Callback extended attribute, but exposes an attribute with a <value-of select="parent::ExtendedAttributeList/parent::Interface/Attribute/ExtendedAttributeList/ExtendedAttribute[@name='PutForwards' or @name='TreatNullAs' or @name='TreatUndefinedAs']/@name"/> extended attribute.</assert>
	 <assert see="http://dev.w3.org/2006/webapi/WebIDL/#Callback" test="not(@value and parent::ExtendedAttributeList/parent::Interface/Attribute)">The interface <value-of select="parent::ExtendedAttributeList/parent::Interface/@name"/> uses a Callback extended attribute with an argument, but exposes at least one attribute.</assert>
	 <let name="firstOperationName" value="parent::ExtendedAttributeList/parent::Interface/Operation[1]/@name"/>
	 <assert see="http://dev.w3.org/2006/webapi/WebIDL/#Callback" test="not(@value) or (count(parent::ExtendedAttributeList/parent::Interface/Operation[@name!=$firstOperationName])=0 and $firstOperationName)">The interface <value-of select="parent::ExtendedAttributeList/parent::Interface/@name"/> uses a Callback extended attribute with an argument, but exposes zero or multiple operations with different identifiers.</assert>
       </rule>
     </pattern>
     <pattern>
       <title>Extended attribute Constructor</title>
       <rule context="//ExtendedAttribute[@name='Constructor']">
	 <extends rule="extendedAttributeAppliesToInterface"/>
       </rule>
     </pattern>
     <pattern>
       <title>Extended attribute NamedConstructor</title>
       <rule context="//ExtendedAttribute[@name='NamedConstructor']">
	 <extends rule="extendedAttributeAppliesToInterface"/>
	 <!-- @@@ The NamedConstructor clash checks should be done across all well-known IDLs -->
	 <assert  see="http://dev.w3.org/2006/webapi/WebIDL/#NamedConstructor" test="not(parent::ExtendedAttributeList/parent::Interface/preceding::Interface/ExtendedAttributeList/ExtendedAttribute[@name='NamedConstructor' and @value=current()/@value])">Extended attribute NamedConstructor with identifier <value-of select="@value"/> in <value-of select="parent::ExtendedAttributeList/parent::Interface/@name"/> interface clashes with NamedConstructor on interface <value-of select="parent::ExtendedAttributeList/parent::Interface/preceding::Interface[ExtendedAttributeList/ExtendedAttribute[@name='NamedConstructor' and @value=current()/@value]]/@name"/>.</assert> 
	 <assert  see="http://dev.w3.org/2006/webapi/WebIDL/#NamedConstructor" test="not(parent::ExtendedAttributeList/parent::Interface/preceding::Interface[not(ExtendedAttributeList/ExtendedAttribute[@name='NoInterfaceObject'])][@name=current()/@value])">Extended attribute NamedConstructor with identifier <value-of select="@value"/> in <value-of select="parent::ExtendedAttributeList/parent::Interface/@name"/> interface clashes with  interface <value-of select="parent::ExtendedAttributeList/parent::Interface/preceding::Interface[not(ExtendedAttributeList/ExtendedAttribute[@name='NoInterfaceObject'])][@name=current()/@value]/@name"/>.</assert> 
	 <assert  see="http://dev.w3.org/2006/webapi/WebIDL/#NamedConstructor" test="not(parent::ExtendedAttributeList/parent::Interface/preceding::Exception[not(ExtendedAttributeList/ExtendedAttribute[@name='NoInterfaceObject'])][@name=current()/@value])">Extended attribute NamedConstructor with identifier <value-of select="@value"/> in <value-of select="parent::ExtendedAttributeList/parent::Interface/@name"/> interface clashes with exception interface <value-of select="parent::ExtendedAttributeList/parent::Interface/preceding::Exception[not(ExtendedAttributeList/ExtendedAttribute[@name='NoInterfaceObject'])][@name=current()/@value]/@name"/>.</assert> 

       </rule>
     </pattern>
     <pattern>
       <title>Extended attribute NamespaceObject</title>
       <rule context="//ExtendedAttribute[@name='NamespaceObject']">
	 <assert see="http://dev.w3.org/2006/webapi/WebIDL/#NamespaceObject" test="parent::ExtendedAttributeList/parent::Module">Extended attribute NamespaceObject used on <value-of select="local-name(parent::ExtendedAttributeList/parent::*)" /> — NamespaceObject expected only on modules.</assert>
	 <extends rule="extendedAttributeNoArg"/>
	 <assert see="http://dev.w3.org/2006/webapi/WebIDL/#NamespaceObject" test="not(parent::ExtendedAttributeList/parent::Module/ancestor::Module[ExtendedAttributeList/ExtendedAttribute[@name='NamespaceObject']])">Extended attribute NamespaceObject used on module <value-of select="parent::ExtendedAttributeList/parent::Module/@name" /> that is included in module <value-of select="parent::ExtendedAttributeList/parent::Module/ancestor::Module[ExtendedAttributeList/ExtendedAttribute[@name='NamespaceObject']]/@name"/> that also has a NamespaceOjbect extended attribute.</assert>
       </rule>
     </pattern>
     <pattern>
       <title>Extended attribute NoInterfaceObject</title>
       <rule context="//ExtendedAttribute[@name='NoInterfaceObject']">
	 <assert see="http://dev.w3.org/2006/webapi/WebIDL/#NoInterfaceObject" test="parent::ExtendedAttributeList/parent::Interface or parent::ExtendedAttributeList/parent::Exception">Extended attribute NoInterfaceObject used on <value-of select="local-name(parent::ExtendedAttributeList/parent::*)" /> — NoInterfaceObject expected only on interfaces and exceptions.</assert>
	 <extends rule="extendedAttributeNoArg"/>
	 <!-- @@@ shouldn't this also apply to NamedConstructor? -->
	 <assert see="http://dev.w3.org/2006/webapi/WebIDL/#NoInterfaceObject" test="not(parent::ExtendedAttributeList/ExtendedAttribute[@name='Constructor'])">Extended attribute NoInterfaceObject used in combination with extended attribute Constructor on interface <value-of select="parent::ExtendedAttributeList/parent::*/@name"/>.</assert>
       </rule>
     </pattern>
     <pattern>
       <title>Extended attribute OverrideBuiltins</title>
       <rule context="//ExtendedAttribute[@name='OverrideBuiltins']">
	 <extends rule="extendedAttributeAppliesToInterface"/>
	 <extends rule="extendedAttributeNoArg"/>
	 <assert see="http://dev.w3.org/2006/webapi/WebIDL/#OverrideBuiltins" test="parent::ExtendedAttributeList/parent::Interface[Operation/@getter]">Extended attribute OverrideBuiltins used on interface <value-of select="parent::ExtendedAttributeList/parent::Interface/@name"/> that does not have a name getter.</assert>
       </rule>
     </pattern>
     <pattern>
       <title>Extended attribute PrototypeRoot</title>
       <rule context="//ExtendedAttribute[@name='PrototypeRoot']">
	 <extends see="http://dev.w3.org/2006/webapi/WebIDL/#PrototypeRoot" rule="extendedAttributeAppliesToInterface"/>
	 <extends see="http://dev.w3.org/2006/webapi/WebIDL/#PrototypeRoot" rule="extendedAttributeNoArg"/>
	 <extends see="http://dev.w3.org/2006/webapi/WebIDL/#PrototypeRoot" rule="extendedAttributeNotWithInheritance"/>
	 <!--<assert see="http://dev.w3.org/2006/webapi/WebIDL/#PrototypeRoot" test="false">Interface <value-of select="parent::ExtendedAttributeList/parent::Interface/@name"/> has multiple heritance paths to <value-of select="'@@@'"/></assert>-->
       </rule>
     </pattern>
     <pattern>
       <title>Extended Attribute PutForwards</title>
       <rule context="//ExtendedAttribute[@name='PutForwards']" >
	 <let name="validObject" value="parent::ExtendedAttributeList/parent::Attribute"/>
	 <extends see="http://dev.w3.org/2006/webapi/WebIDL/#PutForwards" rule="extendedAttributeAppliesToReadonlyAttribute"/>
	 <assert test="@value">Extended attribute <value-of select="@name"/> used without required argument on <value-of select="ancestor::Interface/@name" />.<value-of select="parent::ExtendedAttributeList/parent::Attribute/@name" />.</assert>
	 <let name="linkedInterface" value="parent::ExtendedAttributeList/parent::Attribute/Type/@name"/>
	 <assert see="http://dev.w3.org/2006/webapi/WebIDL/#PutForwards" test="not(@value and $validObject) or //Interface[@name=$linkedInterface]/Attribute[@name=current()/@value]">Extended attribute PutForwards used on attribute <value-of select="ancestor::Interface/@name" />.<value-of select="parent::ExtendedAttributeList/parent::Attribute/@name" /> with argument <value-of select="@value"/> does not match a known attribute in <value-of select="$linkedInterface"/> interface.</assert>
	 <!--<assert see="http://dev.w3.org/2006/webapi/WebIDL/#PutForwards" test="false">PutForwards on attribute <value-of select="parent::ExtendedAttributeList/parent::Interface/@name"/>.<value-of select="parent::ExtendedAttributeList/parent::Attribute/@name" /> is creating a cycle</assert>-->
       </rule>
     </pattern>
     <pattern>
       <title>Extended Attribute Replaceable</title>
       <rule context="//ExtendedAttribute[@name='Replaceable']" >
	 <extends rule="extendedAttributeNoArg"/>
	 <extends see="http://dev.w3.org/2006/webapi/WebIDL/#PutForwards" rule="extendedAttributeAppliesToReadonlyAttribute"/>
       </rule>
     </pattern>
     <pattern>
       <title>Extended Attribute TreatNullAs</title>
       <rule context="//ExtendedAttribute[@name='TreatNullAs']">
	 <let name="validObject" value="parent::ExtendedAttributeList/parent::Attribute or parent::ExtendedAttributeList/parent::Argument/parent::ArgumentList/parent::Operation or parent::ExtendedAttributeList/parent::Operation"/>
	 <let name="objectName" value="concat(ancestor::Interface/@name,'.',concat(parent::ExtendedAttributeList/parent::Attribute/@name, parent::ExtendedAttributeList/parent::Argument/parent::ArgumentList/parent::Operation/@name, parent::ExtendedAttributeList/parent::Operation/@name))"/>
	 <assert test="$validObject">Extended attribute <value-of select="@name"/> used on <value-of select="local-name(parent::ExtendedAttributeList/parent::*)" /> — <value-of select="@name"/> expected only on attribute, operation arguments, or operations.</assert>
	 <assert test="not($validObject) or parent::ExtendedAttributeList/parent::*/Type[@type='DOMString']">Extended attribute TreatNullAs used on <value-of select="$objectName" /> applied to type <value-of select="concat(parent::ExtendedAttributeList/parent::*/Type/@type, parent::ExtendedAttributeList/parent::*/Type/@name)"/> — TreatNullAs expected only on attributes, operations or operations arguments with DOMString type.</assert>
	 <assert test="not($validObject) or @value='EmptyString'">Extended attribute TreatNullAs used on <value-of select="$objectName" /> without required “EmptyString” argument.</assert>
       </rule>
     </pattern>
     <pattern>
       <title>Extended Attribute TreatUndefinedAs</title>
       <rule context="//ExtendedAttribute[@name='TreatUndefinedAs']">
	 <let name="validObject" value="parent::ExtendedAttributeList/parent::Attribute or parent::ExtendedAttributeList/parent::Argument/parent::ArgumentList/parent::Operation or parent::ExtendedAttributeList/parent::Operation"/>
	 <let name="objectName" value="concat(ancestor::Interface/@name,'.',concat(parent::ExtendedAttributeList/parent::Attribute/@name, parent::ExtendedAttributeList/parent::Argument/parent::ArgumentList/parent::Operation/@name, parent::ExtendedAttributeList/parent::Operation/@name))"/>
	 <assert test="$validObject">Extended attribute <value-of select="@name"/> used on <value-of select="local-name(parent::ExtendedAttributeList/parent::*)" /> — <value-of select="@name"/> expected only on attribute, operation arguments, or operations.</assert>
	 <assert test="not($validObject) or parent::ExtendedAttributeList/parent::*/Type[@type='DOMString']">Extended attribute TreatUndefinedAs used on <value-of select="$objectName" /> applied to type <value-of select="concat(parent::ExtendedAttributeList/parent::*/Type/@type, parent::ExtendedAttributeList/parent::*/Type/@name)"/> — TreatUndefinedAs expected only on attributes, operations or operations arguments with DOMString or DOMString? type.</assert>
	 <assert test="not($validObject) or (@value='EmptyString' or @value='Null')">Extended attribute TreatUndefinedAs used on <value-of select="$objectName" /> without required “EmptyString” or “Null” argument.</assert>
	 <assert test="not($validObject and parent::ExtendedAttributeList/parent::*/Type[@type='DOMString']) or not(@value='Null') or  (@value='Null' and parent::ExtendedAttributeList/parent::*/Type[@nullable='nullable'])">Extended attribute TreatUndefinedAs used on <value-of select="$objectName" /> with required “Null” argument, but not applied to a DOMString? object.</assert>
       </rule>
     </pattern>

</schema>
